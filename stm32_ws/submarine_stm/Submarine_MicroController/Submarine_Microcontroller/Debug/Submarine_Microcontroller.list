
Submarine_Microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a540  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800a700  0800a700  0001a700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f0  0800a7f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7f8  0800a7f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f8  0800a7f8  0001a7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a800  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e0  20000088  0800a888  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800a888  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c92e  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e7  00000000  00000000  0003ca29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d8  00000000  00000000  0003fe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001385  00000000  00000000  000416e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d81e  00000000  00000000  00042a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e289  00000000  00000000  0007028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e390  00000000  00000000  0008e514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000075e0  00000000  00000000  001ac8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d3  00000000  00000000  001b3e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a6e8 	.word	0x0800a6e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	0800a6e8 	.word	0x0800a6e8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb8:	f001 fa5f 	bl	800237a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebc:	f000 f850 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec0:	f000 fb90 	bl	80015e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ec4:	f000 f8a0 	bl	8001008 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ec8:	f000 f904 	bl	80010d4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000ecc:	f000 f942 	bl	8001154 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000ed0:	f000 f98c 	bl	80011ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ed4:	f000 fb5c 	bl	8001590 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000ed8:	f000 f9d4 	bl	8001284 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000edc:	f000 fa54 	bl	8001388 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ee0:	f000 fad4 	bl	800148c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	MTR_DRV_INIT(0x00, 0x00, 0x01, 0x01);
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fcfe 	bl	80018ec <MTR_DRV_INIT>
	HAL_UART_Receive_IT(&hlpuart1, rx_data, 35); //Init recieve global interupt for 35 bit buffer
 8000ef0:	2223      	movs	r2, #35	; 0x23
 8000ef2:	4915      	ldr	r1, [pc, #84]	; (8000f48 <main+0x94>)
 8000ef4:	4815      	ldr	r0, [pc, #84]	; (8000f4c <main+0x98>)
 8000ef6:	f005 fdcd 	bl	8006a94 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000efa:	2104      	movs	r1, #4
 8000efc:	4814      	ldr	r0, [pc, #80]	; (8000f50 <main+0x9c>)
 8000efe:	f004 fd45 	bl	800598c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f02:	2108      	movs	r1, #8
 8000f04:	4812      	ldr	r0, [pc, #72]	; (8000f50 <main+0x9c>)
 8000f06:	f004 fd41 	bl	800598c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <main+0xa0>)
 8000f0e:	f004 fd3d 	bl	800598c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f12:	2108      	movs	r1, #8
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <main+0xa0>)
 8000f16:	f004 fd39 	bl	800598c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <main+0xa4>)
 8000f1e:	f004 fd35 	bl	800598c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000f22:	2108      	movs	r1, #8
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <main+0xa4>)
 8000f26:	f004 fd31 	bl	800598c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if (rx_received) //New Transmission from RPI
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <main+0xa8>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0fb      	beq.n	8000f2a <main+0x76>
    {
	  rx_received = 0;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <main+0xa8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
	  parseComs();
 8000f38:	f000 fdae 	bl	8001a98 <parseComs>
	  //imuPullData();
	  updateProps();
 8000f3c:	f000 fd2e 	bl	800199c <updateProps>
	  transmitData();
 8000f40:	f000 fe0c 	bl	8001b5c <transmitData>
	if (rx_received) //New Transmission from RPI
 8000f44:	e7f1      	b.n	8000f2a <main+0x76>
 8000f46:	bf00      	nop
 8000f48:	200008d8 	.word	0x200008d8
 8000f4c:	20000160 	.word	0x20000160
 8000f50:	20000280 	.word	0x20000280
 8000f54:	200002cc 	.word	0x200002cc
 8000f58:	20000318 	.word	0x20000318
 8000f5c:	20000870 	.word	0x20000870

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b096      	sub	sp, #88	; 0x58
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	2244      	movs	r2, #68	; 0x44
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f007 fffe 	bl	8008f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f002 ff96 	bl	8003eb4 <HAL_PWREx_ControlVoltageScaling>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000f8e:	f000 fe39 	bl	8001c04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f92:	2322      	movs	r3, #34	; 0x22
 8000f94:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2340      	movs	r3, #64	; 0x40
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000fb0:	231e      	movs	r3, #30
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 f839 	bl	800403c <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fd0:	f000 fe18 	bl	8001c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	2105      	movs	r1, #5
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fc3e 	bl	8004870 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ffa:	f000 fe03 	bl	8001c04 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3758      	adds	r7, #88	; 0x58
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001020:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <MX_ADC1_Init+0xc4>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001024:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <MX_ADC1_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_ADC1_Init+0xc0>)
 800103e:	2204      	movs	r2, #4
 8001040:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ADC1_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001050:	2201      	movs	r2, #1
 8001052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_ADC1_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_ADC1_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001072:	2200      	movs	r2, #0
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001080:	2204      	movs	r2, #4
 8001082:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <MX_ADC1_Init+0xc0>)
 8001086:	f001 fbb1 	bl	80027ec <HAL_ADC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001090:	f000 fdb8 	bl	8001c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_ADC1_Init+0xc8>)
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001098:	2306      	movs	r3, #6
 800109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a0:	237f      	movs	r3, #127	; 0x7f
 80010a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a4:	2304      	movs	r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_ADC1_Init+0xc0>)
 80010b2:	f001 fce7 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80010bc:	f000 fda2 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000a4 	.word	0x200000a4
 80010cc:	50040000 	.word	0x50040000
 80010d0:	04300002 	.word	0x04300002

080010d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_I2C1_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	; (800114c <MX_I2C1_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107075B0;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_I2C1_Init+0x74>)
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <MX_I2C1_Init+0x7c>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_I2C1_Init+0x74>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_I2C1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2C1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_I2C1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <MX_I2C1_Init+0x74>)
 8001110:	f002 fc42 	bl	8003998 <HAL_I2C_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111a:	f000 fd73 	bl	8001c04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111e:	2100      	movs	r1, #0
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <MX_I2C1_Init+0x74>)
 8001122:	f002 fcc8 	bl	8003ab6 <HAL_I2CEx_ConfigAnalogFilter>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800112c:	f000 fd6a 	bl	8001c04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_I2C1_Init+0x74>)
 8001134:	f002 fd0a 	bl	8003b4c <HAL_I2CEx_ConfigDigitalFilter>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 fd61 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000010c 	.word	0x2000010c
 800114c:	40005400 	.word	0x40005400
 8001150:	107075b0 	.word	0x107075b0

08001154 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <MX_LPUART1_UART_Init+0x94>)
 800115c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 800119e:	f005 fb91 	bl	80068c4 <HAL_UART_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80011a8:	f000 fd2c 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 80011b0:	f007 fb3d 	bl	800882e <HAL_UARTEx_SetTxFifoThreshold>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011ba:	f000 fd23 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 80011c2:	f007 fb72 	bl	80088aa <HAL_UARTEx_SetRxFifoThreshold>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 fd1a 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_LPUART1_UART_Init+0x90>)
 80011d2:	f007 faf3 	bl	80087bc <HAL_UARTEx_DisableFifoMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 fd12 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000160 	.word	0x20000160
 80011e8:	40008000 	.word	0x40008000

080011ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_USART3_UART_Init+0x90>)
 80011f2:	4a23      	ldr	r2, [pc, #140]	; (8001280 <MX_USART3_UART_Init+0x94>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_USART3_UART_Init+0x90>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_USART3_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001236:	f005 fb45 	bl	80068c4 <HAL_UART_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001240:	f000 fce0 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001248:	f007 faf1 	bl	800882e <HAL_UARTEx_SetTxFifoThreshold>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001252:	f000 fcd7 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <MX_USART3_UART_Init+0x90>)
 800125a:	f007 fb26 	bl	80088aa <HAL_UARTEx_SetRxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001264:	f000 fcce 	bl	8001c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_USART3_UART_Init+0x90>)
 800126a:	f007 faa7 	bl	80087bc <HAL_UARTEx_DisableFifoMode>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001274:	f000 fcc6 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001f0 	.word	0x200001f0
 8001280:	40004800 	.word	0x40004800

08001284 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b6:	4b32      	ldr	r3, [pc, #200]	; (8001380 <MX_TIM3_Init+0xfc>)
 80012b8:	4a32      	ldr	r2, [pc, #200]	; (8001384 <MX_TIM3_Init+0x100>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <MX_TIM3_Init+0xfc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <MX_TIM3_Init+0xfc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 11999;
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <MX_TIM3_Init+0xfc>)
 80012ca:	f642 62df 	movw	r2, #11999	; 0x2edf
 80012ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <MX_TIM3_Init+0xfc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <MX_TIM3_Init+0xfc>)
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012dc:	4828      	ldr	r0, [pc, #160]	; (8001380 <MX_TIM3_Init+0xfc>)
 80012de:	f004 fa9d 	bl	800581c <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012e8:	f000 fc8c 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <MX_TIM3_Init+0xfc>)
 80012fa:	f004 fd61 	bl	8005dc0 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001304:	f000 fc7e 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001308:	481d      	ldr	r0, [pc, #116]	; (8001380 <MX_TIM3_Init+0xfc>)
 800130a:	f004 fade 	bl	80058ca <HAL_TIM_PWM_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001314:	f000 fc76 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4816      	ldr	r0, [pc, #88]	; (8001380 <MX_TIM3_Init+0xfc>)
 8001328:	f005 fa44 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001332:	f000 fc67 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2360      	movs	r3, #96	; 0x60
 8001338:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	2204      	movs	r2, #4
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_TIM3_Init+0xfc>)
 800134e:	f004 fc23 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001358:	f000 fc54 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	2208      	movs	r2, #8
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM3_Init+0xfc>)
 8001364:	f004 fc18 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800136e:	f000 fc49 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM3_Init+0xfc>)
 8001374:	f000 fe4a 	bl	800200c <HAL_TIM_MspPostInit>

}
 8001378:	bf00      	nop
 800137a:	3738      	adds	r7, #56	; 0x38
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000280 	.word	0x20000280
 8001384:	40000400 	.word	0x40000400

08001388 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <MX_TIM4_Init+0xfc>)
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <MX_TIM4_Init+0x100>)
 80013be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013c0:	4b30      	ldr	r3, [pc, #192]	; (8001484 <MX_TIM4_Init+0xfc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <MX_TIM4_Init+0xfc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 11999;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <MX_TIM4_Init+0xfc>)
 80013ce:	f642 62df 	movw	r2, #11999	; 0x2edf
 80013d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_TIM4_Init+0xfc>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM4_Init+0xfc>)
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013e0:	4828      	ldr	r0, [pc, #160]	; (8001484 <MX_TIM4_Init+0xfc>)
 80013e2:	f004 fa1b 	bl	800581c <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013ec:	f000 fc0a 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4821      	ldr	r0, [pc, #132]	; (8001484 <MX_TIM4_Init+0xfc>)
 80013fe:	f004 fcdf 	bl	8005dc0 <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001408:	f000 fbfc 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800140c:	481d      	ldr	r0, [pc, #116]	; (8001484 <MX_TIM4_Init+0xfc>)
 800140e:	f004 fa5c 	bl	80058ca <HAL_TIM_PWM_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001418:	f000 fbf4 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4816      	ldr	r0, [pc, #88]	; (8001484 <MX_TIM4_Init+0xfc>)
 800142c:	f005 f9c2 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001436:	f000 fbe5 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143a:	2360      	movs	r3, #96	; 0x60
 800143c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2204      	movs	r2, #4
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_TIM4_Init+0xfc>)
 8001452:	f004 fba1 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800145c:	f000 fbd2 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	2208      	movs	r2, #8
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM4_Init+0xfc>)
 8001468:	f004 fb96 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001472:	f000 fbc7 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM4_Init+0xfc>)
 8001478:	f000 fdc8 	bl	800200c <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3738      	adds	r7, #56	; 0x38
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002cc 	.word	0x200002cc
 8001488:	40000800 	.word	0x40000800

0800148c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	; 0x38
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014c0:	4a32      	ldr	r2, [pc, #200]	; (800158c <MX_TIM5_Init+0x100>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295
 80014d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014e4:	4828      	ldr	r0, [pc, #160]	; (8001588 <MX_TIM5_Init+0xfc>)
 80014e6:	f004 f999 	bl	800581c <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80014f0:	f000 fb88 	bl	8001c04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	4619      	mov	r1, r3
 8001500:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_TIM5_Init+0xfc>)
 8001502:	f004 fc5d 	bl	8005dc0 <HAL_TIM_ConfigClockSource>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800150c:	f000 fb7a 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001510:	481d      	ldr	r0, [pc, #116]	; (8001588 <MX_TIM5_Init+0xfc>)
 8001512:	f004 f9da 	bl	80058ca <HAL_TIM_PWM_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800151c:	f000 fb72 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4816      	ldr	r0, [pc, #88]	; (8001588 <MX_TIM5_Init+0xfc>)
 8001530:	f005 f940 	bl	80067b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800153a:	f000 fb63 	bl	8001c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	; 0x60
 8001540:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	2204      	movs	r2, #4
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_TIM5_Init+0xfc>)
 8001556:	f004 fb1f 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001560:	f000 fb50 	bl	8001c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2208      	movs	r2, #8
 8001568:	4619      	mov	r1, r3
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM5_Init+0xfc>)
 800156c:	f004 fb14 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8001576:	f000 fb45 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM5_Init+0xfc>)
 800157c:	f000 fd46 	bl	800200c <HAL_TIM_MspPostInit>

}
 8001580:	bf00      	nop
 8001582:	3738      	adds	r7, #56	; 0x38
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000318 	.word	0x20000318
 800158c:	40000c00 	.word	0x40000c00

08001590 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001596:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800159a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800159e:	2206      	movs	r2, #6
 80015a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80015bc:	2201      	movs	r2, #1
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80015ce:	f002 fb09 	bl	8003be4 <HAL_PCD_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80015d8:	f000 fb14 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000364 	.word	0x20000364

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08e      	sub	sp, #56	; 0x38
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fa:	4b83      	ldr	r3, [pc, #524]	; (8001808 <MX_GPIO_Init+0x224>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a82      	ldr	r2, [pc, #520]	; (8001808 <MX_GPIO_Init+0x224>)
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b80      	ldr	r3, [pc, #512]	; (8001808 <MX_GPIO_Init+0x224>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <MX_GPIO_Init+0x224>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	4a7c      	ldr	r2, [pc, #496]	; (8001808 <MX_GPIO_Init+0x224>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161e:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <MX_GPIO_Init+0x224>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800162a:	4b77      	ldr	r3, [pc, #476]	; (8001808 <MX_GPIO_Init+0x224>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a76      	ldr	r2, [pc, #472]	; (8001808 <MX_GPIO_Init+0x224>)
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001636:	4b74      	ldr	r3, [pc, #464]	; (8001808 <MX_GPIO_Init+0x224>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f003 0320 	and.w	r3, r3, #32
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	4b71      	ldr	r3, [pc, #452]	; (8001808 <MX_GPIO_Init+0x224>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a70      	ldr	r2, [pc, #448]	; (8001808 <MX_GPIO_Init+0x224>)
 8001648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b6e      	ldr	r3, [pc, #440]	; (8001808 <MX_GPIO_Init+0x224>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <MX_GPIO_Init+0x224>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a6a      	ldr	r2, [pc, #424]	; (8001808 <MX_GPIO_Init+0x224>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b68      	ldr	r3, [pc, #416]	; (8001808 <MX_GPIO_Init+0x224>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <MX_GPIO_Init+0x224>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a64      	ldr	r2, [pc, #400]	; (8001808 <MX_GPIO_Init+0x224>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b62      	ldr	r3, [pc, #392]	; (8001808 <MX_GPIO_Init+0x224>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <MX_GPIO_Init+0x224>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <MX_GPIO_Init+0x224>)
 8001690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <MX_GPIO_Init+0x224>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	4b59      	ldr	r3, [pc, #356]	; (8001808 <MX_GPIO_Init+0x224>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a58      	ldr	r2, [pc, #352]	; (8001808 <MX_GPIO_Init+0x224>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b56      	ldr	r3, [pc, #344]	; (8001808 <MX_GPIO_Init+0x224>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80016ba:	f002 fcaf 	bl	800401c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80016be:	2200      	movs	r2, #0
 80016c0:	21fe      	movs	r1, #254	; 0xfe
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f002 f935 	bl	8003934 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2130      	movs	r1, #48	; 0x30
 80016ce:	484f      	ldr	r0, [pc, #316]	; (800180c <MX_GPIO_Init+0x228>)
 80016d0:	f002 f930 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LD3_Pin
 80016d4:	2200      	movs	r2, #0
 80016d6:	f244 0187 	movw	r1, #16519	; 0x4087
 80016da:	484d      	ldr	r0, [pc, #308]	; (8001810 <MX_GPIO_Init+0x22c>)
 80016dc:	f002 f92a 	bl	8003934 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80016e6:	484b      	ldr	r0, [pc, #300]	; (8001814 <MX_GPIO_Init+0x230>)
 80016e8:	f002 f924 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2143      	movs	r1, #67	; 0x43
 80016f0:	4849      	ldr	r0, [pc, #292]	; (8001818 <MX_GPIO_Init+0x234>)
 80016f2:	f002 f91f 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 7160 	mov.w	r1, #896	; 0x380
 80016fc:	4847      	ldr	r0, [pc, #284]	; (800181c <MX_GPIO_Init+0x238>)
 80016fe:	f002 f919 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001708:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	483c      	ldr	r0, [pc, #240]	; (800180c <MX_GPIO_Init+0x228>)
 800171a:	f001 ff79 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800171e:	23fe      	movs	r3, #254	; 0xfe
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f001 ff6a 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800173c:	2330      	movs	r3, #48	; 0x30
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	482e      	ldr	r0, [pc, #184]	; (800180c <MX_GPIO_Init+0x228>)
 8001754:	f001 ff5c 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LD3_Pin
 8001758:	f244 0387 	movw	r3, #16519	; 0x4087
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	4827      	ldr	r0, [pc, #156]	; (8001810 <MX_GPIO_Init+0x22c>)
 8001772:	f001 ff4d 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001776:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	4821      	ldr	r0, [pc, #132]	; (8001814 <MX_GPIO_Init+0x230>)
 8001790:	f001 ff3e 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8001794:	2343      	movs	r3, #67	; 0x43
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	481b      	ldr	r0, [pc, #108]	; (8001818 <MX_GPIO_Init+0x234>)
 80017ac:	f001 ff30 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017b0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	4814      	ldr	r0, [pc, #80]	; (800181c <MX_GPIO_Init+0x238>)
 80017ca:	f001 ff21 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80017ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e0:	4619      	mov	r1, r3
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <MX_GPIO_Init+0x238>)
 80017e4:	f001 ff14 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017e8:	2320      	movs	r3, #32
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <MX_GPIO_Init+0x234>)
 80017fc:	f001 ff08 	bl	8003610 <HAL_GPIO_Init>

}
 8001800:	bf00      	nop
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	48000800 	.word	0x48000800
 8001810:	48000400 	.word	0x48000400
 8001814:	48001400 	.word	0x48001400
 8001818:	48001800 	.word	0x48001800
 800181c:	48001000 	.word	0x48001000

08001820 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	UNUSED(huart); //waring suppresion

	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //toggle LED for dev
	rx_received = 1;//set flag for use in while loop
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_UART_RxCpltCallback+0x2c>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //toggle LED for dev
 800182e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <HAL_UART_RxCpltCallback+0x30>)
 8001834:	f002 f896 	bl	8003964 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(&hlpuart1, rx_data, 35); //reset UART interupt for next transmission
 8001838:	2223      	movs	r2, #35	; 0x23
 800183a:	4906      	ldr	r1, [pc, #24]	; (8001854 <HAL_UART_RxCpltCallback+0x34>)
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <HAL_UART_RxCpltCallback+0x38>)
 800183e:	f005 f929 	bl	8006a94 <HAL_UART_Receive_IT>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000870 	.word	0x20000870
 8001850:	48000400 	.word	0x48000400
 8001854:	200008d8 	.word	0x200008d8
 8001858:	20000160 	.word	0x20000160
 800185c:	00000000 	.word	0x00000000

08001860 <binaryToDecimal>:


uint8_t binaryToDecimal(int start_index, int bitCount)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	//MSB is on the left so we start high and go low on the exp
	uint8_t result = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	73fb      	strb	r3, [r7, #15]
	for (int i = bitCount - 1; i >= 0; i--)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3b01      	subs	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	e02b      	b.n	80018ce <binaryToDecimal+0x6e>
	{
		if (rx_data[start_index + i] == 49)
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4413      	add	r3, r2
 800187c:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <binaryToDecimal+0x88>)
 800187e:	5cd3      	ldrb	r3, [r2, r3]
 8001880:	2b31      	cmp	r3, #49	; 0x31
 8001882:	d121      	bne.n	80018c8 <binaryToDecimal+0x68>
		{
			result += pow(2, 7 - i);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe5a 	bl	8000544 <__aeabi_i2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	ec43 2b11 	vmov	d1, r2, r3
 8001898:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80018e0 <binaryToDecimal+0x80>
 800189c:	f007 ffec 	bl	8009878 <pow>
 80018a0:	ec55 4b10 	vmov	r4, r5, d0
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe4c 	bl	8000544 <__aeabi_i2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7fe fcfa 	bl	80002ac <__adddf3>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f95a 	bl	8000b78 <__aeabi_d2uiz>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]
	for (int i = bitCount - 1; i >= 0; i--)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	dad0      	bge.n	8001876 <binaryToDecimal+0x16>
		}
	}
	return result;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bdb0      	pop	{r4, r5, r7, pc}
 80018de:	bf00      	nop
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40000000 	.word	0x40000000
 80018e8:	200008d8 	.word	0x200008d8

080018ec <MTR_DRV_INIT>:
	if ((combined & 0x8000) == 0) return combined; //negative if top bit is 1
	else return -(~combined + 1);
}

void MTR_DRV_INIT(uint8_t currentValue, uint8_t decay, uint8_t reset, uint8_t sleep)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4604      	mov	r4, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	4603      	mov	r3, r0
 8001900:	71bb      	strb	r3, [r7, #6]
 8001902:	460b      	mov	r3, r1
 8001904:	717b      	strb	r3, [r7, #5]
 8001906:	4613      	mov	r3, r2
 8001908:	713b      	strb	r3, [r7, #4]
    BI1 -> PF15
    BI0 -> PG0

  */
  //xI1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, (currentValue>>1) & ~0x01);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191c:	481c      	ldr	r0, [pc, #112]	; (8001990 <MTR_DRV_INIT+0xa4>)
 800191e:	f002 f809 	bl	8003934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, (currentValue>>1) & ~0x01);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001934:	4816      	ldr	r0, [pc, #88]	; (8001990 <MTR_DRV_INIT+0xa4>)
 8001936:	f001 fffd 	bl	8003934 <HAL_GPIO_WritePin>
  //xI0
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, (currentValue) & ~0x01);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001948:	4811      	ldr	r0, [pc, #68]	; (8001990 <MTR_DRV_INIT+0xa4>)
 800194a:	f001 fff3 	bl	8003934 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, (currentValue) & ~0x01);
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	2101      	movs	r1, #1
 800195a:	480e      	ldr	r0, [pc, #56]	; (8001994 <MTR_DRV_INIT+0xa8>)
 800195c:	f001 ffea 	bl	8003934 <HAL_GPIO_WritePin>

  //Decay
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, decay);
 8001960:	79bb      	ldrb	r3, [r7, #6]
 8001962:	461a      	mov	r2, r3
 8001964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <MTR_DRV_INIT+0xac>)
 800196a:	f001 ffe3 	bl	8003934 <HAL_GPIO_WritePin>

  //Reset
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, reset);
 800196e:	797b      	ldrb	r3, [r7, #5]
 8001970:	461a      	mov	r2, r3
 8001972:	2102      	movs	r1, #2
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <MTR_DRV_INIT+0xa8>)
 8001976:	f001 ffdd 	bl	8003934 <HAL_GPIO_WritePin>

  //Sleep
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, sleep);
 800197a:	793b      	ldrb	r3, [r7, #4]
 800197c:	461a      	mov	r2, r3
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <MTR_DRV_INIT+0xac>)
 8001982:	f001 ffd7 	bl	8003934 <HAL_GPIO_WritePin>


}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	bf00      	nop
 8001990:	48001400 	.word	0x48001400
 8001994:	48001800 	.word	0x48001800
 8001998:	48001000 	.word	0x48001000

0800199c <updateProps>:


void updateProps(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0


  //Convert coms thrust vals in percentages for f,b,l,r
  leftThrust = ((float)(-turnThrust + 128))/256.0; // 0% <-> 50%
 80019a0:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <updateProps+0xd8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b0:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001a78 <updateProps+0xdc>
 80019b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <updateProps+0xe0>)
 80019ba:	edc3 7a00 	vstr	s15, [r3]
  rightThrust = ((float)(turnThrust - 128))/256.0; // 0% <-> 50%
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <updateProps+0xd8>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	3b80      	subs	r3, #128	; 0x80
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019cc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001a78 <updateProps+0xdc>
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <updateProps+0xe4>)
 80019d6:	edc3 7a00 	vstr	s15, [r3]
  forThrust = ((float)(forwardThrust - 128))/256.0; // 0% <-> 50%
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <updateProps+0xe8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3b80      	subs	r3, #128	; 0x80
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001a78 <updateProps+0xdc>
 80019ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <updateProps+0xec>)
 80019f2:	edc3 7a00 	vstr	s15, [r3]
  backThrust = ((float)(-forwardThrust + 128))/256.0; // 0% <-> 50%
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <updateProps+0xe8>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a06:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001a78 <updateProps+0xdc>
 8001a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <updateProps+0xf0>)
 8001a10:	edc3 7a00 	vstr	s15, [r3]

  //mix individual thrust values into
  leftPropThrust = leftThrust - rightThrust + forThrust - backThrust; // -100% <-> 100%
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <updateProps+0xe0>)
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <updateProps+0xe4>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <updateProps+0xec>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <updateProps+0xf0>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <updateProps+0xf4>)
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
  rightPropThrust = rightThrust - leftThrust + forThrust - backThrust; // -100% <-> 100%
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <updateProps+0xe4>)
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <updateProps+0xe0>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <updateProps+0xec>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <updateProps+0xf0>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <updateProps+0xf8>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]
  {
    TIM4->CCR3 = -rightPropThrust*ARR;
    TIM4->CCR2 = 0;
  }
  */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000001 	.word	0x20000001
 8001a78:	43800000 	.word	0x43800000
 8001a7c:	20000900 	.word	0x20000900
 8001a80:	20000904 	.word	0x20000904
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000908 	.word	0x20000908
 8001a8c:	2000090c 	.word	0x2000090c
 8001a90:	20000910 	.word	0x20000910
 8001a94:	20000914 	.word	0x20000914

08001a98 <parseComs>:

void parseComs(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  //Coms parsing

  if (rx_data[0] == 48)
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <parseComs+0xa4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b30      	cmp	r3, #48	; 0x30
 8001aa2:	d103      	bne.n	8001aac <parseComs+0x14>
  {
  	depthUp = 0;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <parseComs+0xa8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e006      	b.n	8001aba <parseComs+0x22>
  }
  else if (rx_data[0] == 49)
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <parseComs+0xa4>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b31      	cmp	r3, #49	; 0x31
 8001ab2:	d102      	bne.n	8001aba <parseComs+0x22>
  {
  	depthUp = 1;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <parseComs+0xa8>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
  }

  if (rx_data[1] == 48)
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <parseComs+0xa4>)
 8001abc:	785b      	ldrb	r3, [r3, #1]
 8001abe:	2b30      	cmp	r3, #48	; 0x30
 8001ac0:	d103      	bne.n	8001aca <parseComs+0x32>
  {
  	depthDown = 0;
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <parseComs+0xac>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e006      	b.n	8001ad8 <parseComs+0x40>
  }
  else if (rx_data[1] == 49)
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <parseComs+0xa4>)
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	2b31      	cmp	r3, #49	; 0x31
 8001ad0:	d102      	bne.n	8001ad8 <parseComs+0x40>
  {
  	depthDown = 1;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <parseComs+0xac>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
  }

  if (rx_data[2] == 48)
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <parseComs+0xa4>)
 8001ada:	789b      	ldrb	r3, [r3, #2]
 8001adc:	2b30      	cmp	r3, #48	; 0x30
 8001ade:	d103      	bne.n	8001ae8 <parseComs+0x50>
  {
  	captureImage = 0;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <parseComs+0xb0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e006      	b.n	8001af6 <parseComs+0x5e>
  }
  else if (rx_data[2] == 49)
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <parseComs+0xa4>)
 8001aea:	789b      	ldrb	r3, [r3, #2]
 8001aec:	2b31      	cmp	r3, #49	; 0x31
 8001aee:	d102      	bne.n	8001af6 <parseComs+0x5e>
  {
  	captureImage = 1;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <parseComs+0xb0>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
  }

	forwardThrust = binaryToDecimal(3, 8);
 8001af6:	2108      	movs	r1, #8
 8001af8:	2003      	movs	r0, #3
 8001afa:	f7ff feb1 	bl	8001860 <binaryToDecimal>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <parseComs+0xb4>)
 8001b04:	701a      	strb	r2, [r3, #0]
	turnThrust = binaryToDecimal(11, 8);
 8001b06:	2108      	movs	r1, #8
 8001b08:	200b      	movs	r0, #11
 8001b0a:	f7ff fea9 	bl	8001860 <binaryToDecimal>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <parseComs+0xb8>)
 8001b14:	701a      	strb	r2, [r3, #0]
	camUpDown = binaryToDecimal(19, 8);
 8001b16:	2108      	movs	r1, #8
 8001b18:	2013      	movs	r0, #19
 8001b1a:	f7ff fea1 	bl	8001860 <binaryToDecimal>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <parseComs+0xbc>)
 8001b24:	701a      	strb	r2, [r3, #0]
	camLeftRight = binaryToDecimal(27, 8);
 8001b26:	2108      	movs	r1, #8
 8001b28:	201b      	movs	r0, #27
 8001b2a:	f7ff fe99 	bl	8001860 <binaryToDecimal>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <parseComs+0xc0>)
 8001b34:	701a      	strb	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200008d8 	.word	0x200008d8
 8001b40:	200008fb 	.word	0x200008fb
 8001b44:	200008fc 	.word	0x200008fc
 8001b48:	200008fd 	.word	0x200008fd
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000001 	.word	0x20000001
 8001b54:	20000002 	.word	0x20000002
 8001b58:	20000003 	.word	0x20000003

08001b5c <transmitData>:

void transmitData(void)
{
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af06      	add	r7, sp, #24
	//Data concat

	// For actual communication back to RPI (STILL USING TEST DATA)(This sprintf call works)
	sprintf(tx_buffer, "%u,%u,%u,%u,%u,%u,%u\n\r", degreesNorth, (uint16_t)(10*speedScalar), depthApprox, roll, pitch, yaw, (uint16_t)(10*voltageBattery));
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <transmitData+0x80>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	461d      	mov	r5, r3
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <transmitData+0x84>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7a:	ee17 3a90 	vmov	r3, s15
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461e      	mov	r6, r3
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <transmitData+0x88>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <transmitData+0x8c>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <transmitData+0x90>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <transmitData+0x94>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	461c      	mov	r4, r3
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <transmitData+0x98>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bac:	ee17 3a90 	vmov	r3, s15
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	9304      	str	r3, [sp, #16]
 8001bb4:	9403      	str	r4, [sp, #12]
 8001bb6:	9002      	str	r0, [sp, #8]
 8001bb8:	9101      	str	r1, [sp, #4]
 8001bba:	9200      	str	r2, [sp, #0]
 8001bbc:	4633      	mov	r3, r6
 8001bbe:	462a      	mov	r2, r5
 8001bc0:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <transmitData+0x9c>)
 8001bc2:	480e      	ldr	r0, [pc, #56]	; (8001bfc <transmitData+0xa0>)
 8001bc4:	f007 f9b4 	bl	8008f30 <siprintf>

  //sprintf(tx_buffer, "%u,%u,%u,%u,%u,%u\n\r", (uint8_t)leftThrust*100, (uint8_t)rightThrust*100, (uint8_t)forThrust*100, (uint8_t)backThrust*100, (uint8_t)leftPropThrust*100, (uint8_t)rightPropThrust*100);

	//sprintf(tx_buffer, "%u,%u,%u,%u,%u,%u,%u\n\r", depthUp, depthDown, captureImage, forwardThrust, turnThrust, camUpDown, camLeftRight);

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)tx_buffer, sizeof(tx_buffer), 10);
 8001bc8:	230a      	movs	r3, #10
 8001bca:	2264      	movs	r2, #100	; 0x64
 8001bcc:	490b      	ldr	r1, [pc, #44]	; (8001bfc <transmitData+0xa0>)
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <transmitData+0xa4>)
 8001bd0:	f004 fec8 	bl	8006964 <HAL_UART_Transmit>
}
 8001bd4:	bf00      	nop
 8001bd6:	3704      	adds	r7, #4
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bdc:	20000004 	.word	0x20000004
 8001be0:	20000008 	.word	0x20000008
 8001be4:	2000000c 	.word	0x2000000c
 8001be8:	2000000e 	.word	0x2000000e
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	20000012 	.word	0x20000012
 8001bf4:	20000014 	.word	0x20000014
 8001bf8:	0800a700 	.word	0x0800a700
 8001bfc:	20000874 	.word	0x20000874
 8001c00:	20000160 	.word	0x20000160

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_MspInit+0x44>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_MspInit+0x44>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6613      	str	r3, [r2, #96]	; 0x60
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_MspInit+0x44>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_MspInit+0x44>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_MspInit+0x44>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_MspInit+0x44>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0b0      	sub	sp, #192	; 0xc0
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	2294      	movs	r2, #148	; 0x94
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f007 f979 	bl	8008f70 <memset>
  if(hadc->Instance==ADC1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a35      	ldr	r2, [pc, #212]	; (8001d58 <HAL_ADC_MspInit+0x100>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d162      	bne.n	8001d4e <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001caa:	2302      	movs	r3, #2
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb4:	f107 0318 	add.w	r3, r7, #24
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 f897 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001cc4:	f7ff ff9e 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_ADC_MspInit+0x104>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d10:	230f      	movs	r3, #15
 8001d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d16:	230b      	movs	r3, #11
 8001d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d26:	4619      	mov	r1, r3
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <HAL_ADC_MspInit+0x108>)
 8001d2a:	f001 fc71 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d34:	230b      	movs	r3, #11
 8001d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f001 fc61 	bl	8003610 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	37c0      	adds	r7, #192	; 0xc0
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	50040000 	.word	0x50040000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000800 	.word	0x48000800

08001d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0ae      	sub	sp, #184	; 0xb8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	2294      	movs	r2, #148	; 0x94
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f007 f8f3 	bl	8008f70 <memset>
  if(hi2c->Instance==I2C1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <HAL_I2C_MspInit+0xb0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d13b      	bne.n	8001e0c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d94:	2340      	movs	r3, #64	; 0x40
 8001d96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 f823 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dac:	f7ff ff2a 	bl	8001c04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_I2C_MspInit+0xb4>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_I2C_MspInit+0xb4>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_I2C_MspInit+0xb4>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de2:	2304      	movs	r3, #4
 8001de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dec:	4619      	mov	r1, r3
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_I2C_MspInit+0xb8>)
 8001df0:	f001 fc0e 	bl	8003610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_I2C_MspInit+0xb4>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_I2C_MspInit+0xb4>)
 8001dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_I2C_MspInit+0xb4>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e0c:	bf00      	nop
 8001e0e:	37b8      	adds	r7, #184	; 0xb8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40005400 	.word	0x40005400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	48000400 	.word	0x48000400

08001e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0b0      	sub	sp, #192	; 0xc0
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	2294      	movs	r2, #148	; 0x94
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f007 f895 	bl	8008f70 <memset>
  if(huart->Instance==LPUART1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a47      	ldr	r2, [pc, #284]	; (8001f68 <HAL_UART_MspInit+0x148>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d146      	bne.n	8001ede <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e50:	2320      	movs	r3, #32
 8001e52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 ffc5 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e68:	f7ff fecc 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	4a3e      	ldr	r2, [pc, #248]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e78:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e84:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	4a38      	ldr	r2, [pc, #224]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001e9c:	f002 f8be 	bl	800401c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001ea0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ec0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	482a      	ldr	r0, [pc, #168]	; (8001f70 <HAL_UART_MspInit+0x150>)
 8001ec8:	f001 fba2 	bl	8003610 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2046      	movs	r0, #70	; 0x46
 8001ed2:	f001 faac 	bl	800342e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001ed6:	2046      	movs	r0, #70	; 0x46
 8001ed8:	f001 fac5 	bl	8003466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001edc:	e040      	b.n	8001f60 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <HAL_UART_MspInit+0x154>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d13b      	bne.n	8001f60 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 ff79 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001f00:	f7ff fe80 	bl	8001c04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a18      	ldr	r2, [pc, #96]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_UART_MspInit+0x14c>)
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4807      	ldr	r0, [pc, #28]	; (8001f78 <HAL_UART_MspInit+0x158>)
 8001f5c:	f001 fb58 	bl	8003610 <HAL_GPIO_Init>
}
 8001f60:	bf00      	nop
 8001f62:	37c0      	adds	r7, #192	; 0xc0
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40008000 	.word	0x40008000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	48001800 	.word	0x48001800
 8001f74:	40004800 	.word	0x40004800
 8001f78:	48000c00 	.word	0x48000c00

08001f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <HAL_TIM_Base_MspInit+0x80>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fa6:	e022      	b.n	8001fee <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a15      	ldr	r2, [pc, #84]	; (8002004 <HAL_TIM_Base_MspInit+0x88>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10c      	bne.n	8001fcc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
}
 8001fca:	e010      	b.n	8001fee <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_TIM_Base_MspInit+0x8c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10b      	bne.n	8001fee <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40021000 	.word	0x40021000
 8002004:	40000800 	.word	0x40000800
 8002008:	40000c00 	.word	0x40000c00

0800200c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a34      	ldr	r2, [pc, #208]	; (80020fc <HAL_TIM_MspPostInit+0xf0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d11c      	bne.n	8002068 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	4a33      	ldr	r2, [pc, #204]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PE4     ------> TIM3_CH2
    PE5     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002046:	2330      	movs	r3, #48	; 0x30
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002056:	2302      	movs	r3, #2
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4828      	ldr	r0, [pc, #160]	; (8002104 <HAL_TIM_MspPostInit+0xf8>)
 8002062:	f001 fad5 	bl	8003610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002066:	e044      	b.n	80020f2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <HAL_TIM_MspPostInit+0xfc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d11d      	bne.n	80020ae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800208a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800209c:	2302      	movs	r3, #2
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <HAL_TIM_MspPostInit+0x100>)
 80020a8:	f001 fab2 	bl	8003610 <HAL_GPIO_Init>
}
 80020ac:	e021      	b.n	80020f2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM5)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_TIM_MspPostInit+0x104>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d11c      	bne.n	80020f2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020bc:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 80020be:	f043 0320 	orr.w	r3, r3, #32
 80020c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_TIM_MspPostInit+0xf4>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80020d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020e2:	2302      	movs	r3, #2
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4809      	ldr	r0, [pc, #36]	; (8002114 <HAL_TIM_MspPostInit+0x108>)
 80020ee:	f001 fa8f 	bl	8003610 <HAL_GPIO_Init>
}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40000400 	.word	0x40000400
 8002100:	40021000 	.word	0x40021000
 8002104:	48001000 	.word	0x48001000
 8002108:	40000800 	.word	0x40000800
 800210c:	48000c00 	.word	0x48000c00
 8002110:	40000c00 	.word	0x40000c00
 8002114:	48001400 	.word	0x48001400

08002118 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0b0      	sub	sp, #192	; 0xc0
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002130:	f107 0318 	add.w	r3, r7, #24
 8002134:	2294      	movs	r2, #148	; 0x94
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f006 ff19 	bl	8008f70 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002146:	d16c      	bne.n	8002222 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fe47 	bl	8004dec <HAL_RCCEx_PeriphCLKConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002164:	f7ff fd4e 	bl	8001c04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_PCD_MspInit+0x114>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	4a2f      	ldr	r2, [pc, #188]	; (800222c <HAL_PCD_MspInit+0x114>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_PCD_MspInit+0x114>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002180:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002194:	2303      	movs	r3, #3
 8002196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800219a:	230a      	movs	r3, #10
 800219c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021a4:	4619      	mov	r1, r3
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021aa:	f001 fa31 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f001 fa20 	bl	8003610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_PCD_MspInit+0x114>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	4a15      	ldr	r2, [pc, #84]	; (800222c <HAL_PCD_MspInit+0x114>)
 80021d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_PCD_MspInit+0x114>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_PCD_MspInit+0x114>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d114      	bne.n	800221e <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_PCD_MspInit+0x114>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	4a0c      	ldr	r2, [pc, #48]	; (800222c <HAL_PCD_MspInit+0x114>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_PCD_MspInit+0x114>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800220c:	f001 fef6 	bl	8003ffc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_PCD_MspInit+0x114>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a05      	ldr	r2, [pc, #20]	; (800222c <HAL_PCD_MspInit+0x114>)
 8002216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800221c:	e001      	b.n	8002222 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800221e:	f001 feed 	bl	8003ffc <HAL_PWREx_EnableVddUSB>
}
 8002222:	bf00      	nop
 8002224:	37c0      	adds	r7, #192	; 0xc0
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler+0x4>

08002236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <MemManage_Handler+0x4>

08002242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <UsageFault_Handler+0x4>

0800224e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227c:	f000 f8d2 	bl	8002424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <LPUART1_IRQHandler+0x10>)
 800228a:	f004 fc59 	bl	8006b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000160 	.word	0x20000160

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f006 fe5a 	bl	8008f80 <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200a0000 	.word	0x200a0000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	20000918 	.word	0x20000918
 8002300:	20000a68 	.word	0x20000a68

08002304 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <SystemInit+0x20>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <SystemInit+0x20>)
 8002310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002360 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800232c:	f7ff ffea 	bl	8002304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002330:	480c      	ldr	r0, [pc, #48]	; (8002364 <LoopForever+0x6>)
  ldr r1, =_edata
 8002332:	490d      	ldr	r1, [pc, #52]	; (8002368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <LoopForever+0xe>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002338:	e002      	b.n	8002340 <LoopCopyDataInit>

0800233a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800233c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233e:	3304      	adds	r3, #4

08002340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002344:	d3f9      	bcc.n	800233a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002348:	4c0a      	ldr	r4, [pc, #40]	; (8002374 <LoopForever+0x16>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800234c:	e001      	b.n	8002352 <LoopFillZerobss>

0800234e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002350:	3204      	adds	r2, #4

08002352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002354:	d3fb      	bcc.n	800234e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002356:	f006 fe19 	bl	8008f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800235a:	f7fe fdab 	bl	8000eb4 <main>

0800235e <LoopForever>:

LoopForever:
    b LoopForever
 800235e:	e7fe      	b.n	800235e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002360:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800236c:	0800a800 	.word	0x0800a800
  ldr r2, =_sbss
 8002370:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002374:	20000a68 	.word	0x20000a68

08002378 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC1_IRQHandler>

0800237a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002384:	2003      	movs	r0, #3
 8002386:	f001 f847 	bl	8003418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238a:	2000      	movs	r0, #0
 800238c:	f000 f80e 	bl	80023ac <HAL_InitTick>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	e001      	b.n	80023a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800239c:	f7ff fc38 	bl	8001c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023a0:	79fb      	ldrb	r3, [r7, #7]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_InitTick+0x6c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d023      	beq.n	8002408 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_InitTick+0x70>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_InitTick+0x6c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 f853 	bl	8003482 <HAL_SYSTICK_Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10f      	bne.n	8002402 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d809      	bhi.n	80023fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f001 f81d 	bl	800342e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <HAL_InitTick+0x74>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e007      	b.n	800240c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e004      	b.n	800240c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e001      	b.n	800240c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000020 	.word	0x20000020
 800241c:	20000018 	.word	0x20000018
 8002420:	2000001c 	.word	0x2000001c

08002424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x20>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x24>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_IncTick+0x24>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000020 	.word	0x20000020
 8002448:	2000091c 	.word	0x2000091c

0800244c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return uwTick;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_GetTick+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	2000091c 	.word	0x2000091c

08002464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff ffee 	bl	800244c <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d005      	beq.n	800248a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_Delay+0x44>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800248a:	bf00      	nop
 800248c:	f7ff ffde 	bl	800244c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d8f7      	bhi.n	800248c <HAL_Delay+0x28>
  {
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000020 	.word	0x20000020

080024ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3360      	adds	r3, #96	; 0x60
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <LL_ADC_SetOffset+0x44>)
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	4313      	orrs	r3, r2
 8002544:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	03fff000 	.word	0x03fff000

0800255c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3360      	adds	r3, #96	; 0x60
 800256a:	461a      	mov	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3360      	adds	r3, #96	; 0x60
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	615a      	str	r2, [r3, #20]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3330      	adds	r3, #48	; 0x30
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	4413      	add	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	211f      	movs	r1, #31
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	401a      	ands	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0e9b      	lsrs	r3, r3, #26
 800261c:	f003 011f 	and.w	r1, r3, #31
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	431a      	orrs	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3314      	adds	r3, #20
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	0e5b      	lsrs	r3, r3, #25
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	0d1b      	lsrs	r3, r3, #20
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2107      	movs	r1, #7
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	0d1b      	lsrs	r3, r3, #20
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	431a      	orrs	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	43db      	mvns	r3, r3
 80026ae:	401a      	ands	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0318 	and.w	r3, r3, #24
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026b8:	40d9      	lsrs	r1, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	400b      	ands	r3, r1
 80026be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c2:	431a      	orrs	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	0007ffff 	.word	0x0007ffff

080026dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6093      	str	r3, [r2, #8]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d101      	bne.n	800271a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002764:	d101      	bne.n	800276a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <LL_ADC_IsEnabled+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_ADC_IsEnabled+0x1a>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d101      	bne.n	80027b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d101      	bne.n	80027dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e12f      	b.n	8002a66 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fa1f 	bl	8001c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff67 	bl	8002700 <LL_ADC_IsDeepPowerDownEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff4d 	bl	80026dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff82 	bl	8002750 <LL_ADC_IsInternalRegulatorEnabled>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff66 	bl	8002728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800285c:	4b84      	ldr	r3, [pc, #528]	; (8002a70 <HAL_ADC_Init+0x284>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	4a84      	ldr	r2, [pc, #528]	; (8002a74 <HAL_ADC_Init+0x288>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002870:	e002      	b.n	8002878 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3b01      	subs	r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff64 	bl	8002750 <LL_ADC_IsInternalRegulatorEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff75 	bl	800279e <LL_ADC_REG_IsConversionOngoing>
 80028b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 80c8 	bne.w	8002a54 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 80c4 	bne.w	8002a54 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff49 	bl	8002778 <LL_ADC_IsEnabled>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ec:	4862      	ldr	r0, [pc, #392]	; (8002a78 <HAL_ADC_Init+0x28c>)
 80028ee:	f7ff ff43 	bl	8002778 <LL_ADC_IsEnabled>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4619      	mov	r1, r3
 80028fe:	485f      	ldr	r0, [pc, #380]	; (8002a7c <HAL_ADC_Init+0x290>)
 8002900:	f7ff fdd4 	bl	80024ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7e5b      	ldrb	r3, [r3, #25]
 8002908:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800290e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002914:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800291a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002922:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d106      	bne.n	8002940 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	3b01      	subs	r3, #1
 8002938:	045b      	lsls	r3, r3, #17
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_ADC_Init+0x294>)
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	430b      	orrs	r3, r1
 800296e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff12 	bl	800279e <LL_ADC_REG_IsConversionOngoing>
 800297a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff1f 	bl	80027c4 <LL_ADC_INJ_IsConversionOngoing>
 8002986:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d140      	bne.n	8002a10 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d13d      	bne.n	8002a10 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e1b      	ldrb	r3, [r3, #24]
 800299c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800299e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029a6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b6:	f023 0306 	bic.w	r3, r3, #6
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d118      	bne.n	8002a00 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029e4:	4311      	orrs	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029f0:	430a      	orrs	r2, r1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	611a      	str	r2, [r3, #16]
 80029fe:	e007      	b.n	8002a10 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d10c      	bne.n	8002a32 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f023 010f 	bic.w	r1, r3, #15
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	1e5a      	subs	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a30:	e007      	b.n	8002a42 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 020f 	bic.w	r2, r2, #15
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	659a      	str	r2, [r3, #88]	; 0x58
 8002a52:	e007      	b.n	8002a64 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f043 0210 	orr.w	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000018 	.word	0x20000018
 8002a74:	053e2d63 	.word	0x053e2d63
 8002a78:	50040000 	.word	0x50040000
 8002a7c:	50040300 	.word	0x50040300
 8002a80:	fff0c007 	.word	0xfff0c007

08002a84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0b6      	sub	sp, #216	; 0xd8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x22>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e3d3      	b.n	800324e <HAL_ADC_ConfigChannel+0x7ca>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe73 	bl	800279e <LL_ADC_REG_IsConversionOngoing>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 83b8 	bne.w	8003230 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d824      	bhi.n	8002b12 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	3b02      	subs	r3, #2
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d81b      	bhi.n	8002b0a <HAL_ADC_ConfigChannel+0x86>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <HAL_ADC_ConfigChannel+0x54>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002af1 	.word	0x08002af1
 8002ae0:	08002af9 	.word	0x08002af9
 8002ae4:	08002b01 	.word	0x08002b01
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	220c      	movs	r2, #12
 8002aec:	605a      	str	r2, [r3, #4]
          break;
 8002aee:	e010      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2212      	movs	r2, #18
 8002af4:	605a      	str	r2, [r3, #4]
          break;
 8002af6:	e00c      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2218      	movs	r2, #24
 8002afc:	605a      	str	r2, [r3, #4]
          break;
 8002afe:	e008      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b06:	605a      	str	r2, [r3, #4]
          break;
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2206      	movs	r2, #6
 8002b0e:	605a      	str	r2, [r3, #4]
          break;
 8002b10:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f7ff fd60 	bl	80025e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fe38 	bl	800279e <LL_ADC_REG_IsConversionOngoing>
 8002b2e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fe44 	bl	80027c4 <LL_ADC_INJ_IsConversionOngoing>
 8002b3c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f040 81c1 	bne.w	8002ecc <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 81bc 	bne.w	8002ecc <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b5c:	d10f      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f7ff fd67 	bl	800263c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fd21 	bl	80025be <LL_ADC_SetSamplingTimeCommonConfig>
 8002b7c:	e00e      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f7ff fd56 	bl	800263c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fd11 	bl	80025be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	08db      	lsrs	r3, r3, #3
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bce:	f7ff fca1 	bl	8002514 <LL_ADC_SetOffset>
 8002bd2:	e17b      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fcbe 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x17c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fcb3 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	f003 021f 	and.w	r2, r3, #31
 8002bfe:	e01e      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x1ba>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fca8 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e004      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 8002c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x1d2>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	e018      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x204>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e004      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8002c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d106      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fc77 	bl	8002588 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fc5b 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x242>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fc50 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	f003 021f 	and.w	r2, r3, #31
 8002cc4:	e01e      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x280>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fc45 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ce4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8002cf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x298>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	e018      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x2ca>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e004      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 8002d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fc14 	bl	8002588 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2102      	movs	r1, #2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fbf8 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x308>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fbed 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	f003 021f 	and.w	r2, r3, #31
 8002d8a:	e01e      	b.n	8002dca <HAL_ADC_ConfigChannel+0x346>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fbe2 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e004      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8002dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x35e>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	e016      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x38c>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002df4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8002e02:	2320      	movs	r3, #32
 8002e04:	e004      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 8002e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fbb3 	bl	8002588 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2103      	movs	r1, #3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fb97 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x3ca>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fb8c 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	e017      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x3fa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2103      	movs	r1, #3
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fb81 	bl	800255c <LL_ADC_GetOffsetChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e68:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8002e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x412>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	e011      	b.n	8002eba <HAL_ADC_ConfigChannel+0x436>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e003      	b.n	8002eba <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d106      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2103      	movs	r1, #3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fb5e 	bl	8002588 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fc51 	bl	8002778 <LL_ADC_IsEnabled>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 813f 	bne.w	800315c <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6819      	ldr	r1, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7ff fbd2 	bl	8002694 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a8e      	ldr	r2, [pc, #568]	; (8003130 <HAL_ADC_ConfigChannel+0x6ac>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	f040 8130 	bne.w	800315c <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x4a0>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0e9b      	lsrs	r3, r3, #26
 8002f12:	3301      	adds	r3, #1
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e019      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x4d4>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f34:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8002f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2b09      	cmp	r3, #9
 8002f50:	bf94      	ite	ls
 8002f52:	2301      	movls	r3, #1
 8002f54:	2300      	movhi	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d079      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x4f4>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	3301      	adds	r3, #1
 8002f70:	069b      	lsls	r3, r3, #26
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f76:	e015      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x520>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f88:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8002f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	069b      	lsls	r3, r3, #26
 8002fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x540>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	e017      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x570>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e003      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8002fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	ea42 0103 	orr.w	r1, r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_ADC_ConfigChannel+0x596>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	051b      	lsls	r3, r3, #20
 8003018:	e018      	b.n	800304c <HAL_ADC_ConfigChannel+0x5c8>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800302c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003032:	2320      	movs	r3, #32
 8003034:	e003      	b.n	800303e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304c:	430b      	orrs	r3, r1
 800304e:	e080      	b.n	8003152 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_ADC_ConfigChannel+0x5e8>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	3301      	adds	r3, #1
 8003064:	069b      	lsls	r3, r3, #26
 8003066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800306a:	e015      	b.n	8003098 <HAL_ADC_ConfigChannel+0x614>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x634>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	3301      	adds	r3, #1
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2101      	movs	r1, #1
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	e017      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x664>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	61fb      	str	r3, [r7, #28]
  return result;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 80030d0:	2320      	movs	r3, #32
 80030d2:	e003      	b.n	80030dc <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	ea42 0103 	orr.w	r1, r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x690>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	3b1e      	subs	r3, #30
 800310c:	051b      	lsls	r3, r3, #20
 800310e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003112:	e01d      	b.n	8003150 <HAL_ADC_ConfigChannel+0x6cc>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	613b      	str	r3, [r7, #16]
  return result;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e005      	b.n	800313c <HAL_ADC_ConfigChannel+0x6b8>
 8003130:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	3301      	adds	r3, #1
 800313e:	f003 021f 	and.w	r2, r3, #31
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	3b1e      	subs	r3, #30
 800314a:	051b      	lsls	r3, r3, #20
 800314c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003150:	430b      	orrs	r3, r1
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	6892      	ldr	r2, [r2, #8]
 8003156:	4619      	mov	r1, r3
 8003158:	f7ff fa70 	bl	800263c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <HAL_ADC_ConfigChannel+0x7d4>)
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d06c      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003168:	483c      	ldr	r0, [pc, #240]	; (800325c <HAL_ADC_ConfigChannel+0x7d8>)
 800316a:	f7ff f9c5 	bl	80024f8 <LL_ADC_GetCommonPathInternalCh>
 800316e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a3a      	ldr	r2, [pc, #232]	; (8003260 <HAL_ADC_ConfigChannel+0x7dc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d127      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800317c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d121      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a35      	ldr	r2, [pc, #212]	; (8003264 <HAL_ADC_ConfigChannel+0x7e0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d157      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003196:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800319a:	4619      	mov	r1, r3
 800319c:	482f      	ldr	r0, [pc, #188]	; (800325c <HAL_ADC_ConfigChannel+0x7d8>)
 800319e:	f7ff f998 	bl	80024d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031a2:	4b31      	ldr	r3, [pc, #196]	; (8003268 <HAL_ADC_ConfigChannel+0x7e4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	4a30      	ldr	r2, [pc, #192]	; (800326c <HAL_ADC_ConfigChannel+0x7e8>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031bc:	e002      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f9      	bne.n	80031be <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ca:	e03a      	b.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a27      	ldr	r2, [pc, #156]	; (8003270 <HAL_ADC_ConfigChannel+0x7ec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d113      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x77a>
 80031d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10d      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <HAL_ADC_ConfigChannel+0x7e0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d12a      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f4:	4619      	mov	r1, r3
 80031f6:	4819      	ldr	r0, [pc, #100]	; (800325c <HAL_ADC_ConfigChannel+0x7d8>)
 80031f8:	f7ff f96b 	bl	80024d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031fc:	e021      	b.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_ADC_ConfigChannel+0x7f0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d11c      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800320c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d116      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <HAL_ADC_ConfigChannel+0x7e0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d111      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800321e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003226:	4619      	mov	r1, r3
 8003228:	480c      	ldr	r0, [pc, #48]	; (800325c <HAL_ADC_ConfigChannel+0x7d8>)
 800322a:	f7ff f952 	bl	80024d2 <LL_ADC_SetCommonPathInternalCh>
 800322e:	e008      	b.n	8003242 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800324a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800324e:	4618      	mov	r0, r3
 8003250:	37d8      	adds	r7, #216	; 0xd8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	80080000 	.word	0x80080000
 800325c:	50040300 	.word	0x50040300
 8003260:	c7520000 	.word	0xc7520000
 8003264:	50040000 	.word	0x50040000
 8003268:	20000018 	.word	0x20000018
 800326c:	053e2d63 	.word	0x053e2d63
 8003270:	cb840000 	.word	0xcb840000
 8003274:	80000001 	.word	0x80000001

08003278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003294:	4013      	ands	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032aa:	4a04      	ldr	r2, [pc, #16]	; (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	60d3      	str	r3, [r2, #12]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <__NVIC_GetPriorityGrouping+0x18>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 0307 	and.w	r3, r3, #7
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db0b      	blt.n	8003306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	f003 021f 	and.w	r2, r3, #31
 80032f4:	4907      	ldr	r1, [pc, #28]	; (8003314 <__NVIC_EnableIRQ+0x38>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2001      	movs	r0, #1
 80032fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000e100 	.word	0xe000e100

08003318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db0a      	blt.n	8003342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <__NVIC_SetPriority+0x4c>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	440b      	add	r3, r1
 800333c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003340:	e00a      	b.n	8003358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <__NVIC_SetPriority+0x50>)
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3b04      	subs	r3, #4
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	440b      	add	r3, r1
 8003356:	761a      	strb	r2, [r3, #24]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000e100 	.word	0xe000e100
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f1c3 0307 	rsb	r3, r3, #7
 8003386:	2b04      	cmp	r3, #4
 8003388:	bf28      	it	cs
 800338a:	2304      	movcs	r3, #4
 800338c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3304      	adds	r3, #4
 8003392:	2b06      	cmp	r3, #6
 8003394:	d902      	bls.n	800339c <NVIC_EncodePriority+0x30>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3b03      	subs	r3, #3
 800339a:	e000      	b.n	800339e <NVIC_EncodePriority+0x32>
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	401a      	ands	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	43d9      	mvns	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	4313      	orrs	r3, r2
         );
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033e4:	d301      	bcc.n	80033ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00f      	b.n	800340a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <SysTick_Config+0x40>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033f2:	210f      	movs	r1, #15
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	f7ff ff8e 	bl	8003318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <SysTick_Config+0x40>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <SysTick_Config+0x40>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	e000e010 	.word	0xe000e010

08003418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff29 	bl	8003278 <__NVIC_SetPriorityGrouping>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003440:	f7ff ff3e 	bl	80032c0 <__NVIC_GetPriorityGrouping>
 8003444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f7ff ff8e 	bl	800336c <NVIC_EncodePriority>
 8003450:	4602      	mov	r2, r0
 8003452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff5d 	bl	8003318 <__NVIC_SetPriority>
}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff31 	bl	80032dc <__NVIC_EnableIRQ>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ffa2 	bl	80033d4 <SysTick_Config>
 8003490:	4603      	mov	r3, r0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d008      	beq.n	80034c4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2204      	movs	r2, #4
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e040      	b.n	8003546 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020e 	bic.w	r2, r2, #14
 80034d2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f003 021c 	and.w	r2, r3, #28
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f202 	lsl.w	r2, r1, r2
 8003506:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003510:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003528:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003532:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d005      	beq.n	8003576 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e047      	b.n	8003606 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 020e 	bic.w	r2, r2, #14
 8003584:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f003 021c 	and.w	r2, r3, #28
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2101      	movs	r1, #1
 80035b4:	fa01 f202 	lsl.w	r2, r1, r2
 80035b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035c2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00c      	beq.n	80035e6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035e4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
    }
  }
  return status;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800361e:	e166      	b.n	80038ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8158 	beq.w	80038e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d005      	beq.n	8003650 <HAL_GPIO_Init+0x40>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d130      	bne.n	80036b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2203      	movs	r2, #3
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003686:	2201      	movs	r2, #1
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 0201 	and.w	r2, r3, #1
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d017      	beq.n	80036ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d123      	bne.n	8003742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	08da      	lsrs	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3208      	adds	r2, #8
 8003702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	220f      	movs	r2, #15
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	08da      	lsrs	r2, r3, #3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3208      	adds	r2, #8
 800373c:	6939      	ldr	r1, [r7, #16]
 800373e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2203      	movs	r2, #3
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4013      	ands	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0203 	and.w	r2, r3, #3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80b2 	beq.w	80038e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003784:	4b61      	ldr	r3, [pc, #388]	; (800390c <HAL_GPIO_Init+0x2fc>)
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	4a60      	ldr	r2, [pc, #384]	; (800390c <HAL_GPIO_Init+0x2fc>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6613      	str	r3, [r2, #96]	; 0x60
 8003790:	4b5e      	ldr	r3, [pc, #376]	; (800390c <HAL_GPIO_Init+0x2fc>)
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800379c:	4a5c      	ldr	r2, [pc, #368]	; (8003910 <HAL_GPIO_Init+0x300>)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	3302      	adds	r3, #2
 80037a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	220f      	movs	r2, #15
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037c6:	d02b      	beq.n	8003820 <HAL_GPIO_Init+0x210>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a52      	ldr	r2, [pc, #328]	; (8003914 <HAL_GPIO_Init+0x304>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d025      	beq.n	800381c <HAL_GPIO_Init+0x20c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a51      	ldr	r2, [pc, #324]	; (8003918 <HAL_GPIO_Init+0x308>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01f      	beq.n	8003818 <HAL_GPIO_Init+0x208>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a50      	ldr	r2, [pc, #320]	; (800391c <HAL_GPIO_Init+0x30c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d019      	beq.n	8003814 <HAL_GPIO_Init+0x204>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a4f      	ldr	r2, [pc, #316]	; (8003920 <HAL_GPIO_Init+0x310>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <HAL_GPIO_Init+0x200>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a4e      	ldr	r2, [pc, #312]	; (8003924 <HAL_GPIO_Init+0x314>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00d      	beq.n	800380c <HAL_GPIO_Init+0x1fc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <HAL_GPIO_Init+0x318>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <HAL_GPIO_Init+0x1f8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a4c      	ldr	r2, [pc, #304]	; (800392c <HAL_GPIO_Init+0x31c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_GPIO_Init+0x1f4>
 8003800:	2307      	movs	r3, #7
 8003802:	e00e      	b.n	8003822 <HAL_GPIO_Init+0x212>
 8003804:	2308      	movs	r3, #8
 8003806:	e00c      	b.n	8003822 <HAL_GPIO_Init+0x212>
 8003808:	2306      	movs	r3, #6
 800380a:	e00a      	b.n	8003822 <HAL_GPIO_Init+0x212>
 800380c:	2305      	movs	r3, #5
 800380e:	e008      	b.n	8003822 <HAL_GPIO_Init+0x212>
 8003810:	2304      	movs	r3, #4
 8003812:	e006      	b.n	8003822 <HAL_GPIO_Init+0x212>
 8003814:	2303      	movs	r3, #3
 8003816:	e004      	b.n	8003822 <HAL_GPIO_Init+0x212>
 8003818:	2302      	movs	r3, #2
 800381a:	e002      	b.n	8003822 <HAL_GPIO_Init+0x212>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_GPIO_Init+0x212>
 8003820:	2300      	movs	r3, #0
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	f002 0203 	and.w	r2, r2, #3
 8003828:	0092      	lsls	r2, r2, #2
 800382a:	4093      	lsls	r3, r2
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003832:	4937      	ldr	r1, [pc, #220]	; (8003910 <HAL_GPIO_Init+0x300>)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	3302      	adds	r3, #2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_GPIO_Init+0x320>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003864:	4a32      	ldr	r2, [pc, #200]	; (8003930 <HAL_GPIO_Init+0x320>)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_GPIO_Init+0x320>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800388e:	4a28      	ldr	r2, [pc, #160]	; (8003930 <HAL_GPIO_Init+0x320>)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <HAL_GPIO_Init+0x320>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	43db      	mvns	r3, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <HAL_GPIO_Init+0x320>)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <HAL_GPIO_Init+0x320>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038e2:	4a13      	ldr	r2, [pc, #76]	; (8003930 <HAL_GPIO_Init+0x320>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3301      	adds	r3, #1
 80038ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f47f ae91 	bne.w	8003620 <HAL_GPIO_Init+0x10>
  }
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40021000 	.word	0x40021000
 8003910:	40010000 	.word	0x40010000
 8003914:	48000400 	.word	0x48000400
 8003918:	48000800 	.word	0x48000800
 800391c:	48000c00 	.word	0x48000c00
 8003920:	48001000 	.word	0x48001000
 8003924:	48001400 	.word	0x48001400
 8003928:	48001800 	.word	0x48001800
 800392c:	48001c00 	.word	0x48001c00
 8003930:	40010400 	.word	0x40010400

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003950:	e002      	b.n	8003958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	041a      	lsls	r2, r3, #16
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	43d9      	mvns	r1, r3
 8003982:	887b      	ldrh	r3, [r7, #2]
 8003984:	400b      	ands	r3, r1
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e081      	b.n	8003aae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe f9d0 	bl	8001d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	e006      	b.n	8003a20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d104      	bne.n	8003a32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d138      	bne.n	8003b3e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e032      	b.n	8003b40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2224      	movs	r2, #36	; 0x24
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b08:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
  }
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d139      	bne.n	8003bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e033      	b.n	8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be6:	b08f      	sub	sp, #60	; 0x3c
 8003be8:	af0a      	add	r7, sp, #40	; 0x28
 8003bea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e116      	b.n	8003e24 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fe fa81 	bl	8002118 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2203      	movs	r2, #3
 8003c1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fef1 	bl	8008a1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	687e      	ldr	r6, [r7, #4]
 8003c42:	466d      	mov	r5, sp
 8003c44:	f106 0410 	add.w	r4, r6, #16
 8003c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c58:	1d33      	adds	r3, r6, #4
 8003c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5c:	6838      	ldr	r0, [r7, #0]
 8003c5e:	f004 feb1 	bl	80089c4 <USB_CoreInit>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0d7      	b.n	8003e24 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f004 fedf 	bl	8008a3e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e04a      	b.n	8003d1c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	333d      	adds	r3, #61	; 0x3d
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c9a:	7bfa      	ldrb	r2, [r7, #15]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	333c      	adds	r3, #60	; 0x3c
 8003caa:	7bfa      	ldrb	r2, [r7, #15]
 8003cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	b298      	uxth	r0, r3
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3344      	adds	r3, #68	; 0x44
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cc6:	7bfa      	ldrb	r2, [r7, #15]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3340      	adds	r3, #64	; 0x40
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3348      	adds	r3, #72	; 0x48
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	334c      	adds	r3, #76	; 0x4c
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d02:	7bfa      	ldrb	r2, [r7, #15]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3354      	adds	r3, #84	; 0x54
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3af      	bcc.n	8003c86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	73fb      	strb	r3, [r7, #15]
 8003d2a:	e044      	b.n	8003db6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d6e:	7bfa      	ldrb	r2, [r7, #15]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d9a:	7bfa      	ldrb	r2, [r7, #15]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	3301      	adds	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d3b5      	bcc.n	8003d2c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	687e      	ldr	r6, [r7, #4]
 8003dc8:	466d      	mov	r5, sp
 8003dca:	f106 0410 	add.w	r4, r6, #16
 8003dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dda:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dde:	1d33      	adds	r3, r6, #4
 8003de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	f004 fe78 	bl	8008ad8 <USB_DevInit>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e014      	b.n	8003e24 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d102      	bne.n	8003e18 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f80a 	bl	8003e2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f005 f824 	bl	8008e6a <USB_DevDisconnect>

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	f043 0303 	orr.w	r3, r3, #3
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d102      	bne.n	8003e8c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8a:	e00b      	b.n	8003ea4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea0:	e000      	b.n	8003ea4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003ea2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40007000 	.word	0x40007000

08003eb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d141      	bne.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ec2:	4b4b      	ldr	r3, [pc, #300]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	d131      	bne.n	8003f34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ed0:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4a46      	ldr	r2, [pc, #280]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ee0:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ee8:	4a41      	ldr	r2, [pc, #260]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ef0:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2232      	movs	r2, #50	; 0x32
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	4a3f      	ldr	r2, [pc, #252]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	0c9b      	lsrs	r3, r3, #18
 8003f02:	3301      	adds	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f06:	e002      	b.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f0e:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d102      	bne.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f2      	bne.n	8003f08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2e:	d158      	bne.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e057      	b.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f34:	4b2e      	ldr	r3, [pc, #184]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f44:	e04d      	b.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4c:	d141      	bne.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f4e:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5a:	d131      	bne.n	8003fc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f5c:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f62:	4a23      	ldr	r2, [pc, #140]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f6c:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f74:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2232      	movs	r2, #50	; 0x32
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	0c9b      	lsrs	r3, r3, #18
 8003f8e:	3301      	adds	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f92:	e002      	b.n	8003f9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa6:	d102      	bne.n	8003fae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f2      	bne.n	8003f94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d112      	bne.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e011      	b.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fd0:	e007      	b.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fda:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fe0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	20000018 	.word	0x20000018
 8003ff8:	431bde83 	.word	0x431bde83

08003ffc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800400a:	6053      	str	r3, [r2, #4]
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40007000 	.word	0x40007000

0800401c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800402a:	6053      	str	r3, [r2, #4]
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40007000 	.word	0x40007000

0800403c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f000 bc08 	b.w	8004860 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004050:	4b96      	ldr	r3, [pc, #600]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800405a:	4b94      	ldr	r3, [pc, #592]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80e4 	beq.w	800423a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_RCC_OscConfig+0x4c>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	f040 808b 	bne.w	8004196 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b01      	cmp	r3, #1
 8004084:	f040 8087 	bne.w	8004196 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004088:	4b88      	ldr	r3, [pc, #544]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_OscConfig+0x64>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e3df      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	4b81      	ldr	r3, [pc, #516]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <HAL_RCC_OscConfig+0x7e>
 80040b0:	4b7e      	ldr	r3, [pc, #504]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	e005      	b.n	80040c6 <HAL_RCC_OscConfig+0x8a>
 80040ba:	4b7c      	ldr	r3, [pc, #496]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80040bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d223      	bcs.n	8004112 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fdcc 	bl	8004c6c <RCC_SetFlashLatencyFromMSIRange>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e3c0      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040de:	4b73      	ldr	r3, [pc, #460]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a72      	ldr	r2, [pc, #456]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b70      	ldr	r3, [pc, #448]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	496d      	ldr	r1, [pc, #436]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040fc:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	4968      	ldr	r1, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
 8004110:	e025      	b.n	800415e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004112:	4b66      	ldr	r3, [pc, #408]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a65      	ldr	r2, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b63      	ldr	r3, [pc, #396]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4960      	ldr	r1, [pc, #384]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004130:	4b5e      	ldr	r3, [pc, #376]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	495b      	ldr	r1, [pc, #364]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fd8c 	bl	8004c6c <RCC_SetFlashLatencyFromMSIRange>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e380      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800415e:	f000 fcc1 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8004162:	4602      	mov	r2, r0
 8004164:	4b51      	ldr	r3, [pc, #324]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	4950      	ldr	r1, [pc, #320]	; (80042b0 <HAL_RCC_OscConfig+0x274>)
 8004170:	5ccb      	ldrb	r3, [r1, r3]
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	fa22 f303 	lsr.w	r3, r2, r3
 800417a:	4a4e      	ldr	r2, [pc, #312]	; (80042b4 <HAL_RCC_OscConfig+0x278>)
 800417c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800417e:	4b4e      	ldr	r3, [pc, #312]	; (80042b8 <HAL_RCC_OscConfig+0x27c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe f912 	bl	80023ac <HAL_InitTick>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d052      	beq.n	8004238 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	e364      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d032      	beq.n	8004204 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800419e:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a42      	ldr	r2, [pc, #264]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041aa:	f7fe f94f 	bl	800244c <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041b2:	f7fe f94b 	bl	800244c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e34d      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041c4:	4b39      	ldr	r3, [pc, #228]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d0:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a35      	ldr	r2, [pc, #212]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041d6:	f043 0308 	orr.w	r3, r3, #8
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4930      	ldr	r1, [pc, #192]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ee:	4b2f      	ldr	r3, [pc, #188]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	492b      	ldr	r1, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
 8004202:	e01a      	b.n	800423a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004204:	4b29      	ldr	r3, [pc, #164]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a28      	ldr	r2, [pc, #160]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004210:	f7fe f91c 	bl	800244c <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004218:	f7fe f918 	bl	800244c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e31a      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800422a:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x1dc>
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004238:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d073      	beq.n	800432e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d005      	beq.n	8004258 <HAL_RCC_OscConfig+0x21c>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d10e      	bne.n	8004270 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d10b      	bne.n	8004270 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d063      	beq.n	800432c <HAL_RCC_OscConfig+0x2f0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d15f      	bne.n	800432c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e2f7      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004278:	d106      	bne.n	8004288 <HAL_RCC_OscConfig+0x24c>
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a0b      	ldr	r2, [pc, #44]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e025      	b.n	80042d4 <HAL_RCC_OscConfig+0x298>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004290:	d114      	bne.n	80042bc <HAL_RCC_OscConfig+0x280>
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 8004298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a02      	ldr	r2, [pc, #8]	; (80042ac <HAL_RCC_OscConfig+0x270>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e013      	b.n	80042d4 <HAL_RCC_OscConfig+0x298>
 80042ac:	40021000 	.word	0x40021000
 80042b0:	0800a718 	.word	0x0800a718
 80042b4:	20000018 	.word	0x20000018
 80042b8:	2000001c 	.word	0x2000001c
 80042bc:	4ba0      	ldr	r3, [pc, #640]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a9f      	ldr	r2, [pc, #636]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b9d      	ldr	r3, [pc, #628]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a9c      	ldr	r2, [pc, #624]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe f8b6 	bl	800244c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe f8b2 	bl	800244c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e2b4      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f6:	4b92      	ldr	r3, [pc, #584]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x2a8>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fe f8a2 	bl	800244c <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430c:	f7fe f89e 	bl	800244c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e2a0      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431e:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x2d0>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d060      	beq.n	80043fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d005      	beq.n	800434c <HAL_RCC_OscConfig+0x310>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d119      	bne.n	800437a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d116      	bne.n	800437a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800434c:	4b7c      	ldr	r3, [pc, #496]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_OscConfig+0x328>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e27d      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004364:	4b76      	ldr	r3, [pc, #472]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	4973      	ldr	r1, [pc, #460]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004378:	e040      	b.n	80043fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d023      	beq.n	80043ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004382:	4b6f      	ldr	r3, [pc, #444]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fe f85d 	bl	800244c <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004396:	f7fe f859 	bl	800244c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e25b      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a8:	4b65      	ldr	r3, [pc, #404]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b62      	ldr	r3, [pc, #392]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	495f      	ldr	r1, [pc, #380]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	e018      	b.n	80043fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ca:	4b5d      	ldr	r3, [pc, #372]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5c      	ldr	r2, [pc, #368]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80043d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fe f839 	bl	800244c <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7fe f835 	bl	800244c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e237      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043f0:	4b53      	ldr	r3, [pc, #332]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d03c      	beq.n	8004482 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01c      	beq.n	800444a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004410:	4b4b      	ldr	r3, [pc, #300]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004416:	4a4a      	ldr	r2, [pc, #296]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fe f814 	bl	800244c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004428:	f7fe f810 	bl	800244c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e212      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800443a:	4b41      	ldr	r3, [pc, #260]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 800443c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ef      	beq.n	8004428 <HAL_RCC_OscConfig+0x3ec>
 8004448:	e01b      	b.n	8004482 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800444a:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004450:	4a3b      	ldr	r2, [pc, #236]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445a:	f7fd fff7 	bl	800244c <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004462:	f7fd fff3 	bl	800244c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1f5      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ef      	bne.n	8004462 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80a6 	beq.w	80045dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004490:	2300      	movs	r3, #0
 8004492:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004494:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	4b27      	ldr	r3, [pc, #156]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6593      	str	r3, [r2, #88]	; 0x58
 80044ac:	4b24      	ldr	r3, [pc, #144]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b8:	2301      	movs	r3, #1
 80044ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <HAL_RCC_OscConfig+0x508>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d118      	bne.n	80044fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_RCC_OscConfig+0x508>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <HAL_RCC_OscConfig+0x508>)
 80044ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d4:	f7fd ffba 	bl	800244c <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044dc:	f7fd ffb6 	bl	800244c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1b8      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_RCC_OscConfig+0x508>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d108      	bne.n	8004514 <HAL_RCC_OscConfig+0x4d8>
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004512:	e029      	b.n	8004568 <HAL_RCC_OscConfig+0x52c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b05      	cmp	r3, #5
 800451a:	d115      	bne.n	8004548 <HAL_RCC_OscConfig+0x50c>
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004524:	f043 0304 	orr.w	r3, r3, #4
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	4a03      	ldr	r2, [pc, #12]	; (8004540 <HAL_RCC_OscConfig+0x504>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800453c:	e014      	b.n	8004568 <HAL_RCC_OscConfig+0x52c>
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	40007000 	.word	0x40007000
 8004548:	4b9d      	ldr	r3, [pc, #628]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	4a9c      	ldr	r2, [pc, #624]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004558:	4b99      	ldr	r3, [pc, #612]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	4a98      	ldr	r2, [pc, #608]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004560:	f023 0304 	bic.w	r3, r3, #4
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d016      	beq.n	800459e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004570:	f7fd ff6c 	bl	800244c <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004576:	e00a      	b.n	800458e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fd ff68 	bl	800244c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e168      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800458e:	4b8c      	ldr	r3, [pc, #560]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ed      	beq.n	8004578 <HAL_RCC_OscConfig+0x53c>
 800459c:	e015      	b.n	80045ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459e:	f7fd ff55 	bl	800244c <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045a4:	e00a      	b.n	80045bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fd ff51 	bl	800244c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e151      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045bc:	4b80      	ldr	r3, [pc, #512]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1ed      	bne.n	80045a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ca:	7ffb      	ldrb	r3, [r7, #31]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d0:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	4a7a      	ldr	r2, [pc, #488]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 80045d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d03c      	beq.n	8004662 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01c      	beq.n	800462a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045f0:	4b73      	ldr	r3, [pc, #460]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 80045f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f6:	4a72      	ldr	r2, [pc, #456]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7fd ff24 	bl	800244c <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004608:	f7fd ff20 	bl	800244c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e122      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800461a:	4b69      	ldr	r3, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800461c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ef      	beq.n	8004608 <HAL_RCC_OscConfig+0x5cc>
 8004628:	e01b      	b.n	8004662 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800462a:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800462c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004630:	4a63      	ldr	r2, [pc, #396]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463a:	f7fd ff07 	bl	800244c <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004642:	f7fd ff03 	bl	800244c <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e105      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1ef      	bne.n	8004642 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80f9 	beq.w	800485e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	2b02      	cmp	r3, #2
 8004672:	f040 80cf 	bne.w	8004814 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004676:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 0203 	and.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d12c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	3b01      	subs	r3, #1
 8004696:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d123      	bne.n	80046e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d11b      	bne.n	80046e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d113      	bne.n	80046e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	085b      	lsrs	r3, r3, #1
 80046c8:	3b01      	subs	r3, #1
 80046ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d109      	bne.n	80046e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	3b01      	subs	r3, #1
 80046de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d071      	beq.n	80047c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	d068      	beq.n	80047bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046ea:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d105      	bne.n	8004702 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046f6:	4b32      	ldr	r3, [pc, #200]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e0ac      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004706:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a2d      	ldr	r2, [pc, #180]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800470c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004710:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004712:	f7fd fe9b 	bl	800244c <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471a:	f7fd fe97 	bl	800244c <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e099      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472c:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f0      	bne.n	800471a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004738:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <HAL_RCC_OscConfig+0x788>)
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004748:	3a01      	subs	r2, #1
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	4311      	orrs	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004752:	0212      	lsls	r2, r2, #8
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800475a:	0852      	lsrs	r2, r2, #1
 800475c:	3a01      	subs	r2, #1
 800475e:	0552      	lsls	r2, r2, #21
 8004760:	4311      	orrs	r1, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004766:	0852      	lsrs	r2, r2, #1
 8004768:	3a01      	subs	r2, #1
 800476a:	0652      	lsls	r2, r2, #25
 800476c:	4311      	orrs	r1, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004772:	06d2      	lsls	r2, r2, #27
 8004774:	430a      	orrs	r2, r1
 8004776:	4912      	ldr	r1, [pc, #72]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004778:	4313      	orrs	r3, r2
 800477a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 800478e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004792:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004794:	f7fd fe5a 	bl	800244c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fe56 	bl	800244c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e058      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <HAL_RCC_OscConfig+0x784>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ba:	e050      	b.n	800485e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e04f      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
 80047c0:	40021000 	.word	0x40021000
 80047c4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c8:	4b27      	ldr	r3, [pc, #156]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d144      	bne.n	800485e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a23      	ldr	r2, [pc, #140]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 80047da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047ec:	f7fd fe2e 	bl	800244c <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fd fe2a 	bl	800244c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e02c      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004806:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0x7b8>
 8004812:	e024      	b.n	800485e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d01f      	beq.n	800485a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 8004820:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7fd fe11 	bl	800244c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fd fe0d 	bl	800244c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e00f      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004840:	4b09      	ldr	r3, [pc, #36]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	4905      	ldr	r1, [pc, #20]	; (8004868 <HAL_RCC_OscConfig+0x82c>)
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_OscConfig+0x830>)
 8004854:	4013      	ands	r3, r2
 8004856:	60cb      	str	r3, [r1, #12]
 8004858:	e001      	b.n	800485e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	feeefffc 	.word	0xfeeefffc

08004870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e11d      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b90      	ldr	r3, [pc, #576]	; (8004acc <HAL_RCC_ClockConfig+0x25c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d910      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b8d      	ldr	r3, [pc, #564]	; (8004acc <HAL_RCC_ClockConfig+0x25c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 020f 	bic.w	r2, r3, #15
 800489e:	498b      	ldr	r1, [pc, #556]	; (8004acc <HAL_RCC_ClockConfig+0x25c>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b89      	ldr	r3, [pc, #548]	; (8004acc <HAL_RCC_ClockConfig+0x25c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e105      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d010      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	4b81      	ldr	r3, [pc, #516]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d908      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b7e      	ldr	r3, [pc, #504]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	497b      	ldr	r1, [pc, #492]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d079      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d11e      	bne.n	8004938 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fa:	4b75      	ldr	r3, [pc, #468]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0dc      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800490a:	f000 fa09 	bl	8004d20 <RCC_GetSysClockFreqFromPLLSource>
 800490e:	4603      	mov	r3, r0
 8004910:	4a70      	ldr	r2, [pc, #448]	; (8004ad4 <HAL_RCC_ClockConfig+0x264>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d946      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004916:	4b6e      	ldr	r3, [pc, #440]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d140      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004922:	4b6b      	ldr	r3, [pc, #428]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492a:	4a69      	ldr	r2, [pc, #420]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 800492c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004930:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e035      	b.n	80049a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d107      	bne.n	8004950 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004940:	4b63      	ldr	r3, [pc, #396]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d115      	bne.n	8004978 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0b9      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004958:	4b5d      	ldr	r3, [pc, #372]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0ad      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004968:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0a5      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004978:	f000 f8b4 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 800497c:	4603      	mov	r3, r0
 800497e:	4a55      	ldr	r2, [pc, #340]	; (8004ad4 <HAL_RCC_ClockConfig+0x264>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d90f      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004984:	4b52      	ldr	r3, [pc, #328]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004990:	4b4f      	ldr	r3, [pc, #316]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004998:	4a4d      	ldr	r2, [pc, #308]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 800499a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049a4:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 0203 	bic.w	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4947      	ldr	r1, [pc, #284]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fd fd49 	bl	800244c <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049be:	f7fd fd45 	bl	800244c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e077      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d4:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 020c 	and.w	r2, r3, #12
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d1eb      	bne.n	80049be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d105      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049ec:	4b38      	ldr	r3, [pc, #224]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a37      	ldr	r2, [pc, #220]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 80049f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d010      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d208      	bcs.n	8004a26 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a14:	4b2e      	ldr	r3, [pc, #184]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	492b      	ldr	r1, [pc, #172]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_RCC_ClockConfig+0x25c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d210      	bcs.n	8004a56 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <HAL_RCC_ClockConfig+0x25c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 020f 	bic.w	r2, r3, #15
 8004a3c:	4923      	ldr	r1, [pc, #140]	; (8004acc <HAL_RCC_ClockConfig+0x25c>)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a44:	4b21      	ldr	r3, [pc, #132]	; (8004acc <HAL_RCC_ClockConfig+0x25c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d001      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e036      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a62:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	4918      	ldr	r1, [pc, #96]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a80:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4910      	ldr	r1, [pc, #64]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a94:	f000 f826 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <HAL_RCC_ClockConfig+0x260>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	490c      	ldr	r1, [pc, #48]	; (8004ad8 <HAL_RCC_ClockConfig+0x268>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab0:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x26c>)
 8004ab2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <HAL_RCC_ClockConfig+0x270>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fc77 	bl	80023ac <HAL_InitTick>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	04c4b400 	.word	0x04c4b400
 8004ad8:	0800a718 	.word	0x0800a718
 8004adc:	20000018 	.word	0x20000018
 8004ae0:	2000001c 	.word	0x2000001c

08004ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af2:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004afc:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x34>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d121      	bne.n	8004b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d11e      	bne.n	8004b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b18:	4b34      	ldr	r3, [pc, #208]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b24:	4b31      	ldr	r3, [pc, #196]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	e005      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b34:	4b2d      	ldr	r3, [pc, #180]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b40:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d102      	bne.n	8004b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b5c:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	e004      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b68:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b0c      	cmp	r3, #12
 8004b70:	d134      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b72:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d003      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d003      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0xac>
 8004b88:	e005      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b8a:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b8c:	617b      	str	r3, [r7, #20]
      break;
 8004b8e:	e005      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b92:	617b      	str	r3, [r7, #20]
      break;
 8004b94:	e002      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	617b      	str	r3, [r7, #20]
      break;
 8004b9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	fb03 f202 	mul.w	r2, r3, r2
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	0e5b      	lsrs	r3, r3, #25
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3724      	adds	r7, #36	; 0x24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	0800a730 	.word	0x0800a730
 8004bf4:	00f42400 	.word	0x00f42400
 8004bf8:	007a1200 	.word	0x007a1200

08004bfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000018 	.word	0x20000018

08004c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c18:	f7ff fff0 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4904      	ldr	r1, [pc, #16]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	0800a728 	.word	0x0800a728

08004c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c44:	f7ff ffda 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0adb      	lsrs	r3, r3, #11
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4904      	ldr	r1, [pc, #16]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000
 8004c68:	0800a728 	.word	0x0800a728

08004c6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c78:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c84:	f7ff f8f6 	bl	8003e74 <HAL_PWREx_GetVoltageRange>
 8004c88:	6178      	str	r0, [r7, #20]
 8004c8a:	e014      	b.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6593      	str	r3, [r2, #88]	; 0x58
 8004c98:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ca4:	f7ff f8e6 	bl	8003e74 <HAL_PWREx_GetVoltageRange>
 8004ca8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004caa:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	4a1a      	ldr	r2, [pc, #104]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cbc:	d10b      	bne.n	8004cd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b80      	cmp	r3, #128	; 0x80
 8004cc2:	d913      	bls.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2ba0      	cmp	r3, #160	; 0xa0
 8004cc8:	d902      	bls.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cca:	2302      	movs	r3, #2
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e00d      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	e00a      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cda:	d902      	bls.n	8004ce2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004cdc:	2302      	movs	r3, #2
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e004      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b70      	cmp	r3, #112	; 0x70
 8004ce6:	d101      	bne.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ce8:	2301      	movs	r3, #1
 8004cea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 020f 	bic.w	r2, r3, #15
 8004cf4:	4909      	ldr	r1, [pc, #36]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cfc:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d001      	beq.n	8004d0e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40022000 	.word	0x40022000

08004d20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d26:	4b2d      	ldr	r3, [pc, #180]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d00b      	beq.n	8004d4e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d825      	bhi.n	8004d88 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d008      	beq.n	8004d54 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d11f      	bne.n	8004d88 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004d4a:	613b      	str	r3, [r7, #16]
    break;
 8004d4c:	e01f      	b.n	8004d8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004d4e:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004d50:	613b      	str	r3, [r7, #16]
    break;
 8004d52:	e01c      	b.n	8004d8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d54:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e005      	b.n	8004d7c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d70:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004d7c:	4a1a      	ldr	r2, [pc, #104]	; (8004de8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d84:	613b      	str	r3, [r7, #16]
    break;
 8004d86:	e002      	b.n	8004d8e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
    break;
 8004d8c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0a1b      	lsrs	r3, r3, #8
 8004da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	fb03 f202 	mul.w	r2, r3, r2
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0e5b      	lsrs	r3, r3, #25
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004dce:	683b      	ldr	r3, [r7, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	00f42400 	.word	0x00f42400
 8004de4:	007a1200 	.word	0x007a1200
 8004de8:	0800a730 	.word	0x0800a730

08004dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004df4:	2300      	movs	r3, #0
 8004df6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004df8:	2300      	movs	r3, #0
 8004dfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d040      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d02a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e10:	2b80      	cmp	r3, #128	; 0x80
 8004e12:	d825      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e14:	2b60      	cmp	r3, #96	; 0x60
 8004e16:	d026      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e18:	2b60      	cmp	r3, #96	; 0x60
 8004e1a:	d821      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d006      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d81d      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d010      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e2c:	e018      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e2e:	4b89      	ldr	r3, [pc, #548]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	4a88      	ldr	r2, [pc, #544]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e3a:	e015      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fb02 	bl	800544c <RCCEx_PLLSAI1_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e4c:	e00c      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3320      	adds	r3, #32
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fbed 	bl	8005634 <RCCEx_PLLSAI2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e5e:	e003      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	74fb      	strb	r3, [r7, #19]
      break;
 8004e64:	e000      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e6e:	4b79      	ldr	r3, [pc, #484]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e74:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7c:	4975      	ldr	r1, [pc, #468]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e84:	e001      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d047      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d030      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d82a      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eaa:	d02a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb0:	d824      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb6:	d008      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ebc:	d81e      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec6:	d010      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ec8:	e018      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eca:	4b62      	ldr	r3, [pc, #392]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	4a61      	ldr	r2, [pc, #388]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ed6:	e015      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fab4 	bl	800544c <RCCEx_PLLSAI1_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ee8:	e00c      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3320      	adds	r3, #32
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fb9f 	bl	8005634 <RCCEx_PLLSAI2_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004efa:	e003      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	74fb      	strb	r3, [r7, #19]
      break;
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f0a:	4b52      	ldr	r3, [pc, #328]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	494e      	ldr	r1, [pc, #312]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f20:	e001      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 809f 	beq.w	8005072 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f34:	2300      	movs	r3, #0
 8004f36:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f4e:	4b41      	ldr	r3, [pc, #260]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	4a40      	ldr	r2, [pc, #256]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6593      	str	r3, [r2, #88]	; 0x58
 8004f5a:	4b3e      	ldr	r3, [pc, #248]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f66:	2301      	movs	r3, #1
 8004f68:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3a      	ldr	r2, [pc, #232]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f76:	f7fd fa69 	bl	800244c <HAL_GetTick>
 8004f7a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f7c:	e009      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7e:	f7fd fa65 	bl	800244c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d902      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	74fb      	strb	r3, [r7, #19]
        break;
 8004f90:	e005      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f92:	4b31      	ldr	r3, [pc, #196]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ef      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d15b      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01f      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d019      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004fee:	4a19      	ldr	r2, [pc, #100]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d016      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fd fa24 	bl	800244c <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005006:	e00b      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fd fa20 	bl	800244c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	; 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d902      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	74fb      	strb	r3, [r7, #19]
            break;
 800501e:	e006      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ec      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800502e:	7cfb      	ldrb	r3, [r7, #19]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10c      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	4903      	ldr	r1, [pc, #12]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800504c:	e008      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	74bb      	strb	r3, [r7, #18]
 8005052:	e005      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005054:	40021000 	.word	0x40021000
 8005058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005060:	7c7b      	ldrb	r3, [r7, #17]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d105      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005066:	4ba0      	ldr	r3, [pc, #640]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	4a9f      	ldr	r2, [pc, #636]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800507e:	4b9a      	ldr	r3, [pc, #616]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f023 0203 	bic.w	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	4996      	ldr	r1, [pc, #600]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050a0:	4b91      	ldr	r3, [pc, #580]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 020c 	bic.w	r2, r3, #12
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	498e      	ldr	r1, [pc, #568]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050c2:	4b89      	ldr	r3, [pc, #548]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	4985      	ldr	r1, [pc, #532]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050e4:	4b80      	ldr	r3, [pc, #512]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f2:	497d      	ldr	r1, [pc, #500]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005106:	4b78      	ldr	r3, [pc, #480]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005114:	4974      	ldr	r1, [pc, #464]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005128:	4b6f      	ldr	r3, [pc, #444]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	496c      	ldr	r1, [pc, #432]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800514a:	4b67      	ldr	r3, [pc, #412]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005158:	4963      	ldr	r1, [pc, #396]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800516c:	4b5e      	ldr	r3, [pc, #376]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800517a:	495b      	ldr	r1, [pc, #364]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800518e:	4b56      	ldr	r3, [pc, #344]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	4952      	ldr	r1, [pc, #328]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051b0:	4b4d      	ldr	r3, [pc, #308]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	494a      	ldr	r1, [pc, #296]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d2:	4b45      	ldr	r3, [pc, #276]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	4941      	ldr	r1, [pc, #260]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051f4:	4b3c      	ldr	r3, [pc, #240]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051fa:	f023 0203 	bic.w	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005202:	4939      	ldr	r1, [pc, #228]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d028      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005216:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005224:	4930      	ldr	r1, [pc, #192]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005234:	d106      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005240:	60d3      	str	r3, [r2, #12]
 8005242:	e011      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800524c:	d10c      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3304      	adds	r3, #4
 8005252:	2101      	movs	r1, #1
 8005254:	4618      	mov	r0, r3
 8005256:	f000 f8f9 	bl	800544c <RCCEx_PLLSAI1_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005264:	7cfb      	ldrb	r3, [r7, #19]
 8005266:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d04d      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800527c:	d108      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800528a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800528e:	e012      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005290:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005292:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005296:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800529c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052a0:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ae:	490e      	ldr	r1, [pc, #56]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052be:	d106      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ca:	60d3      	str	r3, [r2, #12]
 80052cc:	e020      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d6:	d109      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a02      	ldr	r2, [pc, #8]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e2:	60d3      	str	r3, [r2, #12]
 80052e4:	e014      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f4:	d10c      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	2101      	movs	r1, #1
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f8a5 	bl	800544c <RCCEx_PLLSAI1_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005306:	7cfb      	ldrb	r3, [r7, #19]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d028      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800531c:	4b4a      	ldr	r3, [pc, #296]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800532a:	4947      	ldr	r1, [pc, #284]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800533a:	d106      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800533c:	4b42      	ldr	r3, [pc, #264]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a41      	ldr	r2, [pc, #260]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005346:	60d3      	str	r3, [r2, #12]
 8005348:	e011      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005352:	d10c      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	2101      	movs	r1, #1
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f876 	bl	800544c <RCCEx_PLLSAI1_Config>
 8005360:	4603      	mov	r3, r0
 8005362:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01e      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537a:	4b33      	ldr	r3, [pc, #204]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800538a:	492f      	ldr	r1, [pc, #188]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3304      	adds	r3, #4
 80053a2:	2102      	movs	r1, #2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f851 	bl	800544c <RCCEx_PLLSAI1_Config>
 80053aa:	4603      	mov	r3, r0
 80053ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00b      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053c4:	4b20      	ldr	r3, [pc, #128]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ca:	f023 0204 	bic.w	r2, r3, #4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d4:	491c      	ldr	r1, [pc, #112]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ee:	f023 0218 	bic.w	r2, r3, #24
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	4913      	ldr	r1, [pc, #76]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800540c:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800540e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541c:	490a      	ldr	r1, [pc, #40]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800543c:	7cbb      	ldrb	r3, [r7, #18]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000

0800544c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800545a:	4b72      	ldr	r3, [pc, #456]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00e      	beq.n	8005484 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005466:	4b6f      	ldr	r3, [pc, #444]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0203 	and.w	r2, r3, #3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d103      	bne.n	800547e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
       ||
 800547a:	2b00      	cmp	r3, #0
 800547c:	d142      	bne.n	8005504 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	73fb      	strb	r3, [r7, #15]
 8005482:	e03f      	b.n	8005504 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d018      	beq.n	80054be <RCCEx_PLLSAI1_Config+0x72>
 800548c:	2b03      	cmp	r3, #3
 800548e:	d825      	bhi.n	80054dc <RCCEx_PLLSAI1_Config+0x90>
 8005490:	2b01      	cmp	r3, #1
 8005492:	d002      	beq.n	800549a <RCCEx_PLLSAI1_Config+0x4e>
 8005494:	2b02      	cmp	r3, #2
 8005496:	d009      	beq.n	80054ac <RCCEx_PLLSAI1_Config+0x60>
 8005498:	e020      	b.n	80054dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800549a:	4b62      	ldr	r3, [pc, #392]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d11d      	bne.n	80054e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054aa:	e01a      	b.n	80054e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054ac:	4b5d      	ldr	r3, [pc, #372]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d116      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054bc:	e013      	b.n	80054e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054be:	4b59      	ldr	r3, [pc, #356]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054ca:	4b56      	ldr	r3, [pc, #344]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054da:	e006      	b.n	80054ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
      break;
 80054e0:	e004      	b.n	80054ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054e2:	bf00      	nop
 80054e4:	e002      	b.n	80054ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d108      	bne.n	8005504 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80054f2:	4b4c      	ldr	r3, [pc, #304]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4949      	ldr	r1, [pc, #292]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 8086 	bne.w	8005618 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800550c:	4b45      	ldr	r3, [pc, #276]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a44      	ldr	r2, [pc, #272]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005512:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005518:	f7fc ff98 	bl	800244c <HAL_GetTick>
 800551c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800551e:	e009      	b.n	8005534 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005520:	f7fc ff94 	bl	800244c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d902      	bls.n	8005534 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	73fb      	strb	r3, [r7, #15]
        break;
 8005532:	e005      	b.n	8005540 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005534:	4b3b      	ldr	r3, [pc, #236]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1ef      	bne.n	8005520 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d168      	bne.n	8005618 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d113      	bne.n	8005574 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800554c:	4b35      	ldr	r3, [pc, #212]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	4b35      	ldr	r3, [pc, #212]	; (8005628 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005552:	4013      	ands	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6892      	ldr	r2, [r2, #8]
 8005558:	0211      	lsls	r1, r2, #8
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68d2      	ldr	r2, [r2, #12]
 800555e:	06d2      	lsls	r2, r2, #27
 8005560:	4311      	orrs	r1, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6852      	ldr	r2, [r2, #4]
 8005566:	3a01      	subs	r2, #1
 8005568:	0112      	lsls	r2, r2, #4
 800556a:	430a      	orrs	r2, r1
 800556c:	492d      	ldr	r1, [pc, #180]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800556e:	4313      	orrs	r3, r2
 8005570:	610b      	str	r3, [r1, #16]
 8005572:	e02d      	b.n	80055d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d115      	bne.n	80055a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800557a:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	4b2b      	ldr	r3, [pc, #172]	; (800562c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005580:	4013      	ands	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6892      	ldr	r2, [r2, #8]
 8005586:	0211      	lsls	r1, r2, #8
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6912      	ldr	r2, [r2, #16]
 800558c:	0852      	lsrs	r2, r2, #1
 800558e:	3a01      	subs	r2, #1
 8005590:	0552      	lsls	r2, r2, #21
 8005592:	4311      	orrs	r1, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6852      	ldr	r2, [r2, #4]
 8005598:	3a01      	subs	r2, #1
 800559a:	0112      	lsls	r2, r2, #4
 800559c:	430a      	orrs	r2, r1
 800559e:	4921      	ldr	r1, [pc, #132]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	610b      	str	r3, [r1, #16]
 80055a4:	e014      	b.n	80055d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055a6:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6892      	ldr	r2, [r2, #8]
 80055b2:	0211      	lsls	r1, r2, #8
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6952      	ldr	r2, [r2, #20]
 80055b8:	0852      	lsrs	r2, r2, #1
 80055ba:	3a01      	subs	r2, #1
 80055bc:	0652      	lsls	r2, r2, #25
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6852      	ldr	r2, [r2, #4]
 80055c4:	3a01      	subs	r2, #1
 80055c6:	0112      	lsls	r2, r2, #4
 80055c8:	430a      	orrs	r2, r1
 80055ca:	4916      	ldr	r1, [pc, #88]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a13      	ldr	r2, [pc, #76]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fc ff36 	bl	800244c <HAL_GetTick>
 80055e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055e2:	e009      	b.n	80055f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055e4:	f7fc ff32 	bl	800244c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d902      	bls.n	80055f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	73fb      	strb	r3, [r7, #15]
          break;
 80055f6:	e005      	b.n	8005604 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0ef      	beq.n	80055e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800560c:	691a      	ldr	r2, [r3, #16]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	4904      	ldr	r1, [pc, #16]	; (8005624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	07ff800f 	.word	0x07ff800f
 800562c:	ff9f800f 	.word	0xff9f800f
 8005630:	f9ff800f 	.word	0xf9ff800f

08005634 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005642:	4b72      	ldr	r3, [pc, #456]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00e      	beq.n	800566c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800564e:	4b6f      	ldr	r3, [pc, #444]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0203 	and.w	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d103      	bne.n	8005666 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
       ||
 8005662:	2b00      	cmp	r3, #0
 8005664:	d142      	bne.n	80056ec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
 800566a:	e03f      	b.n	80056ec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d018      	beq.n	80056a6 <RCCEx_PLLSAI2_Config+0x72>
 8005674:	2b03      	cmp	r3, #3
 8005676:	d825      	bhi.n	80056c4 <RCCEx_PLLSAI2_Config+0x90>
 8005678:	2b01      	cmp	r3, #1
 800567a:	d002      	beq.n	8005682 <RCCEx_PLLSAI2_Config+0x4e>
 800567c:	2b02      	cmp	r3, #2
 800567e:	d009      	beq.n	8005694 <RCCEx_PLLSAI2_Config+0x60>
 8005680:	e020      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005682:	4b62      	ldr	r3, [pc, #392]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d11d      	bne.n	80056ca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005692:	e01a      	b.n	80056ca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005694:	4b5d      	ldr	r3, [pc, #372]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569c:	2b00      	cmp	r3, #0
 800569e:	d116      	bne.n	80056ce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a4:	e013      	b.n	80056ce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056a6:	4b59      	ldr	r3, [pc, #356]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056b2:	4b56      	ldr	r3, [pc, #344]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056c2:	e006      	b.n	80056d2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
      break;
 80056c8:	e004      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80056d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d108      	bne.n	80056ec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80056da:	4b4c      	ldr	r3, [pc, #304]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f023 0203 	bic.w	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4949      	ldr	r1, [pc, #292]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8086 	bne.w	8005800 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056f4:	4b45      	ldr	r3, [pc, #276]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a44      	ldr	r2, [pc, #272]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005700:	f7fc fea4 	bl	800244c <HAL_GetTick>
 8005704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005706:	e009      	b.n	800571c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005708:	f7fc fea0 	bl	800244c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d902      	bls.n	800571c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	73fb      	strb	r3, [r7, #15]
        break;
 800571a:	e005      	b.n	8005728 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800571c:	4b3b      	ldr	r3, [pc, #236]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1ef      	bne.n	8005708 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d168      	bne.n	8005800 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d113      	bne.n	800575c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005734:	4b35      	ldr	r3, [pc, #212]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	4b35      	ldr	r3, [pc, #212]	; (8005810 <RCCEx_PLLSAI2_Config+0x1dc>)
 800573a:	4013      	ands	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6892      	ldr	r2, [r2, #8]
 8005740:	0211      	lsls	r1, r2, #8
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	68d2      	ldr	r2, [r2, #12]
 8005746:	06d2      	lsls	r2, r2, #27
 8005748:	4311      	orrs	r1, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6852      	ldr	r2, [r2, #4]
 800574e:	3a01      	subs	r2, #1
 8005750:	0112      	lsls	r2, r2, #4
 8005752:	430a      	orrs	r2, r1
 8005754:	492d      	ldr	r1, [pc, #180]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005756:	4313      	orrs	r3, r2
 8005758:	614b      	str	r3, [r1, #20]
 800575a:	e02d      	b.n	80057b8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d115      	bne.n	800578e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005762:	4b2a      	ldr	r3, [pc, #168]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	4b2b      	ldr	r3, [pc, #172]	; (8005814 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005768:	4013      	ands	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6892      	ldr	r2, [r2, #8]
 800576e:	0211      	lsls	r1, r2, #8
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6912      	ldr	r2, [r2, #16]
 8005774:	0852      	lsrs	r2, r2, #1
 8005776:	3a01      	subs	r2, #1
 8005778:	0552      	lsls	r2, r2, #21
 800577a:	4311      	orrs	r1, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6852      	ldr	r2, [r2, #4]
 8005780:	3a01      	subs	r2, #1
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	430a      	orrs	r2, r1
 8005786:	4921      	ldr	r1, [pc, #132]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005788:	4313      	orrs	r3, r2
 800578a:	614b      	str	r3, [r1, #20]
 800578c:	e014      	b.n	80057b8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800578e:	4b1f      	ldr	r3, [pc, #124]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	4b21      	ldr	r3, [pc, #132]	; (8005818 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005794:	4013      	ands	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6892      	ldr	r2, [r2, #8]
 800579a:	0211      	lsls	r1, r2, #8
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6952      	ldr	r2, [r2, #20]
 80057a0:	0852      	lsrs	r2, r2, #1
 80057a2:	3a01      	subs	r2, #1
 80057a4:	0652      	lsls	r2, r2, #25
 80057a6:	4311      	orrs	r1, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6852      	ldr	r2, [r2, #4]
 80057ac:	3a01      	subs	r2, #1
 80057ae:	0112      	lsls	r2, r2, #4
 80057b0:	430a      	orrs	r2, r1
 80057b2:	4916      	ldr	r1, [pc, #88]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057b8:	4b14      	ldr	r3, [pc, #80]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a13      	ldr	r2, [pc, #76]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c4:	f7fc fe42 	bl	800244c <HAL_GetTick>
 80057c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057ca:	e009      	b.n	80057e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057cc:	f7fc fe3e 	bl	800244c <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d902      	bls.n	80057e0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	73fb      	strb	r3, [r7, #15]
          break;
 80057de:	e005      	b.n	80057ec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ef      	beq.n	80057cc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	4904      	ldr	r1, [pc, #16]	; (800580c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
 8005810:	07ff800f 	.word	0x07ff800f
 8005814:	ff9f800f 	.word	0xff9f800f
 8005818:	f9ff800f 	.word	0xf9ff800f

0800581c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e049      	b.n	80058c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fb9a 	bl	8001f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f000 fb7a 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e049      	b.n	8005970 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f841 	bl	8005978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3304      	adds	r3, #4
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f000 fb23 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <HAL_TIM_PWM_Start+0x24>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	e03c      	b.n	8005a2a <HAL_TIM_PWM_Start+0x9e>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d109      	bne.n	80059ca <HAL_TIM_PWM_Start+0x3e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	bf14      	ite	ne
 80059c2:	2301      	movne	r3, #1
 80059c4:	2300      	moveq	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	e02f      	b.n	8005a2a <HAL_TIM_PWM_Start+0x9e>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d109      	bne.n	80059e4 <HAL_TIM_PWM_Start+0x58>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e022      	b.n	8005a2a <HAL_TIM_PWM_Start+0x9e>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d109      	bne.n	80059fe <HAL_TIM_PWM_Start+0x72>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	bf14      	ite	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	2300      	moveq	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	e015      	b.n	8005a2a <HAL_TIM_PWM_Start+0x9e>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d109      	bne.n	8005a18 <HAL_TIM_PWM_Start+0x8c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e008      	b.n	8005a2a <HAL_TIM_PWM_Start+0x9e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e09c      	b.n	8005b6c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_PWM_Start+0xb6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a40:	e023      	b.n	8005a8a <HAL_TIM_PWM_Start+0xfe>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start+0xc6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a50:	e01b      	b.n	8005a8a <HAL_TIM_PWM_Start+0xfe>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_PWM_Start+0xd6>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a60:	e013      	b.n	8005a8a <HAL_TIM_PWM_Start+0xfe>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b0c      	cmp	r3, #12
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Start+0xe6>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a70:	e00b      	b.n	8005a8a <HAL_TIM_PWM_Start+0xfe>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_PWM_Start+0xf6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a80:	e003      	b.n	8005a8a <HAL_TIM_PWM_Start+0xfe>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fe68 	bl	8006768 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a35      	ldr	r2, [pc, #212]	; (8005b74 <HAL_TIM_PWM_Start+0x1e8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <HAL_TIM_PWM_Start+0x13e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a34      	ldr	r2, [pc, #208]	; (8005b78 <HAL_TIM_PWM_Start+0x1ec>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00e      	beq.n	8005aca <HAL_TIM_PWM_Start+0x13e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a32      	ldr	r2, [pc, #200]	; (8005b7c <HAL_TIM_PWM_Start+0x1f0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_TIM_PWM_Start+0x13e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a31      	ldr	r2, [pc, #196]	; (8005b80 <HAL_TIM_PWM_Start+0x1f4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d004      	beq.n	8005aca <HAL_TIM_PWM_Start+0x13e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2f      	ldr	r2, [pc, #188]	; (8005b84 <HAL_TIM_PWM_Start+0x1f8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_PWM_Start+0x142>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <HAL_TIM_PWM_Start+0x144>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ae2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <HAL_TIM_PWM_Start+0x1e8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01d      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x19e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d018      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x19e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a22      	ldr	r2, [pc, #136]	; (8005b88 <HAL_TIM_PWM_Start+0x1fc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x19e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a21      	ldr	r2, [pc, #132]	; (8005b8c <HAL_TIM_PWM_Start+0x200>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00e      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x19e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <HAL_TIM_PWM_Start+0x204>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x19e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <HAL_TIM_PWM_Start+0x1ec>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x19e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <HAL_TIM_PWM_Start+0x1f0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d115      	bne.n	8005b56 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	4b18      	ldr	r3, [pc, #96]	; (8005b94 <HAL_TIM_PWM_Start+0x208>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b06      	cmp	r3, #6
 8005b3a:	d015      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1dc>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b42:	d011      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b54:	e008      	b.n	8005b68 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0201 	orr.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e000      	b.n	8005b6a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40013400 	.word	0x40013400
 8005b7c:	40014000 	.word	0x40014000
 8005b80:	40014400 	.word	0x40014400
 8005b84:	40014800 	.word	0x40014800
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	00010007 	.word	0x00010007

08005b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0ff      	b.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b14      	cmp	r3, #20
 8005bc2:	f200 80f0 	bhi.w	8005da6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005c21 	.word	0x08005c21
 8005bd0:	08005da7 	.word	0x08005da7
 8005bd4:	08005da7 	.word	0x08005da7
 8005bd8:	08005da7 	.word	0x08005da7
 8005bdc:	08005c61 	.word	0x08005c61
 8005be0:	08005da7 	.word	0x08005da7
 8005be4:	08005da7 	.word	0x08005da7
 8005be8:	08005da7 	.word	0x08005da7
 8005bec:	08005ca3 	.word	0x08005ca3
 8005bf0:	08005da7 	.word	0x08005da7
 8005bf4:	08005da7 	.word	0x08005da7
 8005bf8:	08005da7 	.word	0x08005da7
 8005bfc:	08005ce3 	.word	0x08005ce3
 8005c00:	08005da7 	.word	0x08005da7
 8005c04:	08005da7 	.word	0x08005da7
 8005c08:	08005da7 	.word	0x08005da7
 8005c0c:	08005d25 	.word	0x08005d25
 8005c10:	08005da7 	.word	0x08005da7
 8005c14:	08005da7 	.word	0x08005da7
 8005c18:	08005da7 	.word	0x08005da7
 8005c1c:	08005d65 	.word	0x08005d65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fa2e 	bl	8006088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0208 	orr.w	r2, r2, #8
 8005c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0204 	bic.w	r2, r2, #4
 8005c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6999      	ldr	r1, [r3, #24]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	619a      	str	r2, [r3, #24]
      break;
 8005c5e:	e0a5      	b.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fa9e 	bl	80061a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6999      	ldr	r1, [r3, #24]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	021a      	lsls	r2, r3, #8
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	619a      	str	r2, [r3, #24]
      break;
 8005ca0:	e084      	b.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fb07 	bl	80062bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0208 	orr.w	r2, r2, #8
 8005cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0204 	bic.w	r2, r2, #4
 8005ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69d9      	ldr	r1, [r3, #28]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	61da      	str	r2, [r3, #28]
      break;
 8005ce0:	e064      	b.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fb6f 	bl	80063cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69d9      	ldr	r1, [r3, #28]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	021a      	lsls	r2, r3, #8
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	61da      	str	r2, [r3, #28]
      break;
 8005d22:	e043      	b.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fbb8 	bl	80064a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0208 	orr.w	r2, r2, #8
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0204 	bic.w	r2, r2, #4
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d62:	e023      	b.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fbfc 	bl	8006568 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	021a      	lsls	r2, r3, #8
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005da4:	e002      	b.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	75fb      	strb	r3, [r7, #23]
      break;
 8005daa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop

08005dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIM_ConfigClockSource+0x1c>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e0b6      	b.n	8005f4a <HAL_TIM_ConfigClockSource+0x18a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e18:	d03e      	beq.n	8005e98 <HAL_TIM_ConfigClockSource+0xd8>
 8005e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1e:	f200 8087 	bhi.w	8005f30 <HAL_TIM_ConfigClockSource+0x170>
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e26:	f000 8086 	beq.w	8005f36 <HAL_TIM_ConfigClockSource+0x176>
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	d87f      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x170>
 8005e30:	2b70      	cmp	r3, #112	; 0x70
 8005e32:	d01a      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0xaa>
 8005e34:	2b70      	cmp	r3, #112	; 0x70
 8005e36:	d87b      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x170>
 8005e38:	2b60      	cmp	r3, #96	; 0x60
 8005e3a:	d050      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x11e>
 8005e3c:	2b60      	cmp	r3, #96	; 0x60
 8005e3e:	d877      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x170>
 8005e40:	2b50      	cmp	r3, #80	; 0x50
 8005e42:	d03c      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0xfe>
 8005e44:	2b50      	cmp	r3, #80	; 0x50
 8005e46:	d873      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x170>
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d058      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x13e>
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d86f      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x170>
 8005e50:	2b30      	cmp	r3, #48	; 0x30
 8005e52:	d064      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x15e>
 8005e54:	2b30      	cmp	r3, #48	; 0x30
 8005e56:	d86b      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x170>
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d060      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x15e>
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d867      	bhi.n	8005f30 <HAL_TIM_ConfigClockSource+0x170>
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d05c      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x15e>
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d05a      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x15e>
 8005e68:	e062      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e7a:	f000 fc55 	bl	8006728 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	609a      	str	r2, [r3, #8]
      break;
 8005e96:	e04f      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ea8:	f000 fc3e 	bl	8006728 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eba:	609a      	str	r2, [r3, #8]
      break;
 8005ebc:	e03c      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f000 fbb2 	bl	8006634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2150      	movs	r1, #80	; 0x50
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fc0b 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8005edc:	e02c      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 fbd1 	bl	8006692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2160      	movs	r1, #96	; 0x60
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fbfb 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8005efc:	e01c      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f000 fb92 	bl	8006634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2140      	movs	r1, #64	; 0x40
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fbeb 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8005f1c:	e00c      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f000 fbe2 	bl	80066f2 <TIM_ITRx_SetConfig>
      break;
 8005f2e:	e003      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
      break;
 8005f34:	e000      	b.n	8005f38 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a40      	ldr	r2, [pc, #256]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d013      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d00f      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a3d      	ldr	r2, [pc, #244]	; (800606c <TIM_Base_SetConfig+0x118>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a3c      	ldr	r2, [pc, #240]	; (8006070 <TIM_Base_SetConfig+0x11c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d007      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a3b      	ldr	r2, [pc, #236]	; (8006074 <TIM_Base_SetConfig+0x120>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a3a      	ldr	r2, [pc, #232]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d108      	bne.n	8005fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2f      	ldr	r2, [pc, #188]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01f      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb4:	d01b      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a2c      	ldr	r2, [pc, #176]	; (800606c <TIM_Base_SetConfig+0x118>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d017      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2b      	ldr	r2, [pc, #172]	; (8006070 <TIM_Base_SetConfig+0x11c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a2a      	ldr	r2, [pc, #168]	; (8006074 <TIM_Base_SetConfig+0x120>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00f      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a29      	ldr	r2, [pc, #164]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00b      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a28      	ldr	r2, [pc, #160]	; (800607c <TIM_Base_SetConfig+0x128>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <TIM_Base_SetConfig+0x12c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a26      	ldr	r2, [pc, #152]	; (8006084 <TIM_Base_SetConfig+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a11      	ldr	r2, [pc, #68]	; (800607c <TIM_Base_SetConfig+0x128>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a10      	ldr	r2, [pc, #64]	; (8006080 <TIM_Base_SetConfig+0x12c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <TIM_Base_SetConfig+0x130>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d103      	bne.n	8006054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	615a      	str	r2, [r3, #20]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40012c00 	.word	0x40012c00
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f023 0201 	bic.w	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0303 	bic.w	r3, r3, #3
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 0302 	bic.w	r3, r3, #2
 80060d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a2c      	ldr	r2, [pc, #176]	; (8006194 <TIM_OC1_SetConfig+0x10c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00f      	beq.n	8006108 <TIM_OC1_SetConfig+0x80>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a2b      	ldr	r2, [pc, #172]	; (8006198 <TIM_OC1_SetConfig+0x110>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00b      	beq.n	8006108 <TIM_OC1_SetConfig+0x80>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a2a      	ldr	r2, [pc, #168]	; (800619c <TIM_OC1_SetConfig+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <TIM_OC1_SetConfig+0x80>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <TIM_OC1_SetConfig+0x118>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_OC1_SetConfig+0x80>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a28      	ldr	r2, [pc, #160]	; (80061a4 <TIM_OC1_SetConfig+0x11c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d10c      	bne.n	8006122 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f023 0308 	bic.w	r3, r3, #8
 800610e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 0304 	bic.w	r3, r3, #4
 8006120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <TIM_OC1_SetConfig+0x10c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00f      	beq.n	800614a <TIM_OC1_SetConfig+0xc2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <TIM_OC1_SetConfig+0x110>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00b      	beq.n	800614a <TIM_OC1_SetConfig+0xc2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <TIM_OC1_SetConfig+0x114>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d007      	beq.n	800614a <TIM_OC1_SetConfig+0xc2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <TIM_OC1_SetConfig+0x118>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d003      	beq.n	800614a <TIM_OC1_SetConfig+0xc2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <TIM_OC1_SetConfig+0x11c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d111      	bne.n	800616e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	621a      	str	r2, [r3, #32]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	40012c00 	.word	0x40012c00
 8006198:	40013400 	.word	0x40013400
 800619c:	40014000 	.word	0x40014000
 80061a0:	40014400 	.word	0x40014400
 80061a4:	40014800 	.word	0x40014800

080061a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0210 	bic.w	r2, r3, #16
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 0320 	bic.w	r3, r3, #32
 80061f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a28      	ldr	r2, [pc, #160]	; (80062a8 <TIM_OC2_SetConfig+0x100>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_OC2_SetConfig+0x6c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a27      	ldr	r2, [pc, #156]	; (80062ac <TIM_OC2_SetConfig+0x104>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d10d      	bne.n	8006230 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800621a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <TIM_OC2_SetConfig+0x100>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00f      	beq.n	8006258 <TIM_OC2_SetConfig+0xb0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <TIM_OC2_SetConfig+0x104>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_OC2_SetConfig+0xb0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <TIM_OC2_SetConfig+0x108>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_OC2_SetConfig+0xb0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <TIM_OC2_SetConfig+0x10c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0xb0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <TIM_OC2_SetConfig+0x110>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d113      	bne.n	8006280 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800625e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40012c00 	.word	0x40012c00
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800

080062bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0303 	bic.w	r3, r3, #3
 80062f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <TIM_OC3_SetConfig+0xfc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC3_SetConfig+0x6a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a26      	ldr	r2, [pc, #152]	; (80063bc <TIM_OC3_SetConfig+0x100>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d10d      	bne.n	8006342 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800632c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1c      	ldr	r2, [pc, #112]	; (80063b8 <TIM_OC3_SetConfig+0xfc>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00f      	beq.n	800636a <TIM_OC3_SetConfig+0xae>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a1b      	ldr	r2, [pc, #108]	; (80063bc <TIM_OC3_SetConfig+0x100>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00b      	beq.n	800636a <TIM_OC3_SetConfig+0xae>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1a      	ldr	r2, [pc, #104]	; (80063c0 <TIM_OC3_SetConfig+0x104>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d007      	beq.n	800636a <TIM_OC3_SetConfig+0xae>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <TIM_OC3_SetConfig+0x108>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC3_SetConfig+0xae>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <TIM_OC3_SetConfig+0x10c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d113      	bne.n	8006392 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40013400 	.word	0x40013400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800

080063cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800641a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a18      	ldr	r2, [pc, #96]	; (800648c <TIM_OC4_SetConfig+0xc0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00f      	beq.n	8006450 <TIM_OC4_SetConfig+0x84>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a17      	ldr	r2, [pc, #92]	; (8006490 <TIM_OC4_SetConfig+0xc4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00b      	beq.n	8006450 <TIM_OC4_SetConfig+0x84>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a16      	ldr	r2, [pc, #88]	; (8006494 <TIM_OC4_SetConfig+0xc8>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d007      	beq.n	8006450 <TIM_OC4_SetConfig+0x84>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a15      	ldr	r2, [pc, #84]	; (8006498 <TIM_OC4_SetConfig+0xcc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC4_SetConfig+0x84>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a14      	ldr	r2, [pc, #80]	; (800649c <TIM_OC4_SetConfig+0xd0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d109      	bne.n	8006464 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40012c00 	.word	0x40012c00
 8006490:	40013400 	.word	0x40013400
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a17      	ldr	r2, [pc, #92]	; (8006554 <TIM_OC5_SetConfig+0xb4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00f      	beq.n	800651a <TIM_OC5_SetConfig+0x7a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a16      	ldr	r2, [pc, #88]	; (8006558 <TIM_OC5_SetConfig+0xb8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00b      	beq.n	800651a <TIM_OC5_SetConfig+0x7a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a15      	ldr	r2, [pc, #84]	; (800655c <TIM_OC5_SetConfig+0xbc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d007      	beq.n	800651a <TIM_OC5_SetConfig+0x7a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a14      	ldr	r2, [pc, #80]	; (8006560 <TIM_OC5_SetConfig+0xc0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d003      	beq.n	800651a <TIM_OC5_SetConfig+0x7a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a13      	ldr	r2, [pc, #76]	; (8006564 <TIM_OC5_SetConfig+0xc4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d109      	bne.n	800652e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40013400 	.word	0x40013400
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800

08006568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	051b      	lsls	r3, r3, #20
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a18      	ldr	r2, [pc, #96]	; (8006620 <TIM_OC6_SetConfig+0xb8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00f      	beq.n	80065e4 <TIM_OC6_SetConfig+0x7c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a17      	ldr	r2, [pc, #92]	; (8006624 <TIM_OC6_SetConfig+0xbc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00b      	beq.n	80065e4 <TIM_OC6_SetConfig+0x7c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a16      	ldr	r2, [pc, #88]	; (8006628 <TIM_OC6_SetConfig+0xc0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d007      	beq.n	80065e4 <TIM_OC6_SetConfig+0x7c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a15      	ldr	r2, [pc, #84]	; (800662c <TIM_OC6_SetConfig+0xc4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_OC6_SetConfig+0x7c>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a14      	ldr	r2, [pc, #80]	; (8006630 <TIM_OC6_SetConfig+0xc8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d109      	bne.n	80065f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	029b      	lsls	r3, r3, #10
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40013400 	.word	0x40013400
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800

08006634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f023 0201 	bic.w	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800665e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 030a 	bic.w	r3, r3, #10
 8006670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006692:	b480      	push	{r7}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f023 0210 	bic.w	r2, r3, #16
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	031b      	lsls	r3, r3, #12
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4313      	orrs	r3, r2
 8006710:	f043 0307 	orr.w	r3, r3, #7
 8006714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	431a      	orrs	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4313      	orrs	r3, r2
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	609a      	str	r2, [r3, #8]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2201      	movs	r2, #1
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	43db      	mvns	r3, r3
 800678a:	401a      	ands	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1a      	ldr	r2, [r3, #32]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	fa01 f303 	lsl.w	r3, r1, r3
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
	...

080067b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e068      	b.n	800689e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a2e      	ldr	r2, [pc, #184]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a2d      	ldr	r2, [pc, #180]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d108      	bne.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01d      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683e:	d018      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d013      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1a      	ldr	r2, [pc, #104]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00e      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a18      	ldr	r2, [pc, #96]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d009      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a13      	ldr	r2, [pc, #76]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a14      	ldr	r2, [pc, #80]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d10c      	bne.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4313      	orrs	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40013400 	.word	0x40013400
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40014000 	.word	0x40014000

080068c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e042      	b.n	800695c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fb fa99 	bl	8001e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2224      	movs	r2, #36	; 0x24
 80068f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fc52 	bl	80071b0 <UART_SetConfig>
 800690c:	4603      	mov	r3, r0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e022      	b.n	800695c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 ff42 	bl	80077a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 ffc9 	bl	80078ec <UART_CheckIdleState>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800697a:	2b20      	cmp	r3, #32
 800697c:	f040 8084 	bne.w	8006a88 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_UART_Transmit+0x28>
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e07c      	b.n	8006a8a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006996:	2b01      	cmp	r3, #1
 8006998:	d101      	bne.n	800699e <HAL_UART_Transmit+0x3a>
 800699a:	2302      	movs	r3, #2
 800699c:	e075      	b.n	8006a8a <HAL_UART_Transmit+0x126>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2221      	movs	r2, #33	; 0x21
 80069b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b6:	f7fb fd49 	bl	800244c <HAL_GetTick>
 80069ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d4:	d108      	bne.n	80069e8 <HAL_UART_Transmit+0x84>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	e003      	b.n	80069f0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80069f8:	e02d      	b.n	8006a56 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 ffbc 	bl	8007982 <UART_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e03a      	b.n	8006a8a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	881a      	ldrh	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a26:	b292      	uxth	r2, r2
 8006a28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e008      	b.n	8006a44 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	3301      	adds	r3, #1
 8006a42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1cb      	bne.n	80069fa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2140      	movs	r1, #64	; 0x40
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 ff88 	bl	8007982 <UART_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e006      	b.n	8006a8a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e000      	b.n	8006a8a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006a88:	2302      	movs	r3, #2
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d142      	bne.n	8006b32 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_UART_Receive_IT+0x24>
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e03b      	b.n	8006b34 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Receive_IT+0x36>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e034      	b.n	8006b34 <HAL_UART_Receive_IT+0xa0>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <HAL_UART_Receive_IT+0xa8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d01f      	beq.n	8006b22 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d018      	beq.n	8006b22 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	613b      	str	r3, [r7, #16]
   return(result);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	623b      	str	r3, [r7, #32]
 8006b10:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	69f9      	ldr	r1, [r7, #28]
 8006b14:	6a3a      	ldr	r2, [r7, #32]
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e6      	bne.n	8006af0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	461a      	mov	r2, r3
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fff3 	bl	8007b14 <UART_Start_Receive_IT>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	e000      	b.n	8006b34 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b32:	2302      	movs	r3, #2
  }
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3728      	adds	r7, #40	; 0x28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	40008000 	.word	0x40008000

08006b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b0ba      	sub	sp, #232	; 0xe8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b6e:	4013      	ands	r3, r2
 8006b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11b      	bne.n	8006bb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d015      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 82d6 	beq.w	8007156 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
      }
      return;
 8006bb2:	e2d0      	b.n	8007156 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 811f 	beq.w	8006dfc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006bbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bc2:	4b8b      	ldr	r3, [pc, #556]	; (8006df0 <HAL_UART_IRQHandler+0x2b0>)
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006bca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bce:	4b89      	ldr	r3, [pc, #548]	; (8006df4 <HAL_UART_IRQHandler+0x2b4>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8112 	beq.w	8006dfc <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d011      	beq.n	8006c08 <HAL_UART_IRQHandler+0xc8>
 8006be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfe:	f043 0201 	orr.w	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d011      	beq.n	8006c38 <HAL_UART_IRQHandler+0xf8>
 8006c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00b      	beq.n	8006c38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2202      	movs	r2, #2
 8006c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2e:	f043 0204 	orr.w	r2, r3, #4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d011      	beq.n	8006c68 <HAL_UART_IRQHandler+0x128>
 8006c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00b      	beq.n	8006c68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2204      	movs	r2, #4
 8006c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c5e:	f043 0202 	orr.w	r2, r3, #2
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d017      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d105      	bne.n	8006c8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c84:	4b5a      	ldr	r3, [pc, #360]	; (8006df0 <HAL_UART_IRQHandler+0x2b0>)
 8006c86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2208      	movs	r2, #8
 8006c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9a:	f043 0208 	orr.w	r2, r3, #8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d012      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x196>
 8006cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00c      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ccc:	f043 0220 	orr.w	r2, r3, #32
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 823c 	beq.w	800715a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d013      	beq.n	8006d16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d105      	bne.n	8006d06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d007      	beq.n	8006d16 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d005      	beq.n	8006d3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d04f      	beq.n	8006dda <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 f814 	bl	8007d68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d141      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1d9      	bne.n	8006d4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d013      	beq.n	8006dca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da6:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <HAL_UART_IRQHandler+0x2b8>)
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fc fbcf 	bl	8003552 <HAL_DMA_Abort_IT>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d017      	beq.n	8006dea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	e00f      	b.n	8006dea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f9da 	bl	8007184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd0:	e00b      	b.n	8006dea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f9d6 	bl	8007184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	e007      	b.n	8006dea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f9d2 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006de8:	e1b7      	b.n	800715a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dea:	bf00      	nop
    return;
 8006dec:	e1b5      	b.n	800715a <HAL_UART_IRQHandler+0x61a>
 8006dee:	bf00      	nop
 8006df0:	10000001 	.word	0x10000001
 8006df4:	04000120 	.word	0x04000120
 8006df8:	08007e35 	.word	0x08007e35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	f040 814a 	bne.w	800709a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0a:	f003 0310 	and.w	r3, r3, #16
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8143 	beq.w	800709a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 813c 	beq.w	800709a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2210      	movs	r2, #16
 8006e28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	f040 80b5 	bne.w	8006fa4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 8187 	beq.w	800715e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	f080 817f 	bcs.w	800715e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 8086 	bne.w	8006f88 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1da      	bne.n	8006e7c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e1      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3308      	adds	r3, #8
 8006f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e3      	bne.n	8006f02 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f58:	f023 0310 	bic.w	r3, r3, #16
 8006f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e4      	bne.n	8006f48 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fc fa89 	bl	800349a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f8fb 	bl	8007198 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fa2:	e0dc      	b.n	800715e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 80ce 	beq.w	8007162 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006fc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 80c9 	beq.w	8007162 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ff4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e4      	bne.n	8006fd0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3308      	adds	r3, #8
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	623b      	str	r3, [r7, #32]
   return(result);
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800702e:	633a      	str	r2, [r7, #48]	; 0x30
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e1      	bne.n	8007006 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	60fb      	str	r3, [r7, #12]
   return(result);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0310 	bic.w	r3, r3, #16
 800706a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	69b9      	ldr	r1, [r7, #24]
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	617b      	str	r3, [r7, #20]
   return(result);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e4      	bne.n	8007056 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800708c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f880 	bl	8007198 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007098:	e063      	b.n	8007162 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800709a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00e      	beq.n	80070c4 <HAL_UART_IRQHandler+0x584>
 80070a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fb5f 	bl	8008780 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070c2:	e051      	b.n	8007168 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d014      	beq.n	80070fa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d03a      	beq.n	8007166 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
    }
    return;
 80070f8:	e035      	b.n	8007166 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_UART_IRQHandler+0x5da>
 8007106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fea4 	bl	8007e60 <UART_EndTransmit_IT>
    return;
 8007118:	e026      	b.n	8007168 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <HAL_UART_IRQHandler+0x5fa>
 8007126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800712a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fb38 	bl	80087a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007138:	e016      	b.n	8007168 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d010      	beq.n	8007168 <HAL_UART_IRQHandler+0x628>
 8007146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714a:	2b00      	cmp	r3, #0
 800714c:	da0c      	bge.n	8007168 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fb20 	bl	8008794 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007154:	e008      	b.n	8007168 <HAL_UART_IRQHandler+0x628>
      return;
 8007156:	bf00      	nop
 8007158:	e006      	b.n	8007168 <HAL_UART_IRQHandler+0x628>
    return;
 800715a:	bf00      	nop
 800715c:	e004      	b.n	8007168 <HAL_UART_IRQHandler+0x628>
      return;
 800715e:	bf00      	nop
 8007160:	e002      	b.n	8007168 <HAL_UART_IRQHandler+0x628>
      return;
 8007162:	bf00      	nop
 8007164:	e000      	b.n	8007168 <HAL_UART_IRQHandler+0x628>
    return;
 8007166:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007168:	37e8      	adds	r7, #232	; 0xe8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop

08007170 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b4:	b08c      	sub	sp, #48	; 0x30
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4baa      	ldr	r3, [pc, #680]	; (8007488 <UART_SetConfig+0x2d8>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a9f      	ldr	r2, [pc, #636]	; (800748c <UART_SetConfig+0x2dc>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007218:	4313      	orrs	r3, r2
 800721a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007226:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007230:	430b      	orrs	r3, r1
 8007232:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	f023 010f 	bic.w	r1, r3, #15
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a90      	ldr	r2, [pc, #576]	; (8007490 <UART_SetConfig+0x2e0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d125      	bne.n	80072a0 <UART_SetConfig+0xf0>
 8007254:	4b8f      	ldr	r3, [pc, #572]	; (8007494 <UART_SetConfig+0x2e4>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b03      	cmp	r3, #3
 8007260:	d81a      	bhi.n	8007298 <UART_SetConfig+0xe8>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <UART_SetConfig+0xb8>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	08007279 	.word	0x08007279
 800726c:	08007289 	.word	0x08007289
 8007270:	08007281 	.word	0x08007281
 8007274:	08007291 	.word	0x08007291
 8007278:	2301      	movs	r3, #1
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727e:	e116      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007280:	2302      	movs	r3, #2
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007286:	e112      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007288:	2304      	movs	r3, #4
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728e:	e10e      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007290:	2308      	movs	r3, #8
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007296:	e10a      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007298:	2310      	movs	r3, #16
 800729a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729e:	e106      	b.n	80074ae <UART_SetConfig+0x2fe>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a7c      	ldr	r2, [pc, #496]	; (8007498 <UART_SetConfig+0x2e8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d138      	bne.n	800731c <UART_SetConfig+0x16c>
 80072aa:	4b7a      	ldr	r3, [pc, #488]	; (8007494 <UART_SetConfig+0x2e4>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	f003 030c 	and.w	r3, r3, #12
 80072b4:	2b0c      	cmp	r3, #12
 80072b6:	d82d      	bhi.n	8007314 <UART_SetConfig+0x164>
 80072b8:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <UART_SetConfig+0x110>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072f5 	.word	0x080072f5
 80072c4:	08007315 	.word	0x08007315
 80072c8:	08007315 	.word	0x08007315
 80072cc:	08007315 	.word	0x08007315
 80072d0:	08007305 	.word	0x08007305
 80072d4:	08007315 	.word	0x08007315
 80072d8:	08007315 	.word	0x08007315
 80072dc:	08007315 	.word	0x08007315
 80072e0:	080072fd 	.word	0x080072fd
 80072e4:	08007315 	.word	0x08007315
 80072e8:	08007315 	.word	0x08007315
 80072ec:	08007315 	.word	0x08007315
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fa:	e0d8      	b.n	80074ae <UART_SetConfig+0x2fe>
 80072fc:	2302      	movs	r3, #2
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007302:	e0d4      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007304:	2304      	movs	r3, #4
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800730a:	e0d0      	b.n	80074ae <UART_SetConfig+0x2fe>
 800730c:	2308      	movs	r3, #8
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007312:	e0cc      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007314:	2310      	movs	r3, #16
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731a:	e0c8      	b.n	80074ae <UART_SetConfig+0x2fe>
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a5e      	ldr	r2, [pc, #376]	; (800749c <UART_SetConfig+0x2ec>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d125      	bne.n	8007372 <UART_SetConfig+0x1c2>
 8007326:	4b5b      	ldr	r3, [pc, #364]	; (8007494 <UART_SetConfig+0x2e4>)
 8007328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007330:	2b30      	cmp	r3, #48	; 0x30
 8007332:	d016      	beq.n	8007362 <UART_SetConfig+0x1b2>
 8007334:	2b30      	cmp	r3, #48	; 0x30
 8007336:	d818      	bhi.n	800736a <UART_SetConfig+0x1ba>
 8007338:	2b20      	cmp	r3, #32
 800733a:	d00a      	beq.n	8007352 <UART_SetConfig+0x1a2>
 800733c:	2b20      	cmp	r3, #32
 800733e:	d814      	bhi.n	800736a <UART_SetConfig+0x1ba>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <UART_SetConfig+0x19a>
 8007344:	2b10      	cmp	r3, #16
 8007346:	d008      	beq.n	800735a <UART_SetConfig+0x1aa>
 8007348:	e00f      	b.n	800736a <UART_SetConfig+0x1ba>
 800734a:	2300      	movs	r3, #0
 800734c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007350:	e0ad      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007352:	2302      	movs	r3, #2
 8007354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007358:	e0a9      	b.n	80074ae <UART_SetConfig+0x2fe>
 800735a:	2304      	movs	r3, #4
 800735c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007360:	e0a5      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007362:	2308      	movs	r3, #8
 8007364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007368:	e0a1      	b.n	80074ae <UART_SetConfig+0x2fe>
 800736a:	2310      	movs	r3, #16
 800736c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007370:	e09d      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a4a      	ldr	r2, [pc, #296]	; (80074a0 <UART_SetConfig+0x2f0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d125      	bne.n	80073c8 <UART_SetConfig+0x218>
 800737c:	4b45      	ldr	r3, [pc, #276]	; (8007494 <UART_SetConfig+0x2e4>)
 800737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007386:	2bc0      	cmp	r3, #192	; 0xc0
 8007388:	d016      	beq.n	80073b8 <UART_SetConfig+0x208>
 800738a:	2bc0      	cmp	r3, #192	; 0xc0
 800738c:	d818      	bhi.n	80073c0 <UART_SetConfig+0x210>
 800738e:	2b80      	cmp	r3, #128	; 0x80
 8007390:	d00a      	beq.n	80073a8 <UART_SetConfig+0x1f8>
 8007392:	2b80      	cmp	r3, #128	; 0x80
 8007394:	d814      	bhi.n	80073c0 <UART_SetConfig+0x210>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <UART_SetConfig+0x1f0>
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d008      	beq.n	80073b0 <UART_SetConfig+0x200>
 800739e:	e00f      	b.n	80073c0 <UART_SetConfig+0x210>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a6:	e082      	b.n	80074ae <UART_SetConfig+0x2fe>
 80073a8:	2302      	movs	r3, #2
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e07e      	b.n	80074ae <UART_SetConfig+0x2fe>
 80073b0:	2304      	movs	r3, #4
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b6:	e07a      	b.n	80074ae <UART_SetConfig+0x2fe>
 80073b8:	2308      	movs	r3, #8
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073be:	e076      	b.n	80074ae <UART_SetConfig+0x2fe>
 80073c0:	2310      	movs	r3, #16
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c6:	e072      	b.n	80074ae <UART_SetConfig+0x2fe>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a35      	ldr	r2, [pc, #212]	; (80074a4 <UART_SetConfig+0x2f4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d12a      	bne.n	8007428 <UART_SetConfig+0x278>
 80073d2:	4b30      	ldr	r3, [pc, #192]	; (8007494 <UART_SetConfig+0x2e4>)
 80073d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e0:	d01a      	beq.n	8007418 <UART_SetConfig+0x268>
 80073e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e6:	d81b      	bhi.n	8007420 <UART_SetConfig+0x270>
 80073e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ec:	d00c      	beq.n	8007408 <UART_SetConfig+0x258>
 80073ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f2:	d815      	bhi.n	8007420 <UART_SetConfig+0x270>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <UART_SetConfig+0x250>
 80073f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fc:	d008      	beq.n	8007410 <UART_SetConfig+0x260>
 80073fe:	e00f      	b.n	8007420 <UART_SetConfig+0x270>
 8007400:	2300      	movs	r3, #0
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007406:	e052      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740e:	e04e      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007416:	e04a      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741e:	e046      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007426:	e042      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a17      	ldr	r2, [pc, #92]	; (800748c <UART_SetConfig+0x2dc>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d13a      	bne.n	80074a8 <UART_SetConfig+0x2f8>
 8007432:	4b18      	ldr	r3, [pc, #96]	; (8007494 <UART_SetConfig+0x2e4>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800743c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007440:	d01a      	beq.n	8007478 <UART_SetConfig+0x2c8>
 8007442:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007446:	d81b      	bhi.n	8007480 <UART_SetConfig+0x2d0>
 8007448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800744c:	d00c      	beq.n	8007468 <UART_SetConfig+0x2b8>
 800744e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007452:	d815      	bhi.n	8007480 <UART_SetConfig+0x2d0>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <UART_SetConfig+0x2b0>
 8007458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745c:	d008      	beq.n	8007470 <UART_SetConfig+0x2c0>
 800745e:	e00f      	b.n	8007480 <UART_SetConfig+0x2d0>
 8007460:	2300      	movs	r3, #0
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007466:	e022      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007468:	2302      	movs	r3, #2
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746e:	e01e      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007470:	2304      	movs	r3, #4
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007476:	e01a      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007478:	2308      	movs	r3, #8
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800747e:	e016      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007480:	2310      	movs	r3, #16
 8007482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007486:	e012      	b.n	80074ae <UART_SetConfig+0x2fe>
 8007488:	cfff69f3 	.word	0xcfff69f3
 800748c:	40008000 	.word	0x40008000
 8007490:	40013800 	.word	0x40013800
 8007494:	40021000 	.word	0x40021000
 8007498:	40004400 	.word	0x40004400
 800749c:	40004800 	.word	0x40004800
 80074a0:	40004c00 	.word	0x40004c00
 80074a4:	40005000 	.word	0x40005000
 80074a8:	2310      	movs	r3, #16
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4aae      	ldr	r2, [pc, #696]	; (800776c <UART_SetConfig+0x5bc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	f040 8097 	bne.w	80075e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074be:	2b08      	cmp	r3, #8
 80074c0:	d823      	bhi.n	800750a <UART_SetConfig+0x35a>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <UART_SetConfig+0x318>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	0800750b 	.word	0x0800750b
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	0800750b 	.word	0x0800750b
 80074d8:	080074fb 	.word	0x080074fb
 80074dc:	0800750b 	.word	0x0800750b
 80074e0:	0800750b 	.word	0x0800750b
 80074e4:	0800750b 	.word	0x0800750b
 80074e8:	08007503 	.word	0x08007503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ec:	f7fd fb92 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 80074f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074f2:	e010      	b.n	8007516 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f4:	4b9e      	ldr	r3, [pc, #632]	; (8007770 <UART_SetConfig+0x5c0>)
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074f8:	e00d      	b.n	8007516 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fa:	f7fd faf3 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 80074fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007500:	e009      	b.n	8007516 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007508:	e005      	b.n	8007516 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007514:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 8130 	beq.w	800777e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	4a94      	ldr	r2, [pc, #592]	; (8007774 <UART_SetConfig+0x5c4>)
 8007524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007528:	461a      	mov	r2, r3
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007530:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	4613      	mov	r3, r2
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	4413      	add	r3, r2
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	429a      	cmp	r2, r3
 8007540:	d305      	bcc.n	800754e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	429a      	cmp	r2, r3
 800754c:	d903      	bls.n	8007556 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007554:	e113      	b.n	800777e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	2200      	movs	r2, #0
 800755a:	60bb      	str	r3, [r7, #8]
 800755c:	60fa      	str	r2, [r7, #12]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	4a84      	ldr	r2, [pc, #528]	; (8007774 <UART_SetConfig+0x5c4>)
 8007564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007568:	b29b      	uxth	r3, r3
 800756a:	2200      	movs	r2, #0
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007574:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007578:	f7f9 fb1e 	bl	8000bb8 <__aeabi_uldivmod>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4610      	mov	r0, r2
 8007582:	4619      	mov	r1, r3
 8007584:	f04f 0200 	mov.w	r2, #0
 8007588:	f04f 0300 	mov.w	r3, #0
 800758c:	020b      	lsls	r3, r1, #8
 800758e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007592:	0202      	lsls	r2, r0, #8
 8007594:	6979      	ldr	r1, [r7, #20]
 8007596:	6849      	ldr	r1, [r1, #4]
 8007598:	0849      	lsrs	r1, r1, #1
 800759a:	2000      	movs	r0, #0
 800759c:	460c      	mov	r4, r1
 800759e:	4605      	mov	r5, r0
 80075a0:	eb12 0804 	adds.w	r8, r2, r4
 80075a4:	eb43 0905 	adc.w	r9, r3, r5
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	469a      	mov	sl, r3
 80075b0:	4693      	mov	fp, r2
 80075b2:	4652      	mov	r2, sl
 80075b4:	465b      	mov	r3, fp
 80075b6:	4640      	mov	r0, r8
 80075b8:	4649      	mov	r1, r9
 80075ba:	f7f9 fafd 	bl	8000bb8 <__aeabi_uldivmod>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4613      	mov	r3, r2
 80075c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075cc:	d308      	bcc.n	80075e0 <UART_SetConfig+0x430>
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d4:	d204      	bcs.n	80075e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6a3a      	ldr	r2, [r7, #32]
 80075dc:	60da      	str	r2, [r3, #12]
 80075de:	e0ce      	b.n	800777e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075e6:	e0ca      	b.n	800777e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f0:	d166      	bne.n	80076c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80075f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d827      	bhi.n	800764a <UART_SetConfig+0x49a>
 80075fa:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <UART_SetConfig+0x450>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007625 	.word	0x08007625
 8007604:	0800762d 	.word	0x0800762d
 8007608:	08007635 	.word	0x08007635
 800760c:	0800764b 	.word	0x0800764b
 8007610:	0800763b 	.word	0x0800763b
 8007614:	0800764b 	.word	0x0800764b
 8007618:	0800764b 	.word	0x0800764b
 800761c:	0800764b 	.word	0x0800764b
 8007620:	08007643 	.word	0x08007643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007624:	f7fd faf6 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 8007628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800762a:	e014      	b.n	8007656 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800762c:	f7fd fb08 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 8007630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007632:	e010      	b.n	8007656 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007634:	4b4e      	ldr	r3, [pc, #312]	; (8007770 <UART_SetConfig+0x5c0>)
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007638:	e00d      	b.n	8007656 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800763a:	f7fd fa53 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 800763e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007640:	e009      	b.n	8007656 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007648:	e005      	b.n	8007656 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 8090 	beq.w	800777e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	4a44      	ldr	r2, [pc, #272]	; (8007774 <UART_SetConfig+0x5c4>)
 8007664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007668:	461a      	mov	r2, r3
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007670:	005a      	lsls	r2, r3, #1
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	441a      	add	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007682:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	2b0f      	cmp	r3, #15
 8007688:	d916      	bls.n	80076b8 <UART_SetConfig+0x508>
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007690:	d212      	bcs.n	80076b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	b29b      	uxth	r3, r3
 8007696:	f023 030f 	bic.w	r3, r3, #15
 800769a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	8bfb      	ldrh	r3, [r7, #30]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	8bfa      	ldrh	r2, [r7, #30]
 80076b4:	60da      	str	r2, [r3, #12]
 80076b6:	e062      	b.n	800777e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076be:	e05e      	b.n	800777e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d828      	bhi.n	800771a <UART_SetConfig+0x56a>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <UART_SetConfig+0x520>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	080076fd 	.word	0x080076fd
 80076d8:	08007705 	.word	0x08007705
 80076dc:	0800771b 	.word	0x0800771b
 80076e0:	0800770b 	.word	0x0800770b
 80076e4:	0800771b 	.word	0x0800771b
 80076e8:	0800771b 	.word	0x0800771b
 80076ec:	0800771b 	.word	0x0800771b
 80076f0:	08007713 	.word	0x08007713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076f4:	f7fd fa8e 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 80076f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076fa:	e014      	b.n	8007726 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076fc:	f7fd faa0 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 8007700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007702:	e010      	b.n	8007726 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007704:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <UART_SetConfig+0x5c0>)
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007708:	e00d      	b.n	8007726 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800770a:	f7fd f9eb 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 800770e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007710:	e009      	b.n	8007726 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007718:	e005      	b.n	8007726 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007724:	bf00      	nop
    }

    if (pclk != 0U)
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d028      	beq.n	800777e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	4a10      	ldr	r2, [pc, #64]	; (8007774 <UART_SetConfig+0x5c4>)
 8007732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007736:	461a      	mov	r2, r3
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	fbb3 f2f2 	udiv	r2, r3, r2
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	441a      	add	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	fbb2 f3f3 	udiv	r3, r2, r3
 800774e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	2b0f      	cmp	r3, #15
 8007754:	d910      	bls.n	8007778 <UART_SetConfig+0x5c8>
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775c:	d20c      	bcs.n	8007778 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	b29a      	uxth	r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e009      	b.n	800777e <UART_SetConfig+0x5ce>
 800776a:	bf00      	nop
 800776c:	40008000 	.word	0x40008000
 8007770:	00f42400 	.word	0x00f42400
 8007774:	0800a760 	.word	0x0800a760
      }
      else
      {
        ret = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2201      	movs	r2, #1
 8007782:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2201      	movs	r2, #1
 800778a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2200      	movs	r2, #0
 8007792:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2200      	movs	r2, #0
 8007798:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800779a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3730      	adds	r7, #48	; 0x30
 80077a2:	46bd      	mov	sp, r7
 80077a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01a      	beq.n	80078be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a6:	d10a      	bne.n	80078be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	605a      	str	r2, [r3, #4]
  }
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078fc:	f7fa fda6 	bl	800244c <HAL_GetTick>
 8007900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b08      	cmp	r3, #8
 800790e:	d10e      	bne.n	800792e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f82f 	bl	8007982 <UART_WaitOnFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e025      	b.n	800797a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b04      	cmp	r3, #4
 800793a:	d10e      	bne.n	800795a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800793c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f819 	bl	8007982 <UART_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e00f      	b.n	800797a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b09c      	sub	sp, #112	; 0x70
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	4613      	mov	r3, r2
 8007990:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007992:	e0a9      	b.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	f000 80a5 	beq.w	8007ae8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800799e:	f7fa fd55 	bl	800244c <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d302      	bcc.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80079ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d140      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079c8:	667b      	str	r3, [r7, #100]	; 0x64
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e6      	bne.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	663b      	str	r3, [r7, #96]	; 0x60
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a06:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e5      	bne.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e069      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d051      	beq.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a52:	d149      	bne.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e6      	bne.n	8007a5e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ab0:	623a      	str	r2, [r7, #32]
 8007ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	69f9      	ldr	r1, [r7, #28]
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e5      	bne.n	8007a90 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e010      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69da      	ldr	r2, [r3, #28]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4013      	ands	r3, r2
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	f43f af46 	beq.w	8007994 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3770      	adds	r7, #112	; 0x70
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b0a3      	sub	sp, #140	; 0x8c
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	88fa      	ldrh	r2, [r7, #6]
 8007b34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b46:	d10e      	bne.n	8007b66 <UART_Start_Receive_IT+0x52>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <UART_Start_Receive_IT+0x48>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b5a:	e02d      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	22ff      	movs	r2, #255	; 0xff
 8007b60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b64:	e028      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <UART_Start_Receive_IT+0x76>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <UART_Start_Receive_IT+0x6c>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	22ff      	movs	r2, #255	; 0xff
 8007b7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b7e:	e01b      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	227f      	movs	r2, #127	; 0x7f
 8007b84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b88:	e016      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b92:	d10d      	bne.n	8007bb0 <UART_Start_Receive_IT+0x9c>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d104      	bne.n	8007ba6 <UART_Start_Receive_IT+0x92>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	227f      	movs	r2, #127	; 0x7f
 8007ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ba4:	e008      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	223f      	movs	r2, #63	; 0x3f
 8007baa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bae:	e003      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2222      	movs	r2, #34	; 0x22
 8007bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3308      	adds	r3, #8
 8007bce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3308      	adds	r3, #8
 8007be8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007bec:	673a      	str	r2, [r7, #112]	; 0x70
 8007bee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007bf2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e3      	bne.n	8007bc8 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c08:	d153      	bne.n	8007cb2 <UART_Start_Receive_IT+0x19e>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c10:	88fa      	ldrh	r2, [r7, #6]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d34d      	bcc.n	8007cb2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1e:	d107      	bne.n	8007c30 <UART_Start_Receive_IT+0x11c>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d103      	bne.n	8007c30 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4a4b      	ldr	r2, [pc, #300]	; (8007d58 <UART_Start_Receive_IT+0x244>)
 8007c2c:	671a      	str	r2, [r3, #112]	; 0x70
 8007c2e:	e002      	b.n	8007c36 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a4a      	ldr	r2, [pc, #296]	; (8007d5c <UART_Start_Receive_IT+0x248>)
 8007c34:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d01a      	beq.n	8007c7c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c6a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e4      	bne.n	8007c46 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3308      	adds	r3, #8
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c9c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c9e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e5      	bne.n	8007c7c <UART_Start_Receive_IT+0x168>
 8007cb0:	e04a      	b.n	8007d48 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cba:	d107      	bne.n	8007ccc <UART_Start_Receive_IT+0x1b8>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d103      	bne.n	8007ccc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a26      	ldr	r2, [pc, #152]	; (8007d60 <UART_Start_Receive_IT+0x24c>)
 8007cc8:	671a      	str	r2, [r3, #112]	; 0x70
 8007cca:	e002      	b.n	8007cd2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4a25      	ldr	r2, [pc, #148]	; (8007d64 <UART_Start_Receive_IT+0x250>)
 8007cd0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d019      	beq.n	8007d16 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d00:	637b      	str	r3, [r7, #52]	; 0x34
 8007d02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e6      	bne.n	8007ce2 <UART_Start_Receive_IT+0x1ce>
 8007d14:	e018      	b.n	8007d48 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	613b      	str	r3, [r7, #16]
   return(result);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f043 0320 	orr.w	r3, r3, #32
 8007d2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d34:	623b      	str	r3, [r7, #32]
 8007d36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	69f9      	ldr	r1, [r7, #28]
 8007d3a:	6a3a      	ldr	r2, [r7, #32]
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e6      	bne.n	8007d16 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	378c      	adds	r7, #140	; 0x8c
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	0800847d 	.word	0x0800847d
 8007d5c:	08008181 	.word	0x08008181
 8007d60:	0800801b 	.word	0x0800801b
 8007d64:	08007eb7 	.word	0x08007eb7

08007d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b095      	sub	sp, #84	; 0x54
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e6      	bne.n	8007d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3308      	adds	r3, #8
 8007da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007db8:	f023 0301 	bic.w	r3, r3, #1
 8007dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e3      	bne.n	8007da2 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d118      	bne.n	8007e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f023 0310 	bic.w	r3, r3, #16
 8007df6:	647b      	str	r3, [r7, #68]	; 0x44
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6979      	ldr	r1, [r7, #20]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e6      	bne.n	8007de2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007e28:	bf00      	nop
 8007e2a:	3754      	adds	r7, #84	; 0x54
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff f996 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e7c:	61fb      	str	r3, [r7, #28]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	61bb      	str	r3, [r7, #24]
 8007e88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6979      	ldr	r1, [r7, #20]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	613b      	str	r3, [r7, #16]
   return(result);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e6      	bne.n	8007e68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff f961 	bl	8007170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eae:	bf00      	nop
 8007eb0:	3720      	adds	r7, #32
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b096      	sub	sp, #88	; 0x58
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ec4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ece:	2b22      	cmp	r3, #34	; 0x22
 8007ed0:	f040 8095 	bne.w	8007ffe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007eda:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ede:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007ee2:	b2d9      	uxtb	r1, r3
 8007ee4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eee:	400a      	ands	r2, r1
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d17a      	bne.n	8008012 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f30:	653b      	str	r3, [r7, #80]	; 0x50
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e6      	bne.n	8007f1c <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3308      	adds	r3, #8
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e5      	bne.n	8007f4e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d12e      	bne.n	8007ff6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0310 	bic.w	r3, r3, #16
 8007fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	69b9      	ldr	r1, [r7, #24]
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e6      	bne.n	8007f9e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	f003 0310 	and.w	r3, r3, #16
 8007fda:	2b10      	cmp	r3, #16
 8007fdc:	d103      	bne.n	8007fe6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2210      	movs	r2, #16
 8007fe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff f8d2 	bl	8007198 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ff4:	e00d      	b.n	8008012 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7f9 fc12 	bl	8001820 <HAL_UART_RxCpltCallback>
}
 8007ffc:	e009      	b.n	8008012 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	8b1b      	ldrh	r3, [r3, #24]
 8008004:	b29a      	uxth	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0208 	orr.w	r2, r2, #8
 800800e:	b292      	uxth	r2, r2
 8008010:	831a      	strh	r2, [r3, #24]
}
 8008012:	bf00      	nop
 8008014:	3758      	adds	r7, #88	; 0x58
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b096      	sub	sp, #88	; 0x58
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008028:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008032:	2b22      	cmp	r3, #34	; 0x22
 8008034:	f040 8095 	bne.w	8008162 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800803e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008046:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008048:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800804c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008050:	4013      	ands	r3, r2
 8008052:	b29a      	uxth	r2, r3
 8008054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008056:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805c:	1c9a      	adds	r2, r3, #2
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b01      	subs	r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800807a:	b29b      	uxth	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d17a      	bne.n	8008176 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809e:	643b      	str	r3, [r7, #64]	; 0x40
 80080a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e6      	bne.n	8008080 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e5      	bne.n	80080b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d12e      	bne.n	800815a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f023 0310 	bic.w	r3, r3, #16
 8008116:	647b      	str	r3, [r7, #68]	; 0x44
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008120:	61bb      	str	r3, [r7, #24]
 8008122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6979      	ldr	r1, [r7, #20]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	613b      	str	r3, [r7, #16]
   return(result);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e6      	bne.n	8008102 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f003 0310 	and.w	r3, r3, #16
 800813e:	2b10      	cmp	r3, #16
 8008140:	d103      	bne.n	800814a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2210      	movs	r2, #16
 8008148:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff f820 	bl	8007198 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008158:	e00d      	b.n	8008176 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7f9 fb60 	bl	8001820 <HAL_UART_RxCpltCallback>
}
 8008160:	e009      	b.n	8008176 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	8b1b      	ldrh	r3, [r3, #24]
 8008168:	b29a      	uxth	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0208 	orr.w	r2, r2, #8
 8008172:	b292      	uxth	r2, r2
 8008174:	831a      	strh	r2, [r3, #24]
}
 8008176:	bf00      	nop
 8008178:	3758      	adds	r7, #88	; 0x58
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b0a6      	sub	sp, #152	; 0x98
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800818e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b6:	2b22      	cmp	r3, #34	; 0x22
 80081b8:	f040 814f 	bne.w	800845a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081c6:	e0f6      	b.n	80083b6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081ce:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081d2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80081d6:	b2d9      	uxtb	r1, r3
 80081d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e2:	400a      	ands	r2, r1
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800820e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	2b00      	cmp	r3, #0
 8008218:	d053      	beq.n	80082c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800821a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d011      	beq.n	800824a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800822a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2201      	movs	r2, #1
 8008238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008240:	f043 0201 	orr.w	r2, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800824a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d011      	beq.n	800827a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2202      	movs	r2, #2
 8008268:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008270:	f043 0204 	orr.w	r2, r3, #4
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800827a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d011      	beq.n	80082aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2204      	movs	r2, #4
 8008298:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a0:	f043 0202 	orr.w	r2, r3, #2
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d006      	beq.n	80082c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7fe ff65 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d173      	bne.n	80083b6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80082dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082f2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80082f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80082fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e4      	bne.n	80082ce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3308      	adds	r3, #8
 800830a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800831a:	f023 0301 	bic.w	r3, r3, #1
 800831e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008328:	657a      	str	r2, [r7, #84]	; 0x54
 800832a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800832e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e3      	bne.n	8008304 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d12e      	bne.n	80083b0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	f023 0310 	bic.w	r3, r3, #16
 800836c:	67bb      	str	r3, [r7, #120]	; 0x78
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008376:	643b      	str	r3, [r7, #64]	; 0x40
 8008378:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800837c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e6      	bne.n	8008358 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b10      	cmp	r3, #16
 8008396:	d103      	bne.n	80083a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2210      	movs	r2, #16
 800839e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fe fef5 	bl	8007198 <HAL_UARTEx_RxEventCallback>
 80083ae:	e002      	b.n	80083b6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7f9 fa35 	bl	8001820 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d006      	beq.n	80083cc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80083be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f47f aefe 	bne.w	80081c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80083d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d047      	beq.n	800846e <UART_RxISR_8BIT_FIFOEN+0x2ee>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d240      	bcs.n	800846e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3308      	adds	r3, #8
 80083f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008402:	673b      	str	r3, [r7, #112]	; 0x70
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3308      	adds	r3, #8
 800840a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800840c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e5      	bne.n	80083ec <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a15      	ldr	r2, [pc, #84]	; (8008478 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8008424:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	60bb      	str	r3, [r7, #8]
   return(result);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f043 0320 	orr.w	r3, r3, #32
 800843a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008444:	61bb      	str	r3, [r7, #24]
 8008446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6979      	ldr	r1, [r7, #20]
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	613b      	str	r3, [r7, #16]
   return(result);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e6      	bne.n	8008426 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008458:	e009      	b.n	800846e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	8b1b      	ldrh	r3, [r3, #24]
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0208 	orr.w	r2, r2, #8
 800846a:	b292      	uxth	r2, r2
 800846c:	831a      	strh	r2, [r3, #24]
}
 800846e:	bf00      	nop
 8008470:	3798      	adds	r7, #152	; 0x98
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	08007eb7 	.word	0x08007eb7

0800847c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b0a8      	sub	sp, #160	; 0xa0
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800848a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	2b22      	cmp	r3, #34	; 0x22
 80084b4:	f040 8153 	bne.w	800875e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084c2:	e0fa      	b.n	80086ba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80084ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80084d6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80084da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80084de:	4013      	ands	r3, r2
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800850e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	2b00      	cmp	r3, #0
 8008518:	d053      	beq.n	80085c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800851a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d011      	beq.n	800854a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008526:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800852a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00b      	beq.n	800854a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2201      	movs	r2, #1
 8008538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008540:	f043 0201 	orr.w	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800854a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d011      	beq.n	800857a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008556:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2202      	movs	r2, #2
 8008568:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008570:	f043 0204 	orr.w	r2, r3, #4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800857a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d011      	beq.n	80085aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008586:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00b      	beq.n	80085aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2204      	movs	r2, #4
 8008598:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a0:	f043 0202 	orr.w	r2, r3, #2
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d006      	beq.n	80085c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7fe fde5 	bl	8007184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d175      	bne.n	80086ba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e4      	bne.n	80085ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800862c:	65ba      	str	r2, [r7, #88]	; 0x58
 800862e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800863a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e1      	bne.n	8008604 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2220      	movs	r2, #32
 8008644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008652:	2b01      	cmp	r3, #1
 8008654:	d12e      	bne.n	80086b4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800866a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866c:	f023 0310 	bic.w	r3, r3, #16
 8008670:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
 800867c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e6      	bne.n	800865c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	f003 0310 	and.w	r3, r3, #16
 8008698:	2b10      	cmp	r3, #16
 800869a:	d103      	bne.n	80086a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2210      	movs	r2, #16
 80086a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7fe fd73 	bl	8007198 <HAL_UARTEx_RxEventCallback>
 80086b2:	e002      	b.n	80086ba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7f9 f8b3 	bl	8001820 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d006      	beq.n	80086d0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80086c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f47f aefa 	bne.w	80084c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d047      	beq.n	8008772 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d240      	bcs.n	8008772 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3308      	adds	r3, #8
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	623b      	str	r3, [r7, #32]
   return(result);
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008706:	677b      	str	r3, [r7, #116]	; 0x74
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3308      	adds	r3, #8
 800870e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008710:	633a      	str	r2, [r7, #48]	; 0x30
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e5      	bne.n	80086f0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a15      	ldr	r2, [pc, #84]	; (800877c <UART_RxISR_16BIT_FIFOEN+0x300>)
 8008728:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	60fb      	str	r3, [r7, #12]
   return(result);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f043 0320 	orr.w	r3, r3, #32
 800873e:	673b      	str	r3, [r7, #112]	; 0x70
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	69b9      	ldr	r1, [r7, #24]
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	617b      	str	r3, [r7, #20]
   return(result);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e6      	bne.n	800872a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800875c:	e009      	b.n	8008772 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	8b1b      	ldrh	r3, [r3, #24]
 8008764:	b29a      	uxth	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0208 	orr.w	r2, r2, #8
 800876e:	b292      	uxth	r2, r2
 8008770:	831a      	strh	r2, [r3, #24]
}
 8008772:	bf00      	nop
 8008774:	37a0      	adds	r7, #160	; 0xa0
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	0800801b 	.word	0x0800801b

08008780 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d101      	bne.n	80087d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80087ce:	2302      	movs	r3, #2
 80087d0:	e027      	b.n	8008822 <HAL_UARTEx_DisableFifoMode+0x66>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2224      	movs	r2, #36	; 0x24
 80087de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0201 	bic.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008800:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008842:	2302      	movs	r3, #2
 8008844:	e02d      	b.n	80088a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2224      	movs	r2, #36	; 0x24
 8008852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0201 	bic.w	r2, r2, #1
 800886c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f850 	bl	8008928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2220      	movs	r2, #32
 8008894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088be:	2302      	movs	r3, #2
 80088c0:	e02d      	b.n	800891e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2224      	movs	r2, #36	; 0x24
 80088ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 0201 	bic.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f812 	bl	8008928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008934:	2b00      	cmp	r3, #0
 8008936:	d108      	bne.n	800894a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008948:	e031      	b.n	80089ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800894a:	2308      	movs	r3, #8
 800894c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800894e:	2308      	movs	r3, #8
 8008950:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	0e5b      	lsrs	r3, r3, #25
 800895a:	b2db      	uxtb	r3, r3
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	0f5b      	lsrs	r3, r3, #29
 800896a:	b2db      	uxtb	r3, r3
 800896c:	f003 0307 	and.w	r3, r3, #7
 8008970:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	7b3a      	ldrb	r2, [r7, #12]
 8008976:	4911      	ldr	r1, [pc, #68]	; (80089bc <UARTEx_SetNbDataToProcess+0x94>)
 8008978:	5c8a      	ldrb	r2, [r1, r2]
 800897a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800897e:	7b3a      	ldrb	r2, [r7, #12]
 8008980:	490f      	ldr	r1, [pc, #60]	; (80089c0 <UARTEx_SetNbDataToProcess+0x98>)
 8008982:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008984:	fb93 f3f2 	sdiv	r3, r3, r2
 8008988:	b29a      	uxth	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	7b7a      	ldrb	r2, [r7, #13]
 8008994:	4909      	ldr	r1, [pc, #36]	; (80089bc <UARTEx_SetNbDataToProcess+0x94>)
 8008996:	5c8a      	ldrb	r2, [r1, r2]
 8008998:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800899c:	7b7a      	ldrb	r2, [r7, #13]
 800899e:	4908      	ldr	r1, [pc, #32]	; (80089c0 <UARTEx_SetNbDataToProcess+0x98>)
 80089a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089ae:	bf00      	nop
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	0800a778 	.word	0x0800a778
 80089c0:	0800a780 	.word	0x0800a780

080089c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089c4:	b084      	sub	sp, #16
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	f107 001c 	add.w	r0, r7, #28
 80089d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa70 	bl	8008ec8 <USB_CoreReset>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80089ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d106      	bne.n	8008a00 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	639a      	str	r2, [r3, #56]	; 0x38
 80089fe:	e005      	b.n	8008a0c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a18:	b004      	add	sp, #16
 8008a1a:	4770      	bx	lr

08008a1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 0201 	bic.w	r2, r3, #1
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d115      	bne.n	8008a8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a6c:	2001      	movs	r0, #1
 8008a6e:	f7f9 fcf9 	bl	8002464 <HAL_Delay>
      ms++;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa17 	bl	8008eac <USB_GetMode>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d01e      	beq.n	8008ac2 <USB_SetCurrentMode+0x84>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b31      	cmp	r3, #49	; 0x31
 8008a88:	d9f0      	bls.n	8008a6c <USB_SetCurrentMode+0x2e>
 8008a8a:	e01a      	b.n	8008ac2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d115      	bne.n	8008abe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	f7f9 fce0 	bl	8002464 <HAL_Delay>
      ms++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f9fe 	bl	8008eac <USB_GetMode>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <USB_SetCurrentMode+0x84>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b31      	cmp	r3, #49	; 0x31
 8008aba:	d9f0      	bls.n	8008a9e <USB_SetCurrentMode+0x60>
 8008abc:	e001      	b.n	8008ac2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e005      	b.n	8008ace <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b32      	cmp	r3, #50	; 0x32
 8008ac6:	d101      	bne.n	8008acc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ad8:	b084      	sub	sp, #16
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008af2:	2300      	movs	r3, #0
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	e009      	b.n	8008b0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	3340      	adds	r3, #64	; 0x40
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	2b0e      	cmp	r3, #14
 8008b10:	d9f2      	bls.n	8008af8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11c      	bne.n	8008b52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b26:	f043 0302 	orr.w	r3, r3, #2
 8008b2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	e005      	b.n	8008b5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b64:	461a      	mov	r2, r3
 8008b66:	2300      	movs	r3, #0
 8008b68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b70:	4619      	mov	r1, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b78:	461a      	mov	r2, r3
 8008b7a:	680b      	ldr	r3, [r1, #0]
 8008b7c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b7e:	2103      	movs	r1, #3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f959 	bl	8008e38 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b86:	2110      	movs	r1, #16
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f8f1 	bl	8008d70 <USB_FlushTxFifo>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f91d 	bl	8008dd8 <USB_FlushRxFifo>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	461a      	mov	r2, r3
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	e043      	b.n	8008c5a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be8:	d118      	bne.n	8008c1c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	e013      	b.n	8008c2e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c12:	461a      	mov	r2, r3
 8008c14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e008      	b.n	8008c2e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	3301      	adds	r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d3b7      	bcc.n	8008bd2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	e043      	b.n	8008cf0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c7e:	d118      	bne.n	8008cb2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c92:	461a      	mov	r2, r3
 8008c94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	e013      	b.n	8008cc4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e008      	b.n	8008cc4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ce8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	3301      	adds	r3, #1
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d3b7      	bcc.n	8008c68 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f043 0210 	orr.w	r2, r3, #16
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	699a      	ldr	r2, [r3, #24]
 8008d2a:	4b10      	ldr	r3, [pc, #64]	; (8008d6c <USB_DevInit+0x294>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	f043 0208 	orr.w	r2, r3, #8
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d107      	bne.n	8008d5a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d52:	f043 0304 	orr.w	r3, r3, #4
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d66:	b004      	add	sp, #16
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	803c3800 	.word	0x803c3800

08008d70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <USB_FlushTxFifo+0x64>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d901      	bls.n	8008d90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e01b      	b.n	8008dc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	daf2      	bge.n	8008d7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	019b      	lsls	r3, r3, #6
 8008da0:	f043 0220 	orr.w	r2, r3, #32
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3301      	adds	r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4a08      	ldr	r2, [pc, #32]	; (8008dd4 <USB_FlushTxFifo+0x64>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d901      	bls.n	8008dba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e006      	b.n	8008dc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b20      	cmp	r3, #32
 8008dc4:	d0f0      	beq.n	8008da8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	00030d40 	.word	0x00030d40

08008dd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a11      	ldr	r2, [pc, #68]	; (8008e34 <USB_FlushRxFifo+0x5c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d901      	bls.n	8008df6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e018      	b.n	8008e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	daf2      	bge.n	8008de4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2210      	movs	r2, #16
 8008e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4a08      	ldr	r2, [pc, #32]	; (8008e34 <USB_FlushRxFifo+0x5c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d901      	bls.n	8008e1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e006      	b.n	8008e28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f003 0310 	and.w	r3, r3, #16
 8008e22:	2b10      	cmp	r3, #16
 8008e24:	d0f0      	beq.n	8008e08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	00030d40 	.word	0x00030d40

08008e38 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b085      	sub	sp, #20
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e98:	f043 0302 	orr.w	r3, r3, #2
 8008e9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	4a13      	ldr	r2, [pc, #76]	; (8008f2c <USB_CoreReset+0x64>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d901      	bls.n	8008ee6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e01b      	b.n	8008f1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	daf2      	bge.n	8008ed4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f043 0201 	orr.w	r2, r3, #1
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3301      	adds	r3, #1
 8008f02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4a09      	ldr	r2, [pc, #36]	; (8008f2c <USB_CoreReset+0x64>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d901      	bls.n	8008f10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e006      	b.n	8008f1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d0f0      	beq.n	8008efe <USB_CoreReset+0x36>

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	00030d40 	.word	0x00030d40

08008f30 <siprintf>:
 8008f30:	b40e      	push	{r1, r2, r3}
 8008f32:	b500      	push	{lr}
 8008f34:	b09c      	sub	sp, #112	; 0x70
 8008f36:	ab1d      	add	r3, sp, #116	; 0x74
 8008f38:	9002      	str	r0, [sp, #8]
 8008f3a:	9006      	str	r0, [sp, #24]
 8008f3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f40:	4809      	ldr	r0, [pc, #36]	; (8008f68 <siprintf+0x38>)
 8008f42:	9107      	str	r1, [sp, #28]
 8008f44:	9104      	str	r1, [sp, #16]
 8008f46:	4909      	ldr	r1, [pc, #36]	; (8008f6c <siprintf+0x3c>)
 8008f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4c:	9105      	str	r1, [sp, #20]
 8008f4e:	6800      	ldr	r0, [r0, #0]
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	a902      	add	r1, sp, #8
 8008f54:	f000 f992 	bl	800927c <_svfiprintf_r>
 8008f58:	9b02      	ldr	r3, [sp, #8]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	b01c      	add	sp, #112	; 0x70
 8008f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f64:	b003      	add	sp, #12
 8008f66:	4770      	bx	lr
 8008f68:	20000070 	.word	0x20000070
 8008f6c:	ffff0208 	.word	0xffff0208

08008f70 <memset>:
 8008f70:	4402      	add	r2, r0
 8008f72:	4603      	mov	r3, r0
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d100      	bne.n	8008f7a <memset+0xa>
 8008f78:	4770      	bx	lr
 8008f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f7e:	e7f9      	b.n	8008f74 <memset+0x4>

08008f80 <__errno>:
 8008f80:	4b01      	ldr	r3, [pc, #4]	; (8008f88 <__errno+0x8>)
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	20000070 	.word	0x20000070

08008f8c <__libc_init_array>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	4d0d      	ldr	r5, [pc, #52]	; (8008fc4 <__libc_init_array+0x38>)
 8008f90:	4c0d      	ldr	r4, [pc, #52]	; (8008fc8 <__libc_init_array+0x3c>)
 8008f92:	1b64      	subs	r4, r4, r5
 8008f94:	10a4      	asrs	r4, r4, #2
 8008f96:	2600      	movs	r6, #0
 8008f98:	42a6      	cmp	r6, r4
 8008f9a:	d109      	bne.n	8008fb0 <__libc_init_array+0x24>
 8008f9c:	4d0b      	ldr	r5, [pc, #44]	; (8008fcc <__libc_init_array+0x40>)
 8008f9e:	4c0c      	ldr	r4, [pc, #48]	; (8008fd0 <__libc_init_array+0x44>)
 8008fa0:	f001 fba2 	bl	800a6e8 <_init>
 8008fa4:	1b64      	subs	r4, r4, r5
 8008fa6:	10a4      	asrs	r4, r4, #2
 8008fa8:	2600      	movs	r6, #0
 8008faa:	42a6      	cmp	r6, r4
 8008fac:	d105      	bne.n	8008fba <__libc_init_array+0x2e>
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb4:	4798      	blx	r3
 8008fb6:	3601      	adds	r6, #1
 8008fb8:	e7ee      	b.n	8008f98 <__libc_init_array+0xc>
 8008fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fbe:	4798      	blx	r3
 8008fc0:	3601      	adds	r6, #1
 8008fc2:	e7f2      	b.n	8008faa <__libc_init_array+0x1e>
 8008fc4:	0800a7f8 	.word	0x0800a7f8
 8008fc8:	0800a7f8 	.word	0x0800a7f8
 8008fcc:	0800a7f8 	.word	0x0800a7f8
 8008fd0:	0800a7fc 	.word	0x0800a7fc

08008fd4 <__retarget_lock_acquire_recursive>:
 8008fd4:	4770      	bx	lr

08008fd6 <__retarget_lock_release_recursive>:
 8008fd6:	4770      	bx	lr

08008fd8 <_free_r>:
 8008fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fda:	2900      	cmp	r1, #0
 8008fdc:	d044      	beq.n	8009068 <_free_r+0x90>
 8008fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe2:	9001      	str	r0, [sp, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fea:	bfb8      	it	lt
 8008fec:	18e4      	addlt	r4, r4, r3
 8008fee:	f000 f8df 	bl	80091b0 <__malloc_lock>
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	; (800906c <_free_r+0x94>)
 8008ff4:	9801      	ldr	r0, [sp, #4]
 8008ff6:	6813      	ldr	r3, [r2, #0]
 8008ff8:	b933      	cbnz	r3, 8009008 <_free_r+0x30>
 8008ffa:	6063      	str	r3, [r4, #4]
 8008ffc:	6014      	str	r4, [r2, #0]
 8008ffe:	b003      	add	sp, #12
 8009000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009004:	f000 b8da 	b.w	80091bc <__malloc_unlock>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d908      	bls.n	800901e <_free_r+0x46>
 800900c:	6825      	ldr	r5, [r4, #0]
 800900e:	1961      	adds	r1, r4, r5
 8009010:	428b      	cmp	r3, r1
 8009012:	bf01      	itttt	eq
 8009014:	6819      	ldreq	r1, [r3, #0]
 8009016:	685b      	ldreq	r3, [r3, #4]
 8009018:	1949      	addeq	r1, r1, r5
 800901a:	6021      	streq	r1, [r4, #0]
 800901c:	e7ed      	b.n	8008ffa <_free_r+0x22>
 800901e:	461a      	mov	r2, r3
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	b10b      	cbz	r3, 8009028 <_free_r+0x50>
 8009024:	42a3      	cmp	r3, r4
 8009026:	d9fa      	bls.n	800901e <_free_r+0x46>
 8009028:	6811      	ldr	r1, [r2, #0]
 800902a:	1855      	adds	r5, r2, r1
 800902c:	42a5      	cmp	r5, r4
 800902e:	d10b      	bne.n	8009048 <_free_r+0x70>
 8009030:	6824      	ldr	r4, [r4, #0]
 8009032:	4421      	add	r1, r4
 8009034:	1854      	adds	r4, r2, r1
 8009036:	42a3      	cmp	r3, r4
 8009038:	6011      	str	r1, [r2, #0]
 800903a:	d1e0      	bne.n	8008ffe <_free_r+0x26>
 800903c:	681c      	ldr	r4, [r3, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	6053      	str	r3, [r2, #4]
 8009042:	440c      	add	r4, r1
 8009044:	6014      	str	r4, [r2, #0]
 8009046:	e7da      	b.n	8008ffe <_free_r+0x26>
 8009048:	d902      	bls.n	8009050 <_free_r+0x78>
 800904a:	230c      	movs	r3, #12
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	e7d6      	b.n	8008ffe <_free_r+0x26>
 8009050:	6825      	ldr	r5, [r4, #0]
 8009052:	1961      	adds	r1, r4, r5
 8009054:	428b      	cmp	r3, r1
 8009056:	bf04      	itt	eq
 8009058:	6819      	ldreq	r1, [r3, #0]
 800905a:	685b      	ldreq	r3, [r3, #4]
 800905c:	6063      	str	r3, [r4, #4]
 800905e:	bf04      	itt	eq
 8009060:	1949      	addeq	r1, r1, r5
 8009062:	6021      	streq	r1, [r4, #0]
 8009064:	6054      	str	r4, [r2, #4]
 8009066:	e7ca      	b.n	8008ffe <_free_r+0x26>
 8009068:	b003      	add	sp, #12
 800906a:	bd30      	pop	{r4, r5, pc}
 800906c:	20000a60 	.word	0x20000a60

08009070 <sbrk_aligned>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	4e0e      	ldr	r6, [pc, #56]	; (80090ac <sbrk_aligned+0x3c>)
 8009074:	460c      	mov	r4, r1
 8009076:	6831      	ldr	r1, [r6, #0]
 8009078:	4605      	mov	r5, r0
 800907a:	b911      	cbnz	r1, 8009082 <sbrk_aligned+0x12>
 800907c:	f000 fba6 	bl	80097cc <_sbrk_r>
 8009080:	6030      	str	r0, [r6, #0]
 8009082:	4621      	mov	r1, r4
 8009084:	4628      	mov	r0, r5
 8009086:	f000 fba1 	bl	80097cc <_sbrk_r>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	d00a      	beq.n	80090a4 <sbrk_aligned+0x34>
 800908e:	1cc4      	adds	r4, r0, #3
 8009090:	f024 0403 	bic.w	r4, r4, #3
 8009094:	42a0      	cmp	r0, r4
 8009096:	d007      	beq.n	80090a8 <sbrk_aligned+0x38>
 8009098:	1a21      	subs	r1, r4, r0
 800909a:	4628      	mov	r0, r5
 800909c:	f000 fb96 	bl	80097cc <_sbrk_r>
 80090a0:	3001      	adds	r0, #1
 80090a2:	d101      	bne.n	80090a8 <sbrk_aligned+0x38>
 80090a4:	f04f 34ff 	mov.w	r4, #4294967295
 80090a8:	4620      	mov	r0, r4
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	20000a64 	.word	0x20000a64

080090b0 <_malloc_r>:
 80090b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b4:	1ccd      	adds	r5, r1, #3
 80090b6:	f025 0503 	bic.w	r5, r5, #3
 80090ba:	3508      	adds	r5, #8
 80090bc:	2d0c      	cmp	r5, #12
 80090be:	bf38      	it	cc
 80090c0:	250c      	movcc	r5, #12
 80090c2:	2d00      	cmp	r5, #0
 80090c4:	4607      	mov	r7, r0
 80090c6:	db01      	blt.n	80090cc <_malloc_r+0x1c>
 80090c8:	42a9      	cmp	r1, r5
 80090ca:	d905      	bls.n	80090d8 <_malloc_r+0x28>
 80090cc:	230c      	movs	r3, #12
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	2600      	movs	r6, #0
 80090d2:	4630      	mov	r0, r6
 80090d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80091ac <_malloc_r+0xfc>
 80090dc:	f000 f868 	bl	80091b0 <__malloc_lock>
 80090e0:	f8d8 3000 	ldr.w	r3, [r8]
 80090e4:	461c      	mov	r4, r3
 80090e6:	bb5c      	cbnz	r4, 8009140 <_malloc_r+0x90>
 80090e8:	4629      	mov	r1, r5
 80090ea:	4638      	mov	r0, r7
 80090ec:	f7ff ffc0 	bl	8009070 <sbrk_aligned>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	4604      	mov	r4, r0
 80090f4:	d155      	bne.n	80091a2 <_malloc_r+0xf2>
 80090f6:	f8d8 4000 	ldr.w	r4, [r8]
 80090fa:	4626      	mov	r6, r4
 80090fc:	2e00      	cmp	r6, #0
 80090fe:	d145      	bne.n	800918c <_malloc_r+0xdc>
 8009100:	2c00      	cmp	r4, #0
 8009102:	d048      	beq.n	8009196 <_malloc_r+0xe6>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	4631      	mov	r1, r6
 8009108:	4638      	mov	r0, r7
 800910a:	eb04 0903 	add.w	r9, r4, r3
 800910e:	f000 fb5d 	bl	80097cc <_sbrk_r>
 8009112:	4581      	cmp	r9, r0
 8009114:	d13f      	bne.n	8009196 <_malloc_r+0xe6>
 8009116:	6821      	ldr	r1, [r4, #0]
 8009118:	1a6d      	subs	r5, r5, r1
 800911a:	4629      	mov	r1, r5
 800911c:	4638      	mov	r0, r7
 800911e:	f7ff ffa7 	bl	8009070 <sbrk_aligned>
 8009122:	3001      	adds	r0, #1
 8009124:	d037      	beq.n	8009196 <_malloc_r+0xe6>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	442b      	add	r3, r5
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	f8d8 3000 	ldr.w	r3, [r8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d038      	beq.n	80091a6 <_malloc_r+0xf6>
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	42a2      	cmp	r2, r4
 8009138:	d12b      	bne.n	8009192 <_malloc_r+0xe2>
 800913a:	2200      	movs	r2, #0
 800913c:	605a      	str	r2, [r3, #4]
 800913e:	e00f      	b.n	8009160 <_malloc_r+0xb0>
 8009140:	6822      	ldr	r2, [r4, #0]
 8009142:	1b52      	subs	r2, r2, r5
 8009144:	d41f      	bmi.n	8009186 <_malloc_r+0xd6>
 8009146:	2a0b      	cmp	r2, #11
 8009148:	d917      	bls.n	800917a <_malloc_r+0xca>
 800914a:	1961      	adds	r1, r4, r5
 800914c:	42a3      	cmp	r3, r4
 800914e:	6025      	str	r5, [r4, #0]
 8009150:	bf18      	it	ne
 8009152:	6059      	strne	r1, [r3, #4]
 8009154:	6863      	ldr	r3, [r4, #4]
 8009156:	bf08      	it	eq
 8009158:	f8c8 1000 	streq.w	r1, [r8]
 800915c:	5162      	str	r2, [r4, r5]
 800915e:	604b      	str	r3, [r1, #4]
 8009160:	4638      	mov	r0, r7
 8009162:	f104 060b 	add.w	r6, r4, #11
 8009166:	f000 f829 	bl	80091bc <__malloc_unlock>
 800916a:	f026 0607 	bic.w	r6, r6, #7
 800916e:	1d23      	adds	r3, r4, #4
 8009170:	1af2      	subs	r2, r6, r3
 8009172:	d0ae      	beq.n	80090d2 <_malloc_r+0x22>
 8009174:	1b9b      	subs	r3, r3, r6
 8009176:	50a3      	str	r3, [r4, r2]
 8009178:	e7ab      	b.n	80090d2 <_malloc_r+0x22>
 800917a:	42a3      	cmp	r3, r4
 800917c:	6862      	ldr	r2, [r4, #4]
 800917e:	d1dd      	bne.n	800913c <_malloc_r+0x8c>
 8009180:	f8c8 2000 	str.w	r2, [r8]
 8009184:	e7ec      	b.n	8009160 <_malloc_r+0xb0>
 8009186:	4623      	mov	r3, r4
 8009188:	6864      	ldr	r4, [r4, #4]
 800918a:	e7ac      	b.n	80090e6 <_malloc_r+0x36>
 800918c:	4634      	mov	r4, r6
 800918e:	6876      	ldr	r6, [r6, #4]
 8009190:	e7b4      	b.n	80090fc <_malloc_r+0x4c>
 8009192:	4613      	mov	r3, r2
 8009194:	e7cc      	b.n	8009130 <_malloc_r+0x80>
 8009196:	230c      	movs	r3, #12
 8009198:	603b      	str	r3, [r7, #0]
 800919a:	4638      	mov	r0, r7
 800919c:	f000 f80e 	bl	80091bc <__malloc_unlock>
 80091a0:	e797      	b.n	80090d2 <_malloc_r+0x22>
 80091a2:	6025      	str	r5, [r4, #0]
 80091a4:	e7dc      	b.n	8009160 <_malloc_r+0xb0>
 80091a6:	605b      	str	r3, [r3, #4]
 80091a8:	deff      	udf	#255	; 0xff
 80091aa:	bf00      	nop
 80091ac:	20000a60 	.word	0x20000a60

080091b0 <__malloc_lock>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__malloc_lock+0x8>)
 80091b2:	f7ff bf0f 	b.w	8008fd4 <__retarget_lock_acquire_recursive>
 80091b6:	bf00      	nop
 80091b8:	20000a5c 	.word	0x20000a5c

080091bc <__malloc_unlock>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__malloc_unlock+0x8>)
 80091be:	f7ff bf0a 	b.w	8008fd6 <__retarget_lock_release_recursive>
 80091c2:	bf00      	nop
 80091c4:	20000a5c 	.word	0x20000a5c

080091c8 <__ssputs_r>:
 80091c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091cc:	688e      	ldr	r6, [r1, #8]
 80091ce:	461f      	mov	r7, r3
 80091d0:	42be      	cmp	r6, r7
 80091d2:	680b      	ldr	r3, [r1, #0]
 80091d4:	4682      	mov	sl, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	4690      	mov	r8, r2
 80091da:	d82c      	bhi.n	8009236 <__ssputs_r+0x6e>
 80091dc:	898a      	ldrh	r2, [r1, #12]
 80091de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091e2:	d026      	beq.n	8009232 <__ssputs_r+0x6a>
 80091e4:	6965      	ldr	r5, [r4, #20]
 80091e6:	6909      	ldr	r1, [r1, #16]
 80091e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091ec:	eba3 0901 	sub.w	r9, r3, r1
 80091f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091f4:	1c7b      	adds	r3, r7, #1
 80091f6:	444b      	add	r3, r9
 80091f8:	106d      	asrs	r5, r5, #1
 80091fa:	429d      	cmp	r5, r3
 80091fc:	bf38      	it	cc
 80091fe:	461d      	movcc	r5, r3
 8009200:	0553      	lsls	r3, r2, #21
 8009202:	d527      	bpl.n	8009254 <__ssputs_r+0x8c>
 8009204:	4629      	mov	r1, r5
 8009206:	f7ff ff53 	bl	80090b0 <_malloc_r>
 800920a:	4606      	mov	r6, r0
 800920c:	b360      	cbz	r0, 8009268 <__ssputs_r+0xa0>
 800920e:	6921      	ldr	r1, [r4, #16]
 8009210:	464a      	mov	r2, r9
 8009212:	f000 faeb 	bl	80097ec <memcpy>
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800921c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	6126      	str	r6, [r4, #16]
 8009224:	6165      	str	r5, [r4, #20]
 8009226:	444e      	add	r6, r9
 8009228:	eba5 0509 	sub.w	r5, r5, r9
 800922c:	6026      	str	r6, [r4, #0]
 800922e:	60a5      	str	r5, [r4, #8]
 8009230:	463e      	mov	r6, r7
 8009232:	42be      	cmp	r6, r7
 8009234:	d900      	bls.n	8009238 <__ssputs_r+0x70>
 8009236:	463e      	mov	r6, r7
 8009238:	6820      	ldr	r0, [r4, #0]
 800923a:	4632      	mov	r2, r6
 800923c:	4641      	mov	r1, r8
 800923e:	f000 faab 	bl	8009798 <memmove>
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	1b9b      	subs	r3, r3, r6
 8009246:	60a3      	str	r3, [r4, #8]
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	4433      	add	r3, r6
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	2000      	movs	r0, #0
 8009250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009254:	462a      	mov	r2, r5
 8009256:	f000 fad7 	bl	8009808 <_realloc_r>
 800925a:	4606      	mov	r6, r0
 800925c:	2800      	cmp	r0, #0
 800925e:	d1e0      	bne.n	8009222 <__ssputs_r+0x5a>
 8009260:	6921      	ldr	r1, [r4, #16]
 8009262:	4650      	mov	r0, sl
 8009264:	f7ff feb8 	bl	8008fd8 <_free_r>
 8009268:	230c      	movs	r3, #12
 800926a:	f8ca 3000 	str.w	r3, [sl]
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009274:	81a3      	strh	r3, [r4, #12]
 8009276:	f04f 30ff 	mov.w	r0, #4294967295
 800927a:	e7e9      	b.n	8009250 <__ssputs_r+0x88>

0800927c <_svfiprintf_r>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	4698      	mov	r8, r3
 8009282:	898b      	ldrh	r3, [r1, #12]
 8009284:	061b      	lsls	r3, r3, #24
 8009286:	b09d      	sub	sp, #116	; 0x74
 8009288:	4607      	mov	r7, r0
 800928a:	460d      	mov	r5, r1
 800928c:	4614      	mov	r4, r2
 800928e:	d50e      	bpl.n	80092ae <_svfiprintf_r+0x32>
 8009290:	690b      	ldr	r3, [r1, #16]
 8009292:	b963      	cbnz	r3, 80092ae <_svfiprintf_r+0x32>
 8009294:	2140      	movs	r1, #64	; 0x40
 8009296:	f7ff ff0b 	bl	80090b0 <_malloc_r>
 800929a:	6028      	str	r0, [r5, #0]
 800929c:	6128      	str	r0, [r5, #16]
 800929e:	b920      	cbnz	r0, 80092aa <_svfiprintf_r+0x2e>
 80092a0:	230c      	movs	r3, #12
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	e0d0      	b.n	800944c <_svfiprintf_r+0x1d0>
 80092aa:	2340      	movs	r3, #64	; 0x40
 80092ac:	616b      	str	r3, [r5, #20]
 80092ae:	2300      	movs	r3, #0
 80092b0:	9309      	str	r3, [sp, #36]	; 0x24
 80092b2:	2320      	movs	r3, #32
 80092b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80092bc:	2330      	movs	r3, #48	; 0x30
 80092be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009464 <_svfiprintf_r+0x1e8>
 80092c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092c6:	f04f 0901 	mov.w	r9, #1
 80092ca:	4623      	mov	r3, r4
 80092cc:	469a      	mov	sl, r3
 80092ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d2:	b10a      	cbz	r2, 80092d8 <_svfiprintf_r+0x5c>
 80092d4:	2a25      	cmp	r2, #37	; 0x25
 80092d6:	d1f9      	bne.n	80092cc <_svfiprintf_r+0x50>
 80092d8:	ebba 0b04 	subs.w	fp, sl, r4
 80092dc:	d00b      	beq.n	80092f6 <_svfiprintf_r+0x7a>
 80092de:	465b      	mov	r3, fp
 80092e0:	4622      	mov	r2, r4
 80092e2:	4629      	mov	r1, r5
 80092e4:	4638      	mov	r0, r7
 80092e6:	f7ff ff6f 	bl	80091c8 <__ssputs_r>
 80092ea:	3001      	adds	r0, #1
 80092ec:	f000 80a9 	beq.w	8009442 <_svfiprintf_r+0x1c6>
 80092f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f2:	445a      	add	r2, fp
 80092f4:	9209      	str	r2, [sp, #36]	; 0x24
 80092f6:	f89a 3000 	ldrb.w	r3, [sl]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 80a1 	beq.w	8009442 <_svfiprintf_r+0x1c6>
 8009300:	2300      	movs	r3, #0
 8009302:	f04f 32ff 	mov.w	r2, #4294967295
 8009306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800930a:	f10a 0a01 	add.w	sl, sl, #1
 800930e:	9304      	str	r3, [sp, #16]
 8009310:	9307      	str	r3, [sp, #28]
 8009312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009316:	931a      	str	r3, [sp, #104]	; 0x68
 8009318:	4654      	mov	r4, sl
 800931a:	2205      	movs	r2, #5
 800931c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009320:	4850      	ldr	r0, [pc, #320]	; (8009464 <_svfiprintf_r+0x1e8>)
 8009322:	f7f6 ff6d 	bl	8000200 <memchr>
 8009326:	9a04      	ldr	r2, [sp, #16]
 8009328:	b9d8      	cbnz	r0, 8009362 <_svfiprintf_r+0xe6>
 800932a:	06d0      	lsls	r0, r2, #27
 800932c:	bf44      	itt	mi
 800932e:	2320      	movmi	r3, #32
 8009330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009334:	0711      	lsls	r1, r2, #28
 8009336:	bf44      	itt	mi
 8009338:	232b      	movmi	r3, #43	; 0x2b
 800933a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800933e:	f89a 3000 	ldrb.w	r3, [sl]
 8009342:	2b2a      	cmp	r3, #42	; 0x2a
 8009344:	d015      	beq.n	8009372 <_svfiprintf_r+0xf6>
 8009346:	9a07      	ldr	r2, [sp, #28]
 8009348:	4654      	mov	r4, sl
 800934a:	2000      	movs	r0, #0
 800934c:	f04f 0c0a 	mov.w	ip, #10
 8009350:	4621      	mov	r1, r4
 8009352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009356:	3b30      	subs	r3, #48	; 0x30
 8009358:	2b09      	cmp	r3, #9
 800935a:	d94d      	bls.n	80093f8 <_svfiprintf_r+0x17c>
 800935c:	b1b0      	cbz	r0, 800938c <_svfiprintf_r+0x110>
 800935e:	9207      	str	r2, [sp, #28]
 8009360:	e014      	b.n	800938c <_svfiprintf_r+0x110>
 8009362:	eba0 0308 	sub.w	r3, r0, r8
 8009366:	fa09 f303 	lsl.w	r3, r9, r3
 800936a:	4313      	orrs	r3, r2
 800936c:	9304      	str	r3, [sp, #16]
 800936e:	46a2      	mov	sl, r4
 8009370:	e7d2      	b.n	8009318 <_svfiprintf_r+0x9c>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	1d19      	adds	r1, r3, #4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	9103      	str	r1, [sp, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	bfbb      	ittet	lt
 800937e:	425b      	neglt	r3, r3
 8009380:	f042 0202 	orrlt.w	r2, r2, #2
 8009384:	9307      	strge	r3, [sp, #28]
 8009386:	9307      	strlt	r3, [sp, #28]
 8009388:	bfb8      	it	lt
 800938a:	9204      	strlt	r2, [sp, #16]
 800938c:	7823      	ldrb	r3, [r4, #0]
 800938e:	2b2e      	cmp	r3, #46	; 0x2e
 8009390:	d10c      	bne.n	80093ac <_svfiprintf_r+0x130>
 8009392:	7863      	ldrb	r3, [r4, #1]
 8009394:	2b2a      	cmp	r3, #42	; 0x2a
 8009396:	d134      	bne.n	8009402 <_svfiprintf_r+0x186>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	1d1a      	adds	r2, r3, #4
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	9203      	str	r2, [sp, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	bfb8      	it	lt
 80093a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80093a8:	3402      	adds	r4, #2
 80093aa:	9305      	str	r3, [sp, #20]
 80093ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009474 <_svfiprintf_r+0x1f8>
 80093b0:	7821      	ldrb	r1, [r4, #0]
 80093b2:	2203      	movs	r2, #3
 80093b4:	4650      	mov	r0, sl
 80093b6:	f7f6 ff23 	bl	8000200 <memchr>
 80093ba:	b138      	cbz	r0, 80093cc <_svfiprintf_r+0x150>
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	eba0 000a 	sub.w	r0, r0, sl
 80093c2:	2240      	movs	r2, #64	; 0x40
 80093c4:	4082      	lsls	r2, r0
 80093c6:	4313      	orrs	r3, r2
 80093c8:	3401      	adds	r4, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d0:	4825      	ldr	r0, [pc, #148]	; (8009468 <_svfiprintf_r+0x1ec>)
 80093d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093d6:	2206      	movs	r2, #6
 80093d8:	f7f6 ff12 	bl	8000200 <memchr>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d038      	beq.n	8009452 <_svfiprintf_r+0x1d6>
 80093e0:	4b22      	ldr	r3, [pc, #136]	; (800946c <_svfiprintf_r+0x1f0>)
 80093e2:	bb1b      	cbnz	r3, 800942c <_svfiprintf_r+0x1b0>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	3307      	adds	r3, #7
 80093e8:	f023 0307 	bic.w	r3, r3, #7
 80093ec:	3308      	adds	r3, #8
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f2:	4433      	add	r3, r6
 80093f4:	9309      	str	r3, [sp, #36]	; 0x24
 80093f6:	e768      	b.n	80092ca <_svfiprintf_r+0x4e>
 80093f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093fc:	460c      	mov	r4, r1
 80093fe:	2001      	movs	r0, #1
 8009400:	e7a6      	b.n	8009350 <_svfiprintf_r+0xd4>
 8009402:	2300      	movs	r3, #0
 8009404:	3401      	adds	r4, #1
 8009406:	9305      	str	r3, [sp, #20]
 8009408:	4619      	mov	r1, r3
 800940a:	f04f 0c0a 	mov.w	ip, #10
 800940e:	4620      	mov	r0, r4
 8009410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009414:	3a30      	subs	r2, #48	; 0x30
 8009416:	2a09      	cmp	r2, #9
 8009418:	d903      	bls.n	8009422 <_svfiprintf_r+0x1a6>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0c6      	beq.n	80093ac <_svfiprintf_r+0x130>
 800941e:	9105      	str	r1, [sp, #20]
 8009420:	e7c4      	b.n	80093ac <_svfiprintf_r+0x130>
 8009422:	fb0c 2101 	mla	r1, ip, r1, r2
 8009426:	4604      	mov	r4, r0
 8009428:	2301      	movs	r3, #1
 800942a:	e7f0      	b.n	800940e <_svfiprintf_r+0x192>
 800942c:	ab03      	add	r3, sp, #12
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	462a      	mov	r2, r5
 8009432:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <_svfiprintf_r+0x1f4>)
 8009434:	a904      	add	r1, sp, #16
 8009436:	4638      	mov	r0, r7
 8009438:	f3af 8000 	nop.w
 800943c:	1c42      	adds	r2, r0, #1
 800943e:	4606      	mov	r6, r0
 8009440:	d1d6      	bne.n	80093f0 <_svfiprintf_r+0x174>
 8009442:	89ab      	ldrh	r3, [r5, #12]
 8009444:	065b      	lsls	r3, r3, #25
 8009446:	f53f af2d 	bmi.w	80092a4 <_svfiprintf_r+0x28>
 800944a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800944c:	b01d      	add	sp, #116	; 0x74
 800944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009452:	ab03      	add	r3, sp, #12
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	462a      	mov	r2, r5
 8009458:	4b05      	ldr	r3, [pc, #20]	; (8009470 <_svfiprintf_r+0x1f4>)
 800945a:	a904      	add	r1, sp, #16
 800945c:	4638      	mov	r0, r7
 800945e:	f000 f879 	bl	8009554 <_printf_i>
 8009462:	e7eb      	b.n	800943c <_svfiprintf_r+0x1c0>
 8009464:	0800a788 	.word	0x0800a788
 8009468:	0800a792 	.word	0x0800a792
 800946c:	00000000 	.word	0x00000000
 8009470:	080091c9 	.word	0x080091c9
 8009474:	0800a78e 	.word	0x0800a78e

08009478 <_printf_common>:
 8009478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800947c:	4616      	mov	r6, r2
 800947e:	4699      	mov	r9, r3
 8009480:	688a      	ldr	r2, [r1, #8]
 8009482:	690b      	ldr	r3, [r1, #16]
 8009484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009488:	4293      	cmp	r3, r2
 800948a:	bfb8      	it	lt
 800948c:	4613      	movlt	r3, r2
 800948e:	6033      	str	r3, [r6, #0]
 8009490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009494:	4607      	mov	r7, r0
 8009496:	460c      	mov	r4, r1
 8009498:	b10a      	cbz	r2, 800949e <_printf_common+0x26>
 800949a:	3301      	adds	r3, #1
 800949c:	6033      	str	r3, [r6, #0]
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	0699      	lsls	r1, r3, #26
 80094a2:	bf42      	ittt	mi
 80094a4:	6833      	ldrmi	r3, [r6, #0]
 80094a6:	3302      	addmi	r3, #2
 80094a8:	6033      	strmi	r3, [r6, #0]
 80094aa:	6825      	ldr	r5, [r4, #0]
 80094ac:	f015 0506 	ands.w	r5, r5, #6
 80094b0:	d106      	bne.n	80094c0 <_printf_common+0x48>
 80094b2:	f104 0a19 	add.w	sl, r4, #25
 80094b6:	68e3      	ldr	r3, [r4, #12]
 80094b8:	6832      	ldr	r2, [r6, #0]
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	42ab      	cmp	r3, r5
 80094be:	dc26      	bgt.n	800950e <_printf_common+0x96>
 80094c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094c4:	1e13      	subs	r3, r2, #0
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	bf18      	it	ne
 80094ca:	2301      	movne	r3, #1
 80094cc:	0692      	lsls	r2, r2, #26
 80094ce:	d42b      	bmi.n	8009528 <_printf_common+0xb0>
 80094d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094d4:	4649      	mov	r1, r9
 80094d6:	4638      	mov	r0, r7
 80094d8:	47c0      	blx	r8
 80094da:	3001      	adds	r0, #1
 80094dc:	d01e      	beq.n	800951c <_printf_common+0xa4>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	6922      	ldr	r2, [r4, #16]
 80094e2:	f003 0306 	and.w	r3, r3, #6
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	bf02      	ittt	eq
 80094ea:	68e5      	ldreq	r5, [r4, #12]
 80094ec:	6833      	ldreq	r3, [r6, #0]
 80094ee:	1aed      	subeq	r5, r5, r3
 80094f0:	68a3      	ldr	r3, [r4, #8]
 80094f2:	bf0c      	ite	eq
 80094f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094f8:	2500      	movne	r5, #0
 80094fa:	4293      	cmp	r3, r2
 80094fc:	bfc4      	itt	gt
 80094fe:	1a9b      	subgt	r3, r3, r2
 8009500:	18ed      	addgt	r5, r5, r3
 8009502:	2600      	movs	r6, #0
 8009504:	341a      	adds	r4, #26
 8009506:	42b5      	cmp	r5, r6
 8009508:	d11a      	bne.n	8009540 <_printf_common+0xc8>
 800950a:	2000      	movs	r0, #0
 800950c:	e008      	b.n	8009520 <_printf_common+0xa8>
 800950e:	2301      	movs	r3, #1
 8009510:	4652      	mov	r2, sl
 8009512:	4649      	mov	r1, r9
 8009514:	4638      	mov	r0, r7
 8009516:	47c0      	blx	r8
 8009518:	3001      	adds	r0, #1
 800951a:	d103      	bne.n	8009524 <_printf_common+0xac>
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009524:	3501      	adds	r5, #1
 8009526:	e7c6      	b.n	80094b6 <_printf_common+0x3e>
 8009528:	18e1      	adds	r1, r4, r3
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	2030      	movs	r0, #48	; 0x30
 800952e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009532:	4422      	add	r2, r4
 8009534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800953c:	3302      	adds	r3, #2
 800953e:	e7c7      	b.n	80094d0 <_printf_common+0x58>
 8009540:	2301      	movs	r3, #1
 8009542:	4622      	mov	r2, r4
 8009544:	4649      	mov	r1, r9
 8009546:	4638      	mov	r0, r7
 8009548:	47c0      	blx	r8
 800954a:	3001      	adds	r0, #1
 800954c:	d0e6      	beq.n	800951c <_printf_common+0xa4>
 800954e:	3601      	adds	r6, #1
 8009550:	e7d9      	b.n	8009506 <_printf_common+0x8e>
	...

08009554 <_printf_i>:
 8009554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	7e0f      	ldrb	r7, [r1, #24]
 800955a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800955c:	2f78      	cmp	r7, #120	; 0x78
 800955e:	4691      	mov	r9, r2
 8009560:	4680      	mov	r8, r0
 8009562:	460c      	mov	r4, r1
 8009564:	469a      	mov	sl, r3
 8009566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800956a:	d807      	bhi.n	800957c <_printf_i+0x28>
 800956c:	2f62      	cmp	r7, #98	; 0x62
 800956e:	d80a      	bhi.n	8009586 <_printf_i+0x32>
 8009570:	2f00      	cmp	r7, #0
 8009572:	f000 80d4 	beq.w	800971e <_printf_i+0x1ca>
 8009576:	2f58      	cmp	r7, #88	; 0x58
 8009578:	f000 80c0 	beq.w	80096fc <_printf_i+0x1a8>
 800957c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009584:	e03a      	b.n	80095fc <_printf_i+0xa8>
 8009586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800958a:	2b15      	cmp	r3, #21
 800958c:	d8f6      	bhi.n	800957c <_printf_i+0x28>
 800958e:	a101      	add	r1, pc, #4	; (adr r1, 8009594 <_printf_i+0x40>)
 8009590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009594:	080095ed 	.word	0x080095ed
 8009598:	08009601 	.word	0x08009601
 800959c:	0800957d 	.word	0x0800957d
 80095a0:	0800957d 	.word	0x0800957d
 80095a4:	0800957d 	.word	0x0800957d
 80095a8:	0800957d 	.word	0x0800957d
 80095ac:	08009601 	.word	0x08009601
 80095b0:	0800957d 	.word	0x0800957d
 80095b4:	0800957d 	.word	0x0800957d
 80095b8:	0800957d 	.word	0x0800957d
 80095bc:	0800957d 	.word	0x0800957d
 80095c0:	08009705 	.word	0x08009705
 80095c4:	0800962d 	.word	0x0800962d
 80095c8:	080096bf 	.word	0x080096bf
 80095cc:	0800957d 	.word	0x0800957d
 80095d0:	0800957d 	.word	0x0800957d
 80095d4:	08009727 	.word	0x08009727
 80095d8:	0800957d 	.word	0x0800957d
 80095dc:	0800962d 	.word	0x0800962d
 80095e0:	0800957d 	.word	0x0800957d
 80095e4:	0800957d 	.word	0x0800957d
 80095e8:	080096c7 	.word	0x080096c7
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	1d1a      	adds	r2, r3, #4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	602a      	str	r2, [r5, #0]
 80095f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095fc:	2301      	movs	r3, #1
 80095fe:	e09f      	b.n	8009740 <_printf_i+0x1ec>
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	682b      	ldr	r3, [r5, #0]
 8009604:	0607      	lsls	r7, r0, #24
 8009606:	f103 0104 	add.w	r1, r3, #4
 800960a:	6029      	str	r1, [r5, #0]
 800960c:	d501      	bpl.n	8009612 <_printf_i+0xbe>
 800960e:	681e      	ldr	r6, [r3, #0]
 8009610:	e003      	b.n	800961a <_printf_i+0xc6>
 8009612:	0646      	lsls	r6, r0, #25
 8009614:	d5fb      	bpl.n	800960e <_printf_i+0xba>
 8009616:	f9b3 6000 	ldrsh.w	r6, [r3]
 800961a:	2e00      	cmp	r6, #0
 800961c:	da03      	bge.n	8009626 <_printf_i+0xd2>
 800961e:	232d      	movs	r3, #45	; 0x2d
 8009620:	4276      	negs	r6, r6
 8009622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009626:	485a      	ldr	r0, [pc, #360]	; (8009790 <_printf_i+0x23c>)
 8009628:	230a      	movs	r3, #10
 800962a:	e012      	b.n	8009652 <_printf_i+0xfe>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	6820      	ldr	r0, [r4, #0]
 8009630:	1d19      	adds	r1, r3, #4
 8009632:	6029      	str	r1, [r5, #0]
 8009634:	0605      	lsls	r5, r0, #24
 8009636:	d501      	bpl.n	800963c <_printf_i+0xe8>
 8009638:	681e      	ldr	r6, [r3, #0]
 800963a:	e002      	b.n	8009642 <_printf_i+0xee>
 800963c:	0641      	lsls	r1, r0, #25
 800963e:	d5fb      	bpl.n	8009638 <_printf_i+0xe4>
 8009640:	881e      	ldrh	r6, [r3, #0]
 8009642:	4853      	ldr	r0, [pc, #332]	; (8009790 <_printf_i+0x23c>)
 8009644:	2f6f      	cmp	r7, #111	; 0x6f
 8009646:	bf0c      	ite	eq
 8009648:	2308      	moveq	r3, #8
 800964a:	230a      	movne	r3, #10
 800964c:	2100      	movs	r1, #0
 800964e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009652:	6865      	ldr	r5, [r4, #4]
 8009654:	60a5      	str	r5, [r4, #8]
 8009656:	2d00      	cmp	r5, #0
 8009658:	bfa2      	ittt	ge
 800965a:	6821      	ldrge	r1, [r4, #0]
 800965c:	f021 0104 	bicge.w	r1, r1, #4
 8009660:	6021      	strge	r1, [r4, #0]
 8009662:	b90e      	cbnz	r6, 8009668 <_printf_i+0x114>
 8009664:	2d00      	cmp	r5, #0
 8009666:	d04b      	beq.n	8009700 <_printf_i+0x1ac>
 8009668:	4615      	mov	r5, r2
 800966a:	fbb6 f1f3 	udiv	r1, r6, r3
 800966e:	fb03 6711 	mls	r7, r3, r1, r6
 8009672:	5dc7      	ldrb	r7, [r0, r7]
 8009674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009678:	4637      	mov	r7, r6
 800967a:	42bb      	cmp	r3, r7
 800967c:	460e      	mov	r6, r1
 800967e:	d9f4      	bls.n	800966a <_printf_i+0x116>
 8009680:	2b08      	cmp	r3, #8
 8009682:	d10b      	bne.n	800969c <_printf_i+0x148>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	07de      	lsls	r6, r3, #31
 8009688:	d508      	bpl.n	800969c <_printf_i+0x148>
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	6861      	ldr	r1, [r4, #4]
 800968e:	4299      	cmp	r1, r3
 8009690:	bfde      	ittt	le
 8009692:	2330      	movle	r3, #48	; 0x30
 8009694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009698:	f105 35ff 	addle.w	r5, r5, #4294967295
 800969c:	1b52      	subs	r2, r2, r5
 800969e:	6122      	str	r2, [r4, #16]
 80096a0:	f8cd a000 	str.w	sl, [sp]
 80096a4:	464b      	mov	r3, r9
 80096a6:	aa03      	add	r2, sp, #12
 80096a8:	4621      	mov	r1, r4
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7ff fee4 	bl	8009478 <_printf_common>
 80096b0:	3001      	adds	r0, #1
 80096b2:	d14a      	bne.n	800974a <_printf_i+0x1f6>
 80096b4:	f04f 30ff 	mov.w	r0, #4294967295
 80096b8:	b004      	add	sp, #16
 80096ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	f043 0320 	orr.w	r3, r3, #32
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	4833      	ldr	r0, [pc, #204]	; (8009794 <_printf_i+0x240>)
 80096c8:	2778      	movs	r7, #120	; 0x78
 80096ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	6829      	ldr	r1, [r5, #0]
 80096d2:	061f      	lsls	r7, r3, #24
 80096d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80096d8:	d402      	bmi.n	80096e0 <_printf_i+0x18c>
 80096da:	065f      	lsls	r7, r3, #25
 80096dc:	bf48      	it	mi
 80096de:	b2b6      	uxthmi	r6, r6
 80096e0:	07df      	lsls	r7, r3, #31
 80096e2:	bf48      	it	mi
 80096e4:	f043 0320 	orrmi.w	r3, r3, #32
 80096e8:	6029      	str	r1, [r5, #0]
 80096ea:	bf48      	it	mi
 80096ec:	6023      	strmi	r3, [r4, #0]
 80096ee:	b91e      	cbnz	r6, 80096f8 <_printf_i+0x1a4>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	f023 0320 	bic.w	r3, r3, #32
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	2310      	movs	r3, #16
 80096fa:	e7a7      	b.n	800964c <_printf_i+0xf8>
 80096fc:	4824      	ldr	r0, [pc, #144]	; (8009790 <_printf_i+0x23c>)
 80096fe:	e7e4      	b.n	80096ca <_printf_i+0x176>
 8009700:	4615      	mov	r5, r2
 8009702:	e7bd      	b.n	8009680 <_printf_i+0x12c>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	6826      	ldr	r6, [r4, #0]
 8009708:	6961      	ldr	r1, [r4, #20]
 800970a:	1d18      	adds	r0, r3, #4
 800970c:	6028      	str	r0, [r5, #0]
 800970e:	0635      	lsls	r5, r6, #24
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	d501      	bpl.n	8009718 <_printf_i+0x1c4>
 8009714:	6019      	str	r1, [r3, #0]
 8009716:	e002      	b.n	800971e <_printf_i+0x1ca>
 8009718:	0670      	lsls	r0, r6, #25
 800971a:	d5fb      	bpl.n	8009714 <_printf_i+0x1c0>
 800971c:	8019      	strh	r1, [r3, #0]
 800971e:	2300      	movs	r3, #0
 8009720:	6123      	str	r3, [r4, #16]
 8009722:	4615      	mov	r5, r2
 8009724:	e7bc      	b.n	80096a0 <_printf_i+0x14c>
 8009726:	682b      	ldr	r3, [r5, #0]
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	602a      	str	r2, [r5, #0]
 800972c:	681d      	ldr	r5, [r3, #0]
 800972e:	6862      	ldr	r2, [r4, #4]
 8009730:	2100      	movs	r1, #0
 8009732:	4628      	mov	r0, r5
 8009734:	f7f6 fd64 	bl	8000200 <memchr>
 8009738:	b108      	cbz	r0, 800973e <_printf_i+0x1ea>
 800973a:	1b40      	subs	r0, r0, r5
 800973c:	6060      	str	r0, [r4, #4]
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	2300      	movs	r3, #0
 8009744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009748:	e7aa      	b.n	80096a0 <_printf_i+0x14c>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	462a      	mov	r2, r5
 800974e:	4649      	mov	r1, r9
 8009750:	4640      	mov	r0, r8
 8009752:	47d0      	blx	sl
 8009754:	3001      	adds	r0, #1
 8009756:	d0ad      	beq.n	80096b4 <_printf_i+0x160>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	079b      	lsls	r3, r3, #30
 800975c:	d413      	bmi.n	8009786 <_printf_i+0x232>
 800975e:	68e0      	ldr	r0, [r4, #12]
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	4298      	cmp	r0, r3
 8009764:	bfb8      	it	lt
 8009766:	4618      	movlt	r0, r3
 8009768:	e7a6      	b.n	80096b8 <_printf_i+0x164>
 800976a:	2301      	movs	r3, #1
 800976c:	4632      	mov	r2, r6
 800976e:	4649      	mov	r1, r9
 8009770:	4640      	mov	r0, r8
 8009772:	47d0      	blx	sl
 8009774:	3001      	adds	r0, #1
 8009776:	d09d      	beq.n	80096b4 <_printf_i+0x160>
 8009778:	3501      	adds	r5, #1
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	9903      	ldr	r1, [sp, #12]
 800977e:	1a5b      	subs	r3, r3, r1
 8009780:	42ab      	cmp	r3, r5
 8009782:	dcf2      	bgt.n	800976a <_printf_i+0x216>
 8009784:	e7eb      	b.n	800975e <_printf_i+0x20a>
 8009786:	2500      	movs	r5, #0
 8009788:	f104 0619 	add.w	r6, r4, #25
 800978c:	e7f5      	b.n	800977a <_printf_i+0x226>
 800978e:	bf00      	nop
 8009790:	0800a799 	.word	0x0800a799
 8009794:	0800a7aa 	.word	0x0800a7aa

08009798 <memmove>:
 8009798:	4288      	cmp	r0, r1
 800979a:	b510      	push	{r4, lr}
 800979c:	eb01 0402 	add.w	r4, r1, r2
 80097a0:	d902      	bls.n	80097a8 <memmove+0x10>
 80097a2:	4284      	cmp	r4, r0
 80097a4:	4623      	mov	r3, r4
 80097a6:	d807      	bhi.n	80097b8 <memmove+0x20>
 80097a8:	1e43      	subs	r3, r0, #1
 80097aa:	42a1      	cmp	r1, r4
 80097ac:	d008      	beq.n	80097c0 <memmove+0x28>
 80097ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097b6:	e7f8      	b.n	80097aa <memmove+0x12>
 80097b8:	4402      	add	r2, r0
 80097ba:	4601      	mov	r1, r0
 80097bc:	428a      	cmp	r2, r1
 80097be:	d100      	bne.n	80097c2 <memmove+0x2a>
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ca:	e7f7      	b.n	80097bc <memmove+0x24>

080097cc <_sbrk_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d06      	ldr	r5, [pc, #24]	; (80097e8 <_sbrk_r+0x1c>)
 80097d0:	2300      	movs	r3, #0
 80097d2:	4604      	mov	r4, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	602b      	str	r3, [r5, #0]
 80097d8:	f7f8 fd5e 	bl	8002298 <_sbrk>
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	d102      	bne.n	80097e6 <_sbrk_r+0x1a>
 80097e0:	682b      	ldr	r3, [r5, #0]
 80097e2:	b103      	cbz	r3, 80097e6 <_sbrk_r+0x1a>
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	20000a58 	.word	0x20000a58

080097ec <memcpy>:
 80097ec:	440a      	add	r2, r1
 80097ee:	4291      	cmp	r1, r2
 80097f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097f4:	d100      	bne.n	80097f8 <memcpy+0xc>
 80097f6:	4770      	bx	lr
 80097f8:	b510      	push	{r4, lr}
 80097fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009802:	4291      	cmp	r1, r2
 8009804:	d1f9      	bne.n	80097fa <memcpy+0xe>
 8009806:	bd10      	pop	{r4, pc}

08009808 <_realloc_r>:
 8009808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980c:	4680      	mov	r8, r0
 800980e:	4614      	mov	r4, r2
 8009810:	460e      	mov	r6, r1
 8009812:	b921      	cbnz	r1, 800981e <_realloc_r+0x16>
 8009814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009818:	4611      	mov	r1, r2
 800981a:	f7ff bc49 	b.w	80090b0 <_malloc_r>
 800981e:	b92a      	cbnz	r2, 800982c <_realloc_r+0x24>
 8009820:	f7ff fbda 	bl	8008fd8 <_free_r>
 8009824:	4625      	mov	r5, r4
 8009826:	4628      	mov	r0, r5
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	f000 f81b 	bl	8009866 <_malloc_usable_size_r>
 8009830:	4284      	cmp	r4, r0
 8009832:	4607      	mov	r7, r0
 8009834:	d802      	bhi.n	800983c <_realloc_r+0x34>
 8009836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800983a:	d812      	bhi.n	8009862 <_realloc_r+0x5a>
 800983c:	4621      	mov	r1, r4
 800983e:	4640      	mov	r0, r8
 8009840:	f7ff fc36 	bl	80090b0 <_malloc_r>
 8009844:	4605      	mov	r5, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d0ed      	beq.n	8009826 <_realloc_r+0x1e>
 800984a:	42bc      	cmp	r4, r7
 800984c:	4622      	mov	r2, r4
 800984e:	4631      	mov	r1, r6
 8009850:	bf28      	it	cs
 8009852:	463a      	movcs	r2, r7
 8009854:	f7ff ffca 	bl	80097ec <memcpy>
 8009858:	4631      	mov	r1, r6
 800985a:	4640      	mov	r0, r8
 800985c:	f7ff fbbc 	bl	8008fd8 <_free_r>
 8009860:	e7e1      	b.n	8009826 <_realloc_r+0x1e>
 8009862:	4635      	mov	r5, r6
 8009864:	e7df      	b.n	8009826 <_realloc_r+0x1e>

08009866 <_malloc_usable_size_r>:
 8009866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986a:	1f18      	subs	r0, r3, #4
 800986c:	2b00      	cmp	r3, #0
 800986e:	bfbc      	itt	lt
 8009870:	580b      	ldrlt	r3, [r1, r0]
 8009872:	18c0      	addlt	r0, r0, r3
 8009874:	4770      	bx	lr
	...

08009878 <pow>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	ed2d 8b02 	vpush	{d8}
 800987e:	eeb0 8a40 	vmov.f32	s16, s0
 8009882:	eef0 8a60 	vmov.f32	s17, s1
 8009886:	ec55 4b11 	vmov	r4, r5, d1
 800988a:	f000 f871 	bl	8009970 <__ieee754_pow>
 800988e:	4622      	mov	r2, r4
 8009890:	462b      	mov	r3, r5
 8009892:	4620      	mov	r0, r4
 8009894:	4629      	mov	r1, r5
 8009896:	ec57 6b10 	vmov	r6, r7, d0
 800989a:	f7f7 f957 	bl	8000b4c <__aeabi_dcmpun>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d13b      	bne.n	800991a <pow+0xa2>
 80098a2:	ec51 0b18 	vmov	r0, r1, d8
 80098a6:	2200      	movs	r2, #0
 80098a8:	2300      	movs	r3, #0
 80098aa:	f7f7 f91d 	bl	8000ae8 <__aeabi_dcmpeq>
 80098ae:	b1b8      	cbz	r0, 80098e0 <pow+0x68>
 80098b0:	2200      	movs	r2, #0
 80098b2:	2300      	movs	r3, #0
 80098b4:	4620      	mov	r0, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f7 f916 	bl	8000ae8 <__aeabi_dcmpeq>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d146      	bne.n	800994e <pow+0xd6>
 80098c0:	ec45 4b10 	vmov	d0, r4, r5
 80098c4:	f000 f848 	bl	8009958 <finite>
 80098c8:	b338      	cbz	r0, 800991a <pow+0xa2>
 80098ca:	2200      	movs	r2, #0
 80098cc:	2300      	movs	r3, #0
 80098ce:	4620      	mov	r0, r4
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7f7 f913 	bl	8000afc <__aeabi_dcmplt>
 80098d6:	b300      	cbz	r0, 800991a <pow+0xa2>
 80098d8:	f7ff fb52 	bl	8008f80 <__errno>
 80098dc:	2322      	movs	r3, #34	; 0x22
 80098de:	e01b      	b.n	8009918 <pow+0xa0>
 80098e0:	ec47 6b10 	vmov	d0, r6, r7
 80098e4:	f000 f838 	bl	8009958 <finite>
 80098e8:	b9e0      	cbnz	r0, 8009924 <pow+0xac>
 80098ea:	eeb0 0a48 	vmov.f32	s0, s16
 80098ee:	eef0 0a68 	vmov.f32	s1, s17
 80098f2:	f000 f831 	bl	8009958 <finite>
 80098f6:	b1a8      	cbz	r0, 8009924 <pow+0xac>
 80098f8:	ec45 4b10 	vmov	d0, r4, r5
 80098fc:	f000 f82c 	bl	8009958 <finite>
 8009900:	b180      	cbz	r0, 8009924 <pow+0xac>
 8009902:	4632      	mov	r2, r6
 8009904:	463b      	mov	r3, r7
 8009906:	4630      	mov	r0, r6
 8009908:	4639      	mov	r1, r7
 800990a:	f7f7 f91f 	bl	8000b4c <__aeabi_dcmpun>
 800990e:	2800      	cmp	r0, #0
 8009910:	d0e2      	beq.n	80098d8 <pow+0x60>
 8009912:	f7ff fb35 	bl	8008f80 <__errno>
 8009916:	2321      	movs	r3, #33	; 0x21
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	ecbd 8b02 	vpop	{d8}
 800991e:	ec47 6b10 	vmov	d0, r6, r7
 8009922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009924:	2200      	movs	r2, #0
 8009926:	2300      	movs	r3, #0
 8009928:	4630      	mov	r0, r6
 800992a:	4639      	mov	r1, r7
 800992c:	f7f7 f8dc 	bl	8000ae8 <__aeabi_dcmpeq>
 8009930:	2800      	cmp	r0, #0
 8009932:	d0f2      	beq.n	800991a <pow+0xa2>
 8009934:	eeb0 0a48 	vmov.f32	s0, s16
 8009938:	eef0 0a68 	vmov.f32	s1, s17
 800993c:	f000 f80c 	bl	8009958 <finite>
 8009940:	2800      	cmp	r0, #0
 8009942:	d0ea      	beq.n	800991a <pow+0xa2>
 8009944:	ec45 4b10 	vmov	d0, r4, r5
 8009948:	f000 f806 	bl	8009958 <finite>
 800994c:	e7c3      	b.n	80098d6 <pow+0x5e>
 800994e:	4f01      	ldr	r7, [pc, #4]	; (8009954 <pow+0xdc>)
 8009950:	2600      	movs	r6, #0
 8009952:	e7e2      	b.n	800991a <pow+0xa2>
 8009954:	3ff00000 	.word	0x3ff00000

08009958 <finite>:
 8009958:	b082      	sub	sp, #8
 800995a:	ed8d 0b00 	vstr	d0, [sp]
 800995e:	9801      	ldr	r0, [sp, #4]
 8009960:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009964:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009968:	0fc0      	lsrs	r0, r0, #31
 800996a:	b002      	add	sp, #8
 800996c:	4770      	bx	lr
	...

08009970 <__ieee754_pow>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	ed2d 8b06 	vpush	{d8-d10}
 8009978:	b089      	sub	sp, #36	; 0x24
 800997a:	ed8d 1b00 	vstr	d1, [sp]
 800997e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009982:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009986:	ea58 0102 	orrs.w	r1, r8, r2
 800998a:	ec57 6b10 	vmov	r6, r7, d0
 800998e:	d115      	bne.n	80099bc <__ieee754_pow+0x4c>
 8009990:	19b3      	adds	r3, r6, r6
 8009992:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009996:	4152      	adcs	r2, r2
 8009998:	4299      	cmp	r1, r3
 800999a:	4b89      	ldr	r3, [pc, #548]	; (8009bc0 <__ieee754_pow+0x250>)
 800999c:	4193      	sbcs	r3, r2
 800999e:	f080 84d1 	bcs.w	800a344 <__ieee754_pow+0x9d4>
 80099a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 fc7f 	bl	80002ac <__adddf3>
 80099ae:	ec41 0b10 	vmov	d0, r0, r1
 80099b2:	b009      	add	sp, #36	; 0x24
 80099b4:	ecbd 8b06 	vpop	{d8-d10}
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	4b81      	ldr	r3, [pc, #516]	; (8009bc4 <__ieee754_pow+0x254>)
 80099be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80099c2:	429c      	cmp	r4, r3
 80099c4:	ee10 aa10 	vmov	sl, s0
 80099c8:	463d      	mov	r5, r7
 80099ca:	dc06      	bgt.n	80099da <__ieee754_pow+0x6a>
 80099cc:	d101      	bne.n	80099d2 <__ieee754_pow+0x62>
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d1e7      	bne.n	80099a2 <__ieee754_pow+0x32>
 80099d2:	4598      	cmp	r8, r3
 80099d4:	dc01      	bgt.n	80099da <__ieee754_pow+0x6a>
 80099d6:	d10f      	bne.n	80099f8 <__ieee754_pow+0x88>
 80099d8:	b172      	cbz	r2, 80099f8 <__ieee754_pow+0x88>
 80099da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80099de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80099e2:	ea55 050a 	orrs.w	r5, r5, sl
 80099e6:	d1dc      	bne.n	80099a2 <__ieee754_pow+0x32>
 80099e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099ec:	18db      	adds	r3, r3, r3
 80099ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80099f2:	4152      	adcs	r2, r2
 80099f4:	429d      	cmp	r5, r3
 80099f6:	e7d0      	b.n	800999a <__ieee754_pow+0x2a>
 80099f8:	2d00      	cmp	r5, #0
 80099fa:	da3b      	bge.n	8009a74 <__ieee754_pow+0x104>
 80099fc:	4b72      	ldr	r3, [pc, #456]	; (8009bc8 <__ieee754_pow+0x258>)
 80099fe:	4598      	cmp	r8, r3
 8009a00:	dc51      	bgt.n	8009aa6 <__ieee754_pow+0x136>
 8009a02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009a06:	4598      	cmp	r8, r3
 8009a08:	f340 84ab 	ble.w	800a362 <__ieee754_pow+0x9f2>
 8009a0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009a10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a14:	2b14      	cmp	r3, #20
 8009a16:	dd0f      	ble.n	8009a38 <__ieee754_pow+0xc8>
 8009a18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009a1c:	fa22 f103 	lsr.w	r1, r2, r3
 8009a20:	fa01 f303 	lsl.w	r3, r1, r3
 8009a24:	4293      	cmp	r3, r2
 8009a26:	f040 849c 	bne.w	800a362 <__ieee754_pow+0x9f2>
 8009a2a:	f001 0101 	and.w	r1, r1, #1
 8009a2e:	f1c1 0302 	rsb	r3, r1, #2
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	b182      	cbz	r2, 8009a58 <__ieee754_pow+0xe8>
 8009a36:	e05f      	b.n	8009af8 <__ieee754_pow+0x188>
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	d15b      	bne.n	8009af4 <__ieee754_pow+0x184>
 8009a3c:	f1c3 0314 	rsb	r3, r3, #20
 8009a40:	fa48 f103 	asr.w	r1, r8, r3
 8009a44:	fa01 f303 	lsl.w	r3, r1, r3
 8009a48:	4543      	cmp	r3, r8
 8009a4a:	f040 8487 	bne.w	800a35c <__ieee754_pow+0x9ec>
 8009a4e:	f001 0101 	and.w	r1, r1, #1
 8009a52:	f1c1 0302 	rsb	r3, r1, #2
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	4b5c      	ldr	r3, [pc, #368]	; (8009bcc <__ieee754_pow+0x25c>)
 8009a5a:	4598      	cmp	r8, r3
 8009a5c:	d132      	bne.n	8009ac4 <__ieee754_pow+0x154>
 8009a5e:	f1b9 0f00 	cmp.w	r9, #0
 8009a62:	f280 8477 	bge.w	800a354 <__ieee754_pow+0x9e4>
 8009a66:	4959      	ldr	r1, [pc, #356]	; (8009bcc <__ieee754_pow+0x25c>)
 8009a68:	4632      	mov	r2, r6
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f7f6 fefd 	bl	800086c <__aeabi_ddiv>
 8009a72:	e79c      	b.n	80099ae <__ieee754_pow+0x3e>
 8009a74:	2300      	movs	r3, #0
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	d13d      	bne.n	8009af8 <__ieee754_pow+0x188>
 8009a7c:	4b51      	ldr	r3, [pc, #324]	; (8009bc4 <__ieee754_pow+0x254>)
 8009a7e:	4598      	cmp	r8, r3
 8009a80:	d1ea      	bne.n	8009a58 <__ieee754_pow+0xe8>
 8009a82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009a86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a8e:	f000 8459 	beq.w	800a344 <__ieee754_pow+0x9d4>
 8009a92:	4b4f      	ldr	r3, [pc, #316]	; (8009bd0 <__ieee754_pow+0x260>)
 8009a94:	429c      	cmp	r4, r3
 8009a96:	dd08      	ble.n	8009aaa <__ieee754_pow+0x13a>
 8009a98:	f1b9 0f00 	cmp.w	r9, #0
 8009a9c:	f2c0 8456 	blt.w	800a34c <__ieee754_pow+0x9dc>
 8009aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aa4:	e783      	b.n	80099ae <__ieee754_pow+0x3e>
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	e7e5      	b.n	8009a76 <__ieee754_pow+0x106>
 8009aaa:	f1b9 0f00 	cmp.w	r9, #0
 8009aae:	f04f 0000 	mov.w	r0, #0
 8009ab2:	f04f 0100 	mov.w	r1, #0
 8009ab6:	f6bf af7a 	bge.w	80099ae <__ieee754_pow+0x3e>
 8009aba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009abe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ac2:	e774      	b.n	80099ae <__ieee754_pow+0x3e>
 8009ac4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009ac8:	d106      	bne.n	8009ad8 <__ieee754_pow+0x168>
 8009aca:	4632      	mov	r2, r6
 8009acc:	463b      	mov	r3, r7
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f6 fda1 	bl	8000618 <__aeabi_dmul>
 8009ad6:	e76a      	b.n	80099ae <__ieee754_pow+0x3e>
 8009ad8:	4b3e      	ldr	r3, [pc, #248]	; (8009bd4 <__ieee754_pow+0x264>)
 8009ada:	4599      	cmp	r9, r3
 8009adc:	d10c      	bne.n	8009af8 <__ieee754_pow+0x188>
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	db0a      	blt.n	8009af8 <__ieee754_pow+0x188>
 8009ae2:	ec47 6b10 	vmov	d0, r6, r7
 8009ae6:	b009      	add	sp, #36	; 0x24
 8009ae8:	ecbd 8b06 	vpop	{d8-d10}
 8009aec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	f000 bd20 	b.w	800a534 <__ieee754_sqrt>
 8009af4:	2300      	movs	r3, #0
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	ec47 6b10 	vmov	d0, r6, r7
 8009afc:	f000 fc62 	bl	800a3c4 <fabs>
 8009b00:	ec51 0b10 	vmov	r0, r1, d0
 8009b04:	f1ba 0f00 	cmp.w	sl, #0
 8009b08:	d129      	bne.n	8009b5e <__ieee754_pow+0x1ee>
 8009b0a:	b124      	cbz	r4, 8009b16 <__ieee754_pow+0x1a6>
 8009b0c:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <__ieee754_pow+0x25c>)
 8009b0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d123      	bne.n	8009b5e <__ieee754_pow+0x1ee>
 8009b16:	f1b9 0f00 	cmp.w	r9, #0
 8009b1a:	da05      	bge.n	8009b28 <__ieee754_pow+0x1b8>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	2000      	movs	r0, #0
 8009b22:	492a      	ldr	r1, [pc, #168]	; (8009bcc <__ieee754_pow+0x25c>)
 8009b24:	f7f6 fea2 	bl	800086c <__aeabi_ddiv>
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	f6bf af40 	bge.w	80099ae <__ieee754_pow+0x3e>
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b38:	431c      	orrs	r4, r3
 8009b3a:	d108      	bne.n	8009b4e <__ieee754_pow+0x1de>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4610      	mov	r0, r2
 8009b42:	4619      	mov	r1, r3
 8009b44:	f7f6 fbb0 	bl	80002a8 <__aeabi_dsub>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	e78f      	b.n	8009a6e <__ieee754_pow+0xfe>
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	f47f af2c 	bne.w	80099ae <__ieee754_pow+0x3e>
 8009b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	e727      	b.n	80099ae <__ieee754_pow+0x3e>
 8009b5e:	0feb      	lsrs	r3, r5, #31
 8009b60:	3b01      	subs	r3, #1
 8009b62:	9306      	str	r3, [sp, #24]
 8009b64:	9a06      	ldr	r2, [sp, #24]
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	d102      	bne.n	8009b72 <__ieee754_pow+0x202>
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	463b      	mov	r3, r7
 8009b70:	e7e6      	b.n	8009b40 <__ieee754_pow+0x1d0>
 8009b72:	4b19      	ldr	r3, [pc, #100]	; (8009bd8 <__ieee754_pow+0x268>)
 8009b74:	4598      	cmp	r8, r3
 8009b76:	f340 80fb 	ble.w	8009d70 <__ieee754_pow+0x400>
 8009b7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009b7e:	4598      	cmp	r8, r3
 8009b80:	4b13      	ldr	r3, [pc, #76]	; (8009bd0 <__ieee754_pow+0x260>)
 8009b82:	dd0c      	ble.n	8009b9e <__ieee754_pow+0x22e>
 8009b84:	429c      	cmp	r4, r3
 8009b86:	dc0f      	bgt.n	8009ba8 <__ieee754_pow+0x238>
 8009b88:	f1b9 0f00 	cmp.w	r9, #0
 8009b8c:	da0f      	bge.n	8009bae <__ieee754_pow+0x23e>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	b009      	add	sp, #36	; 0x24
 8009b92:	ecbd 8b06 	vpop	{d8-d10}
 8009b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9a:	f000 bcc2 	b.w	800a522 <__math_oflow>
 8009b9e:	429c      	cmp	r4, r3
 8009ba0:	dbf2      	blt.n	8009b88 <__ieee754_pow+0x218>
 8009ba2:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <__ieee754_pow+0x25c>)
 8009ba4:	429c      	cmp	r4, r3
 8009ba6:	dd19      	ble.n	8009bdc <__ieee754_pow+0x26c>
 8009ba8:	f1b9 0f00 	cmp.w	r9, #0
 8009bac:	dcef      	bgt.n	8009b8e <__ieee754_pow+0x21e>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	b009      	add	sp, #36	; 0x24
 8009bb2:	ecbd 8b06 	vpop	{d8-d10}
 8009bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bba:	f000 bca9 	b.w	800a510 <__math_uflow>
 8009bbe:	bf00      	nop
 8009bc0:	fff00000 	.word	0xfff00000
 8009bc4:	7ff00000 	.word	0x7ff00000
 8009bc8:	433fffff 	.word	0x433fffff
 8009bcc:	3ff00000 	.word	0x3ff00000
 8009bd0:	3fefffff 	.word	0x3fefffff
 8009bd4:	3fe00000 	.word	0x3fe00000
 8009bd8:	41e00000 	.word	0x41e00000
 8009bdc:	4b60      	ldr	r3, [pc, #384]	; (8009d60 <__ieee754_pow+0x3f0>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	f7f6 fb62 	bl	80002a8 <__aeabi_dsub>
 8009be4:	a354      	add	r3, pc, #336	; (adr r3, 8009d38 <__ieee754_pow+0x3c8>)
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	4604      	mov	r4, r0
 8009bec:	460d      	mov	r5, r1
 8009bee:	f7f6 fd13 	bl	8000618 <__aeabi_dmul>
 8009bf2:	a353      	add	r3, pc, #332	; (adr r3, 8009d40 <__ieee754_pow+0x3d0>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	460f      	mov	r7, r1
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fd0a 	bl	8000618 <__aeabi_dmul>
 8009c04:	4b57      	ldr	r3, [pc, #348]	; (8009d64 <__ieee754_pow+0x3f4>)
 8009c06:	4682      	mov	sl, r0
 8009c08:	468b      	mov	fp, r1
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	4629      	mov	r1, r5
 8009c10:	f7f6 fd02 	bl	8000618 <__aeabi_dmul>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	a14b      	add	r1, pc, #300	; (adr r1, 8009d48 <__ieee754_pow+0x3d8>)
 8009c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c1e:	f7f6 fb43 	bl	80002a8 <__aeabi_dsub>
 8009c22:	4622      	mov	r2, r4
 8009c24:	462b      	mov	r3, r5
 8009c26:	f7f6 fcf7 	bl	8000618 <__aeabi_dmul>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	2000      	movs	r0, #0
 8009c30:	494d      	ldr	r1, [pc, #308]	; (8009d68 <__ieee754_pow+0x3f8>)
 8009c32:	f7f6 fb39 	bl	80002a8 <__aeabi_dsub>
 8009c36:	4622      	mov	r2, r4
 8009c38:	4680      	mov	r8, r0
 8009c3a:	4689      	mov	r9, r1
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7f6 fce9 	bl	8000618 <__aeabi_dmul>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fce3 	bl	8000618 <__aeabi_dmul>
 8009c52:	a33f      	add	r3, pc, #252	; (adr r3, 8009d50 <__ieee754_pow+0x3e0>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fcde 	bl	8000618 <__aeabi_dmul>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4650      	mov	r0, sl
 8009c62:	4659      	mov	r1, fp
 8009c64:	f7f6 fb20 	bl	80002a8 <__aeabi_dsub>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	4689      	mov	r9, r1
 8009c70:	4630      	mov	r0, r6
 8009c72:	4639      	mov	r1, r7
 8009c74:	f7f6 fb1a 	bl	80002ac <__adddf3>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	4632      	mov	r2, r6
 8009c7c:	463b      	mov	r3, r7
 8009c7e:	4604      	mov	r4, r0
 8009c80:	460d      	mov	r5, r1
 8009c82:	f7f6 fb11 	bl	80002a8 <__aeabi_dsub>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fb0b 	bl	80002a8 <__aeabi_dsub>
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	9a06      	ldr	r2, [sp, #24]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	468b      	mov	fp, r1
 8009c9e:	f040 81e7 	bne.w	800a070 <__ieee754_pow+0x700>
 8009ca2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009d58 <__ieee754_pow+0x3e8>
 8009ca6:	eeb0 8a47 	vmov.f32	s16, s14
 8009caa:	eef0 8a67 	vmov.f32	s17, s15
 8009cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009cb2:	2600      	movs	r6, #0
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cbc:	f7f6 faf4 	bl	80002a8 <__aeabi_dsub>
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	f7f6 fca8 	bl	8000618 <__aeabi_dmul>
 8009cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ccc:	4680      	mov	r8, r0
 8009cce:	4689      	mov	r9, r1
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	4659      	mov	r1, fp
 8009cd4:	f7f6 fca0 	bl	8000618 <__aeabi_dmul>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4640      	mov	r0, r8
 8009cde:	4649      	mov	r1, r9
 8009ce0:	f7f6 fae4 	bl	80002ac <__adddf3>
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	4680      	mov	r8, r0
 8009cea:	4689      	mov	r9, r1
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f7f6 fc92 	bl	8000618 <__aeabi_dmul>
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	4640      	mov	r0, r8
 8009d00:	f7f6 fad4 	bl	80002ac <__adddf3>
 8009d04:	4b19      	ldr	r3, [pc, #100]	; (8009d6c <__ieee754_pow+0x3fc>)
 8009d06:	4299      	cmp	r1, r3
 8009d08:	ec45 4b19 	vmov	d9, r4, r5
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	460f      	mov	r7, r1
 8009d10:	468b      	mov	fp, r1
 8009d12:	f340 82f0 	ble.w	800a2f6 <__ieee754_pow+0x986>
 8009d16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009d1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009d1e:	4303      	orrs	r3, r0
 8009d20:	f000 81e4 	beq.w	800a0ec <__ieee754_pow+0x77c>
 8009d24:	ec51 0b18 	vmov	r0, r1, d8
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f7f6 fee6 	bl	8000afc <__aeabi_dcmplt>
 8009d30:	3800      	subs	r0, #0
 8009d32:	bf18      	it	ne
 8009d34:	2001      	movne	r0, #1
 8009d36:	e72b      	b.n	8009b90 <__ieee754_pow+0x220>
 8009d38:	60000000 	.word	0x60000000
 8009d3c:	3ff71547 	.word	0x3ff71547
 8009d40:	f85ddf44 	.word	0xf85ddf44
 8009d44:	3e54ae0b 	.word	0x3e54ae0b
 8009d48:	55555555 	.word	0x55555555
 8009d4c:	3fd55555 	.word	0x3fd55555
 8009d50:	652b82fe 	.word	0x652b82fe
 8009d54:	3ff71547 	.word	0x3ff71547
 8009d58:	00000000 	.word	0x00000000
 8009d5c:	bff00000 	.word	0xbff00000
 8009d60:	3ff00000 	.word	0x3ff00000
 8009d64:	3fd00000 	.word	0x3fd00000
 8009d68:	3fe00000 	.word	0x3fe00000
 8009d6c:	408fffff 	.word	0x408fffff
 8009d70:	4bd5      	ldr	r3, [pc, #852]	; (800a0c8 <__ieee754_pow+0x758>)
 8009d72:	402b      	ands	r3, r5
 8009d74:	2200      	movs	r2, #0
 8009d76:	b92b      	cbnz	r3, 8009d84 <__ieee754_pow+0x414>
 8009d78:	4bd4      	ldr	r3, [pc, #848]	; (800a0cc <__ieee754_pow+0x75c>)
 8009d7a:	f7f6 fc4d 	bl	8000618 <__aeabi_dmul>
 8009d7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009d82:	460c      	mov	r4, r1
 8009d84:	1523      	asrs	r3, r4, #20
 8009d86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d8a:	4413      	add	r3, r2
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	4bd0      	ldr	r3, [pc, #832]	; (800a0d0 <__ieee754_pow+0x760>)
 8009d90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d9e:	dd08      	ble.n	8009db2 <__ieee754_pow+0x442>
 8009da0:	4bcc      	ldr	r3, [pc, #816]	; (800a0d4 <__ieee754_pow+0x764>)
 8009da2:	429c      	cmp	r4, r3
 8009da4:	f340 8162 	ble.w	800a06c <__ieee754_pow+0x6fc>
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	3301      	adds	r3, #1
 8009dac:	9305      	str	r3, [sp, #20]
 8009dae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009db2:	2400      	movs	r4, #0
 8009db4:	00e3      	lsls	r3, r4, #3
 8009db6:	9307      	str	r3, [sp, #28]
 8009db8:	4bc7      	ldr	r3, [pc, #796]	; (800a0d8 <__ieee754_pow+0x768>)
 8009dba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dbe:	ed93 7b00 	vldr	d7, [r3]
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	ec53 2b17 	vmov	r2, r3, d7
 8009dc8:	eeb0 9a47 	vmov.f32	s18, s14
 8009dcc:	eef0 9a67 	vmov.f32	s19, s15
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	f7f6 fa69 	bl	80002a8 <__aeabi_dsub>
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	4606      	mov	r6, r0
 8009dda:	460f      	mov	r7, r1
 8009ddc:	462b      	mov	r3, r5
 8009dde:	ec51 0b19 	vmov	r0, r1, d9
 8009de2:	f7f6 fa63 	bl	80002ac <__adddf3>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	2000      	movs	r0, #0
 8009dec:	49bb      	ldr	r1, [pc, #748]	; (800a0dc <__ieee754_pow+0x76c>)
 8009dee:	f7f6 fd3d 	bl	800086c <__aeabi_ddiv>
 8009df2:	ec41 0b1a 	vmov	d10, r0, r1
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	f7f6 fc0b 	bl	8000618 <__aeabi_dmul>
 8009e02:	2300      	movs	r3, #0
 8009e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e08:	9302      	str	r3, [sp, #8]
 8009e0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e0e:	46ab      	mov	fp, r5
 8009e10:	106d      	asrs	r5, r5, #1
 8009e12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009e16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009e1a:	ec41 0b18 	vmov	d8, r0, r1
 8009e1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009e22:	2200      	movs	r2, #0
 8009e24:	4640      	mov	r0, r8
 8009e26:	4649      	mov	r1, r9
 8009e28:	4614      	mov	r4, r2
 8009e2a:	461d      	mov	r5, r3
 8009e2c:	f7f6 fbf4 	bl	8000618 <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fa36 	bl	80002a8 <__aeabi_dsub>
 8009e3c:	ec53 2b19 	vmov	r2, r3, d9
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f7f6 fa2e 	bl	80002a8 <__aeabi_dsub>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4650      	mov	r0, sl
 8009e52:	4659      	mov	r1, fp
 8009e54:	f7f6 fa28 	bl	80002a8 <__aeabi_dsub>
 8009e58:	4642      	mov	r2, r8
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	f7f6 fbdc 	bl	8000618 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fa1e 	bl	80002a8 <__aeabi_dsub>
 8009e6c:	ec53 2b1a 	vmov	r2, r3, d10
 8009e70:	f7f6 fbd2 	bl	8000618 <__aeabi_dmul>
 8009e74:	ec53 2b18 	vmov	r2, r3, d8
 8009e78:	ec41 0b19 	vmov	d9, r0, r1
 8009e7c:	ec51 0b18 	vmov	r0, r1, d8
 8009e80:	f7f6 fbca 	bl	8000618 <__aeabi_dmul>
 8009e84:	a37c      	add	r3, pc, #496	; (adr r3, 800a078 <__ieee754_pow+0x708>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	f7f6 fbc3 	bl	8000618 <__aeabi_dmul>
 8009e92:	a37b      	add	r3, pc, #492	; (adr r3, 800a080 <__ieee754_pow+0x710>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fa08 	bl	80002ac <__adddf3>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	462b      	mov	r3, r5
 8009ea0:	f7f6 fbba 	bl	8000618 <__aeabi_dmul>
 8009ea4:	a378      	add	r3, pc, #480	; (adr r3, 800a088 <__ieee754_pow+0x718>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f7f6 f9ff 	bl	80002ac <__adddf3>
 8009eae:	4622      	mov	r2, r4
 8009eb0:	462b      	mov	r3, r5
 8009eb2:	f7f6 fbb1 	bl	8000618 <__aeabi_dmul>
 8009eb6:	a376      	add	r3, pc, #472	; (adr r3, 800a090 <__ieee754_pow+0x720>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	f7f6 f9f6 	bl	80002ac <__adddf3>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f7f6 fba8 	bl	8000618 <__aeabi_dmul>
 8009ec8:	a373      	add	r3, pc, #460	; (adr r3, 800a098 <__ieee754_pow+0x728>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 f9ed 	bl	80002ac <__adddf3>
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	f7f6 fb9f 	bl	8000618 <__aeabi_dmul>
 8009eda:	a371      	add	r3, pc, #452	; (adr r3, 800a0a0 <__ieee754_pow+0x730>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f7f6 f9e4 	bl	80002ac <__adddf3>
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460f      	mov	r7, r1
 8009eea:	462b      	mov	r3, r5
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7f6 fb92 	bl	8000618 <__aeabi_dmul>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4639      	mov	r1, r7
 8009efc:	f7f6 fb8c 	bl	8000618 <__aeabi_dmul>
 8009f00:	4642      	mov	r2, r8
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	464b      	mov	r3, r9
 8009f08:	ec51 0b18 	vmov	r0, r1, d8
 8009f0c:	f7f6 f9ce 	bl	80002ac <__adddf3>
 8009f10:	ec53 2b19 	vmov	r2, r3, d9
 8009f14:	f7f6 fb80 	bl	8000618 <__aeabi_dmul>
 8009f18:	4622      	mov	r2, r4
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	f7f6 f9c6 	bl	80002ac <__adddf3>
 8009f20:	4642      	mov	r2, r8
 8009f22:	4682      	mov	sl, r0
 8009f24:	468b      	mov	fp, r1
 8009f26:	464b      	mov	r3, r9
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	f7f6 fb74 	bl	8000618 <__aeabi_dmul>
 8009f30:	4b6b      	ldr	r3, [pc, #428]	; (800a0e0 <__ieee754_pow+0x770>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	4606      	mov	r6, r0
 8009f36:	460f      	mov	r7, r1
 8009f38:	f7f6 f9b8 	bl	80002ac <__adddf3>
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	465b      	mov	r3, fp
 8009f40:	f7f6 f9b4 	bl	80002ac <__adddf3>
 8009f44:	2000      	movs	r0, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	460d      	mov	r5, r1
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4640      	mov	r0, r8
 8009f50:	4649      	mov	r1, r9
 8009f52:	f7f6 fb61 	bl	8000618 <__aeabi_dmul>
 8009f56:	4b62      	ldr	r3, [pc, #392]	; (800a0e0 <__ieee754_pow+0x770>)
 8009f58:	4680      	mov	r8, r0
 8009f5a:	4689      	mov	r9, r1
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 f9a1 	bl	80002a8 <__aeabi_dsub>
 8009f66:	4632      	mov	r2, r6
 8009f68:	463b      	mov	r3, r7
 8009f6a:	f7f6 f99d 	bl	80002a8 <__aeabi_dsub>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4650      	mov	r0, sl
 8009f74:	4659      	mov	r1, fp
 8009f76:	f7f6 f997 	bl	80002a8 <__aeabi_dsub>
 8009f7a:	ec53 2b18 	vmov	r2, r3, d8
 8009f7e:	f7f6 fb4b 	bl	8000618 <__aeabi_dmul>
 8009f82:	4622      	mov	r2, r4
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	462b      	mov	r3, r5
 8009f8a:	ec51 0b19 	vmov	r0, r1, d9
 8009f8e:	f7f6 fb43 	bl	8000618 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 f987 	bl	80002ac <__adddf3>
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4649      	mov	r1, r9
 8009faa:	f7f6 f97f 	bl	80002ac <__adddf3>
 8009fae:	a33e      	add	r3, pc, #248	; (adr r3, 800a0a8 <__ieee754_pow+0x738>)
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	460d      	mov	r5, r1
 8009fba:	f7f6 fb2d 	bl	8000618 <__aeabi_dmul>
 8009fbe:	4642      	mov	r2, r8
 8009fc0:	ec41 0b18 	vmov	d8, r0, r1
 8009fc4:	464b      	mov	r3, r9
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 f96d 	bl	80002a8 <__aeabi_dsub>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 f967 	bl	80002a8 <__aeabi_dsub>
 8009fda:	a335      	add	r3, pc, #212	; (adr r3, 800a0b0 <__ieee754_pow+0x740>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 fb1a 	bl	8000618 <__aeabi_dmul>
 8009fe4:	a334      	add	r3, pc, #208	; (adr r3, 800a0b8 <__ieee754_pow+0x748>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	4606      	mov	r6, r0
 8009fec:	460f      	mov	r7, r1
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 fb11 	bl	8000618 <__aeabi_dmul>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 f955 	bl	80002ac <__adddf3>
 800a002:	9a07      	ldr	r2, [sp, #28]
 800a004:	4b37      	ldr	r3, [pc, #220]	; (800a0e4 <__ieee754_pow+0x774>)
 800a006:	4413      	add	r3, r2
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f7f6 f94e 	bl	80002ac <__adddf3>
 800a010:	4682      	mov	sl, r0
 800a012:	9805      	ldr	r0, [sp, #20]
 800a014:	468b      	mov	fp, r1
 800a016:	f7f6 fa95 	bl	8000544 <__aeabi_i2d>
 800a01a:	9a07      	ldr	r2, [sp, #28]
 800a01c:	4b32      	ldr	r3, [pc, #200]	; (800a0e8 <__ieee754_pow+0x778>)
 800a01e:	4413      	add	r3, r2
 800a020:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	4652      	mov	r2, sl
 800a02a:	465b      	mov	r3, fp
 800a02c:	ec51 0b18 	vmov	r0, r1, d8
 800a030:	f7f6 f93c 	bl	80002ac <__adddf3>
 800a034:	4642      	mov	r2, r8
 800a036:	464b      	mov	r3, r9
 800a038:	f7f6 f938 	bl	80002ac <__adddf3>
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	f7f6 f934 	bl	80002ac <__adddf3>
 800a044:	2000      	movs	r0, #0
 800a046:	4632      	mov	r2, r6
 800a048:	463b      	mov	r3, r7
 800a04a:	4604      	mov	r4, r0
 800a04c:	460d      	mov	r5, r1
 800a04e:	f7f6 f92b 	bl	80002a8 <__aeabi_dsub>
 800a052:	4642      	mov	r2, r8
 800a054:	464b      	mov	r3, r9
 800a056:	f7f6 f927 	bl	80002a8 <__aeabi_dsub>
 800a05a:	ec53 2b18 	vmov	r2, r3, d8
 800a05e:	f7f6 f923 	bl	80002a8 <__aeabi_dsub>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4650      	mov	r0, sl
 800a068:	4659      	mov	r1, fp
 800a06a:	e610      	b.n	8009c8e <__ieee754_pow+0x31e>
 800a06c:	2401      	movs	r4, #1
 800a06e:	e6a1      	b.n	8009db4 <__ieee754_pow+0x444>
 800a070:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a0c0 <__ieee754_pow+0x750>
 800a074:	e617      	b.n	8009ca6 <__ieee754_pow+0x336>
 800a076:	bf00      	nop
 800a078:	4a454eef 	.word	0x4a454eef
 800a07c:	3fca7e28 	.word	0x3fca7e28
 800a080:	93c9db65 	.word	0x93c9db65
 800a084:	3fcd864a 	.word	0x3fcd864a
 800a088:	a91d4101 	.word	0xa91d4101
 800a08c:	3fd17460 	.word	0x3fd17460
 800a090:	518f264d 	.word	0x518f264d
 800a094:	3fd55555 	.word	0x3fd55555
 800a098:	db6fabff 	.word	0xdb6fabff
 800a09c:	3fdb6db6 	.word	0x3fdb6db6
 800a0a0:	33333303 	.word	0x33333303
 800a0a4:	3fe33333 	.word	0x3fe33333
 800a0a8:	e0000000 	.word	0xe0000000
 800a0ac:	3feec709 	.word	0x3feec709
 800a0b0:	dc3a03fd 	.word	0xdc3a03fd
 800a0b4:	3feec709 	.word	0x3feec709
 800a0b8:	145b01f5 	.word	0x145b01f5
 800a0bc:	be3e2fe0 	.word	0xbe3e2fe0
 800a0c0:	00000000 	.word	0x00000000
 800a0c4:	3ff00000 	.word	0x3ff00000
 800a0c8:	7ff00000 	.word	0x7ff00000
 800a0cc:	43400000 	.word	0x43400000
 800a0d0:	0003988e 	.word	0x0003988e
 800a0d4:	000bb679 	.word	0x000bb679
 800a0d8:	0800a7c0 	.word	0x0800a7c0
 800a0dc:	3ff00000 	.word	0x3ff00000
 800a0e0:	40080000 	.word	0x40080000
 800a0e4:	0800a7e0 	.word	0x0800a7e0
 800a0e8:	0800a7d0 	.word	0x0800a7d0
 800a0ec:	a3b3      	add	r3, pc, #716	; (adr r3, 800a3bc <__ieee754_pow+0xa4c>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 f8d9 	bl	80002ac <__adddf3>
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	ec41 0b1a 	vmov	d10, r0, r1
 800a100:	462b      	mov	r3, r5
 800a102:	4630      	mov	r0, r6
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 f8cf 	bl	80002a8 <__aeabi_dsub>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	ec51 0b1a 	vmov	r0, r1, d10
 800a112:	f7f6 fd11 	bl	8000b38 <__aeabi_dcmpgt>
 800a116:	2800      	cmp	r0, #0
 800a118:	f47f ae04 	bne.w	8009d24 <__ieee754_pow+0x3b4>
 800a11c:	4aa2      	ldr	r2, [pc, #648]	; (800a3a8 <__ieee754_pow+0xa38>)
 800a11e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a122:	4293      	cmp	r3, r2
 800a124:	f340 8107 	ble.w	800a336 <__ieee754_pow+0x9c6>
 800a128:	151b      	asrs	r3, r3, #20
 800a12a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a12e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a132:	fa4a fa03 	asr.w	sl, sl, r3
 800a136:	44da      	add	sl, fp
 800a138:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a13c:	489b      	ldr	r0, [pc, #620]	; (800a3ac <__ieee754_pow+0xa3c>)
 800a13e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a142:	4108      	asrs	r0, r1
 800a144:	ea00 030a 	and.w	r3, r0, sl
 800a148:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a14c:	f1c1 0114 	rsb	r1, r1, #20
 800a150:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a154:	fa4a fa01 	asr.w	sl, sl, r1
 800a158:	f1bb 0f00 	cmp.w	fp, #0
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	4620      	mov	r0, r4
 800a162:	4629      	mov	r1, r5
 800a164:	bfb8      	it	lt
 800a166:	f1ca 0a00 	rsblt	sl, sl, #0
 800a16a:	f7f6 f89d 	bl	80002a8 <__aeabi_dsub>
 800a16e:	ec41 0b19 	vmov	d9, r0, r1
 800a172:	4642      	mov	r2, r8
 800a174:	464b      	mov	r3, r9
 800a176:	ec51 0b19 	vmov	r0, r1, d9
 800a17a:	f7f6 f897 	bl	80002ac <__adddf3>
 800a17e:	a37a      	add	r3, pc, #488	; (adr r3, 800a368 <__ieee754_pow+0x9f8>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	2000      	movs	r0, #0
 800a186:	4604      	mov	r4, r0
 800a188:	460d      	mov	r5, r1
 800a18a:	f7f6 fa45 	bl	8000618 <__aeabi_dmul>
 800a18e:	ec53 2b19 	vmov	r2, r3, d9
 800a192:	4606      	mov	r6, r0
 800a194:	460f      	mov	r7, r1
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f885 	bl	80002a8 <__aeabi_dsub>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	f7f6 f87f 	bl	80002a8 <__aeabi_dsub>
 800a1aa:	a371      	add	r3, pc, #452	; (adr r3, 800a370 <__ieee754_pow+0xa00>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 fa32 	bl	8000618 <__aeabi_dmul>
 800a1b4:	a370      	add	r3, pc, #448	; (adr r3, 800a378 <__ieee754_pow+0xa08>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	4680      	mov	r8, r0
 800a1bc:	4689      	mov	r9, r1
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 fa29 	bl	8000618 <__aeabi_dmul>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	f7f6 f86d 	bl	80002ac <__adddf3>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	460d      	mov	r5, r1
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4630      	mov	r0, r6
 800a1dc:	4639      	mov	r1, r7
 800a1de:	f7f6 f865 	bl	80002ac <__adddf3>
 800a1e2:	4632      	mov	r2, r6
 800a1e4:	463b      	mov	r3, r7
 800a1e6:	4680      	mov	r8, r0
 800a1e8:	4689      	mov	r9, r1
 800a1ea:	f7f6 f85d 	bl	80002a8 <__aeabi_dsub>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7f6 f857 	bl	80002a8 <__aeabi_dsub>
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	464b      	mov	r3, r9
 800a202:	4640      	mov	r0, r8
 800a204:	4649      	mov	r1, r9
 800a206:	f7f6 fa07 	bl	8000618 <__aeabi_dmul>
 800a20a:	a35d      	add	r3, pc, #372	; (adr r3, 800a380 <__ieee754_pow+0xa10>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	f7f6 fa00 	bl	8000618 <__aeabi_dmul>
 800a218:	a35b      	add	r3, pc, #364	; (adr r3, 800a388 <__ieee754_pow+0xa18>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 f843 	bl	80002a8 <__aeabi_dsub>
 800a222:	4622      	mov	r2, r4
 800a224:	462b      	mov	r3, r5
 800a226:	f7f6 f9f7 	bl	8000618 <__aeabi_dmul>
 800a22a:	a359      	add	r3, pc, #356	; (adr r3, 800a390 <__ieee754_pow+0xa20>)
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f7f6 f83c 	bl	80002ac <__adddf3>
 800a234:	4622      	mov	r2, r4
 800a236:	462b      	mov	r3, r5
 800a238:	f7f6 f9ee 	bl	8000618 <__aeabi_dmul>
 800a23c:	a356      	add	r3, pc, #344	; (adr r3, 800a398 <__ieee754_pow+0xa28>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	f7f6 f831 	bl	80002a8 <__aeabi_dsub>
 800a246:	4622      	mov	r2, r4
 800a248:	462b      	mov	r3, r5
 800a24a:	f7f6 f9e5 	bl	8000618 <__aeabi_dmul>
 800a24e:	a354      	add	r3, pc, #336	; (adr r3, 800a3a0 <__ieee754_pow+0xa30>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f7f6 f82a 	bl	80002ac <__adddf3>
 800a258:	4622      	mov	r2, r4
 800a25a:	462b      	mov	r3, r5
 800a25c:	f7f6 f9dc 	bl	8000618 <__aeabi_dmul>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4640      	mov	r0, r8
 800a266:	4649      	mov	r1, r9
 800a268:	f7f6 f81e 	bl	80002a8 <__aeabi_dsub>
 800a26c:	4604      	mov	r4, r0
 800a26e:	460d      	mov	r5, r1
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4640      	mov	r0, r8
 800a276:	4649      	mov	r1, r9
 800a278:	f7f6 f9ce 	bl	8000618 <__aeabi_dmul>
 800a27c:	2200      	movs	r2, #0
 800a27e:	ec41 0b19 	vmov	d9, r0, r1
 800a282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a286:	4620      	mov	r0, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	f7f6 f80d 	bl	80002a8 <__aeabi_dsub>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	ec51 0b19 	vmov	r0, r1, d9
 800a296:	f7f6 fae9 	bl	800086c <__aeabi_ddiv>
 800a29a:	4632      	mov	r2, r6
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	463b      	mov	r3, r7
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	f7f6 f9b7 	bl	8000618 <__aeabi_dmul>
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	f7f5 fffd 	bl	80002ac <__adddf3>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f5 fff5 	bl	80002a8 <__aeabi_dsub>
 800a2be:	4642      	mov	r2, r8
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	f7f5 fff1 	bl	80002a8 <__aeabi_dsub>
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	4939      	ldr	r1, [pc, #228]	; (800a3b0 <__ieee754_pow+0xa40>)
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	f7f5 ffeb 	bl	80002a8 <__aeabi_dsub>
 800a2d2:	ec41 0b10 	vmov	d0, r0, r1
 800a2d6:	ee10 3a90 	vmov	r3, s1
 800a2da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a2de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2e2:	da2b      	bge.n	800a33c <__ieee754_pow+0x9cc>
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	f000 f877 	bl	800a3d8 <scalbn>
 800a2ea:	ec51 0b10 	vmov	r0, r1, d0
 800a2ee:	ec53 2b18 	vmov	r2, r3, d8
 800a2f2:	f7ff bbee 	b.w	8009ad2 <__ieee754_pow+0x162>
 800a2f6:	4b2f      	ldr	r3, [pc, #188]	; (800a3b4 <__ieee754_pow+0xa44>)
 800a2f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2fc:	429e      	cmp	r6, r3
 800a2fe:	f77f af0d 	ble.w	800a11c <__ieee754_pow+0x7ac>
 800a302:	4b2d      	ldr	r3, [pc, #180]	; (800a3b8 <__ieee754_pow+0xa48>)
 800a304:	440b      	add	r3, r1
 800a306:	4303      	orrs	r3, r0
 800a308:	d009      	beq.n	800a31e <__ieee754_pow+0x9ae>
 800a30a:	ec51 0b18 	vmov	r0, r1, d8
 800a30e:	2200      	movs	r2, #0
 800a310:	2300      	movs	r3, #0
 800a312:	f7f6 fbf3 	bl	8000afc <__aeabi_dcmplt>
 800a316:	3800      	subs	r0, #0
 800a318:	bf18      	it	ne
 800a31a:	2001      	movne	r0, #1
 800a31c:	e448      	b.n	8009bb0 <__ieee754_pow+0x240>
 800a31e:	4622      	mov	r2, r4
 800a320:	462b      	mov	r3, r5
 800a322:	f7f5 ffc1 	bl	80002a8 <__aeabi_dsub>
 800a326:	4642      	mov	r2, r8
 800a328:	464b      	mov	r3, r9
 800a32a:	f7f6 fbfb 	bl	8000b24 <__aeabi_dcmpge>
 800a32e:	2800      	cmp	r0, #0
 800a330:	f43f aef4 	beq.w	800a11c <__ieee754_pow+0x7ac>
 800a334:	e7e9      	b.n	800a30a <__ieee754_pow+0x99a>
 800a336:	f04f 0a00 	mov.w	sl, #0
 800a33a:	e71a      	b.n	800a172 <__ieee754_pow+0x802>
 800a33c:	ec51 0b10 	vmov	r0, r1, d0
 800a340:	4619      	mov	r1, r3
 800a342:	e7d4      	b.n	800a2ee <__ieee754_pow+0x97e>
 800a344:	491a      	ldr	r1, [pc, #104]	; (800a3b0 <__ieee754_pow+0xa40>)
 800a346:	2000      	movs	r0, #0
 800a348:	f7ff bb31 	b.w	80099ae <__ieee754_pow+0x3e>
 800a34c:	2000      	movs	r0, #0
 800a34e:	2100      	movs	r1, #0
 800a350:	f7ff bb2d 	b.w	80099ae <__ieee754_pow+0x3e>
 800a354:	4630      	mov	r0, r6
 800a356:	4639      	mov	r1, r7
 800a358:	f7ff bb29 	b.w	80099ae <__ieee754_pow+0x3e>
 800a35c:	9204      	str	r2, [sp, #16]
 800a35e:	f7ff bb7b 	b.w	8009a58 <__ieee754_pow+0xe8>
 800a362:	2300      	movs	r3, #0
 800a364:	f7ff bb65 	b.w	8009a32 <__ieee754_pow+0xc2>
 800a368:	00000000 	.word	0x00000000
 800a36c:	3fe62e43 	.word	0x3fe62e43
 800a370:	fefa39ef 	.word	0xfefa39ef
 800a374:	3fe62e42 	.word	0x3fe62e42
 800a378:	0ca86c39 	.word	0x0ca86c39
 800a37c:	be205c61 	.word	0xbe205c61
 800a380:	72bea4d0 	.word	0x72bea4d0
 800a384:	3e663769 	.word	0x3e663769
 800a388:	c5d26bf1 	.word	0xc5d26bf1
 800a38c:	3ebbbd41 	.word	0x3ebbbd41
 800a390:	af25de2c 	.word	0xaf25de2c
 800a394:	3f11566a 	.word	0x3f11566a
 800a398:	16bebd93 	.word	0x16bebd93
 800a39c:	3f66c16c 	.word	0x3f66c16c
 800a3a0:	5555553e 	.word	0x5555553e
 800a3a4:	3fc55555 	.word	0x3fc55555
 800a3a8:	3fe00000 	.word	0x3fe00000
 800a3ac:	fff00000 	.word	0xfff00000
 800a3b0:	3ff00000 	.word	0x3ff00000
 800a3b4:	4090cbff 	.word	0x4090cbff
 800a3b8:	3f6f3400 	.word	0x3f6f3400
 800a3bc:	652b82fe 	.word	0x652b82fe
 800a3c0:	3c971547 	.word	0x3c971547

0800a3c4 <fabs>:
 800a3c4:	ec51 0b10 	vmov	r0, r1, d0
 800a3c8:	ee10 2a10 	vmov	r2, s0
 800a3cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3d0:	ec43 2b10 	vmov	d0, r2, r3
 800a3d4:	4770      	bx	lr
	...

0800a3d8 <scalbn>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	ec55 4b10 	vmov	r4, r5, d0
 800a3de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	b999      	cbnz	r1, 800a410 <scalbn+0x38>
 800a3e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a3ec:	4323      	orrs	r3, r4
 800a3ee:	d03f      	beq.n	800a470 <scalbn+0x98>
 800a3f0:	4b35      	ldr	r3, [pc, #212]	; (800a4c8 <scalbn+0xf0>)
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	ee10 0a10 	vmov	r0, s0
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f7f6 f90d 	bl	8000618 <__aeabi_dmul>
 800a3fe:	4b33      	ldr	r3, [pc, #204]	; (800a4cc <scalbn+0xf4>)
 800a400:	429e      	cmp	r6, r3
 800a402:	4604      	mov	r4, r0
 800a404:	460d      	mov	r5, r1
 800a406:	da10      	bge.n	800a42a <scalbn+0x52>
 800a408:	a327      	add	r3, pc, #156	; (adr r3, 800a4a8 <scalbn+0xd0>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	e01f      	b.n	800a450 <scalbn+0x78>
 800a410:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a414:	4291      	cmp	r1, r2
 800a416:	d10c      	bne.n	800a432 <scalbn+0x5a>
 800a418:	ee10 2a10 	vmov	r2, s0
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f5 ff44 	bl	80002ac <__adddf3>
 800a424:	4604      	mov	r4, r0
 800a426:	460d      	mov	r5, r1
 800a428:	e022      	b.n	800a470 <scalbn+0x98>
 800a42a:	460b      	mov	r3, r1
 800a42c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a430:	3936      	subs	r1, #54	; 0x36
 800a432:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a436:	4296      	cmp	r6, r2
 800a438:	dd0d      	ble.n	800a456 <scalbn+0x7e>
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	a11c      	add	r1, pc, #112	; (adr r1, 800a4b0 <scalbn+0xd8>)
 800a43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a442:	da02      	bge.n	800a44a <scalbn+0x72>
 800a444:	a11c      	add	r1, pc, #112	; (adr r1, 800a4b8 <scalbn+0xe0>)
 800a446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a44a:	a319      	add	r3, pc, #100	; (adr r3, 800a4b0 <scalbn+0xd8>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	f7f6 f8e2 	bl	8000618 <__aeabi_dmul>
 800a454:	e7e6      	b.n	800a424 <scalbn+0x4c>
 800a456:	1872      	adds	r2, r6, r1
 800a458:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a45c:	428a      	cmp	r2, r1
 800a45e:	dcec      	bgt.n	800a43a <scalbn+0x62>
 800a460:	2a00      	cmp	r2, #0
 800a462:	dd08      	ble.n	800a476 <scalbn+0x9e>
 800a464:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a46c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a470:	ec45 4b10 	vmov	d0, r4, r5
 800a474:	bd70      	pop	{r4, r5, r6, pc}
 800a476:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a47a:	da08      	bge.n	800a48e <scalbn+0xb6>
 800a47c:	2d00      	cmp	r5, #0
 800a47e:	a10a      	add	r1, pc, #40	; (adr r1, 800a4a8 <scalbn+0xd0>)
 800a480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a484:	dac0      	bge.n	800a408 <scalbn+0x30>
 800a486:	a10e      	add	r1, pc, #56	; (adr r1, 800a4c0 <scalbn+0xe8>)
 800a488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a48c:	e7bc      	b.n	800a408 <scalbn+0x30>
 800a48e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a492:	3236      	adds	r2, #54	; 0x36
 800a494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a498:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a49c:	4620      	mov	r0, r4
 800a49e:	4b0c      	ldr	r3, [pc, #48]	; (800a4d0 <scalbn+0xf8>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	e7d5      	b.n	800a450 <scalbn+0x78>
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	c2f8f359 	.word	0xc2f8f359
 800a4ac:	01a56e1f 	.word	0x01a56e1f
 800a4b0:	8800759c 	.word	0x8800759c
 800a4b4:	7e37e43c 	.word	0x7e37e43c
 800a4b8:	8800759c 	.word	0x8800759c
 800a4bc:	fe37e43c 	.word	0xfe37e43c
 800a4c0:	c2f8f359 	.word	0xc2f8f359
 800a4c4:	81a56e1f 	.word	0x81a56e1f
 800a4c8:	43500000 	.word	0x43500000
 800a4cc:	ffff3cb0 	.word	0xffff3cb0
 800a4d0:	3c900000 	.word	0x3c900000

0800a4d4 <with_errno>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	460d      	mov	r5, r1
 800a4da:	4616      	mov	r6, r2
 800a4dc:	f7fe fd50 	bl	8008f80 <__errno>
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	6006      	str	r6, [r0, #0]
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}

0800a4e8 <xflow>:
 800a4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	461d      	mov	r5, r3
 800a4ee:	b108      	cbz	r0, 800a4f4 <xflow+0xc>
 800a4f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4f4:	e9cd 2300 	strd	r2, r3, [sp]
 800a4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	f7f6 f88a 	bl	8000618 <__aeabi_dmul>
 800a504:	2222      	movs	r2, #34	; 0x22
 800a506:	b003      	add	sp, #12
 800a508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a50c:	f7ff bfe2 	b.w	800a4d4 <with_errno>

0800a510 <__math_uflow>:
 800a510:	b508      	push	{r3, lr}
 800a512:	2200      	movs	r2, #0
 800a514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a518:	f7ff ffe6 	bl	800a4e8 <xflow>
 800a51c:	ec41 0b10 	vmov	d0, r0, r1
 800a520:	bd08      	pop	{r3, pc}

0800a522 <__math_oflow>:
 800a522:	b508      	push	{r3, lr}
 800a524:	2200      	movs	r2, #0
 800a526:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a52a:	f7ff ffdd 	bl	800a4e8 <xflow>
 800a52e:	ec41 0b10 	vmov	d0, r0, r1
 800a532:	bd08      	pop	{r3, pc}

0800a534 <__ieee754_sqrt>:
 800a534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a538:	ec55 4b10 	vmov	r4, r5, d0
 800a53c:	4e67      	ldr	r6, [pc, #412]	; (800a6dc <__ieee754_sqrt+0x1a8>)
 800a53e:	43ae      	bics	r6, r5
 800a540:	ee10 0a10 	vmov	r0, s0
 800a544:	ee10 2a10 	vmov	r2, s0
 800a548:	4629      	mov	r1, r5
 800a54a:	462b      	mov	r3, r5
 800a54c:	d10d      	bne.n	800a56a <__ieee754_sqrt+0x36>
 800a54e:	f7f6 f863 	bl	8000618 <__aeabi_dmul>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4620      	mov	r0, r4
 800a558:	4629      	mov	r1, r5
 800a55a:	f7f5 fea7 	bl	80002ac <__adddf3>
 800a55e:	4604      	mov	r4, r0
 800a560:	460d      	mov	r5, r1
 800a562:	ec45 4b10 	vmov	d0, r4, r5
 800a566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	2d00      	cmp	r5, #0
 800a56c:	dc0b      	bgt.n	800a586 <__ieee754_sqrt+0x52>
 800a56e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a572:	4326      	orrs	r6, r4
 800a574:	d0f5      	beq.n	800a562 <__ieee754_sqrt+0x2e>
 800a576:	b135      	cbz	r5, 800a586 <__ieee754_sqrt+0x52>
 800a578:	f7f5 fe96 	bl	80002a8 <__aeabi_dsub>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	f7f6 f974 	bl	800086c <__aeabi_ddiv>
 800a584:	e7eb      	b.n	800a55e <__ieee754_sqrt+0x2a>
 800a586:	1509      	asrs	r1, r1, #20
 800a588:	f000 808d 	beq.w	800a6a6 <__ieee754_sqrt+0x172>
 800a58c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a590:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a598:	07c9      	lsls	r1, r1, #31
 800a59a:	bf5c      	itt	pl
 800a59c:	005b      	lslpl	r3, r3, #1
 800a59e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a5a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5a6:	bf58      	it	pl
 800a5a8:	0052      	lslpl	r2, r2, #1
 800a5aa:	2500      	movs	r5, #0
 800a5ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a5b0:	1076      	asrs	r6, r6, #1
 800a5b2:	0052      	lsls	r2, r2, #1
 800a5b4:	f04f 0e16 	mov.w	lr, #22
 800a5b8:	46ac      	mov	ip, r5
 800a5ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5be:	eb0c 0001 	add.w	r0, ip, r1
 800a5c2:	4298      	cmp	r0, r3
 800a5c4:	bfde      	ittt	le
 800a5c6:	1a1b      	suble	r3, r3, r0
 800a5c8:	eb00 0c01 	addle.w	ip, r0, r1
 800a5cc:	186d      	addle	r5, r5, r1
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	f1be 0e01 	subs.w	lr, lr, #1
 800a5d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a5d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a5dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a5e0:	d1ed      	bne.n	800a5be <__ieee754_sqrt+0x8a>
 800a5e2:	4674      	mov	r4, lr
 800a5e4:	2720      	movs	r7, #32
 800a5e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a5ea:	4563      	cmp	r3, ip
 800a5ec:	eb01 000e 	add.w	r0, r1, lr
 800a5f0:	dc02      	bgt.n	800a5f8 <__ieee754_sqrt+0xc4>
 800a5f2:	d113      	bne.n	800a61c <__ieee754_sqrt+0xe8>
 800a5f4:	4290      	cmp	r0, r2
 800a5f6:	d811      	bhi.n	800a61c <__ieee754_sqrt+0xe8>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	eb00 0e01 	add.w	lr, r0, r1
 800a5fe:	da57      	bge.n	800a6b0 <__ieee754_sqrt+0x17c>
 800a600:	f1be 0f00 	cmp.w	lr, #0
 800a604:	db54      	blt.n	800a6b0 <__ieee754_sqrt+0x17c>
 800a606:	f10c 0801 	add.w	r8, ip, #1
 800a60a:	eba3 030c 	sub.w	r3, r3, ip
 800a60e:	4290      	cmp	r0, r2
 800a610:	bf88      	it	hi
 800a612:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a616:	1a12      	subs	r2, r2, r0
 800a618:	440c      	add	r4, r1
 800a61a:	46c4      	mov	ip, r8
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	3f01      	subs	r7, #1
 800a620:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a624:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a628:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a62c:	d1dd      	bne.n	800a5ea <__ieee754_sqrt+0xb6>
 800a62e:	4313      	orrs	r3, r2
 800a630:	d01b      	beq.n	800a66a <__ieee754_sqrt+0x136>
 800a632:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a6e0 <__ieee754_sqrt+0x1ac>
 800a636:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a6e4 <__ieee754_sqrt+0x1b0>
 800a63a:	e9da 0100 	ldrd	r0, r1, [sl]
 800a63e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a642:	f7f5 fe31 	bl	80002a8 <__aeabi_dsub>
 800a646:	e9da 8900 	ldrd	r8, r9, [sl]
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4640      	mov	r0, r8
 800a650:	4649      	mov	r1, r9
 800a652:	f7f6 fa5d 	bl	8000b10 <__aeabi_dcmple>
 800a656:	b140      	cbz	r0, 800a66a <__ieee754_sqrt+0x136>
 800a658:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a65c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a660:	e9db 2300 	ldrd	r2, r3, [fp]
 800a664:	d126      	bne.n	800a6b4 <__ieee754_sqrt+0x180>
 800a666:	3501      	adds	r5, #1
 800a668:	463c      	mov	r4, r7
 800a66a:	106a      	asrs	r2, r5, #1
 800a66c:	0863      	lsrs	r3, r4, #1
 800a66e:	07e9      	lsls	r1, r5, #31
 800a670:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a674:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a678:	bf48      	it	mi
 800a67a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a67e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a682:	461c      	mov	r4, r3
 800a684:	e76d      	b.n	800a562 <__ieee754_sqrt+0x2e>
 800a686:	0ad3      	lsrs	r3, r2, #11
 800a688:	3815      	subs	r0, #21
 800a68a:	0552      	lsls	r2, r2, #21
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0fa      	beq.n	800a686 <__ieee754_sqrt+0x152>
 800a690:	02dc      	lsls	r4, r3, #11
 800a692:	d50a      	bpl.n	800a6aa <__ieee754_sqrt+0x176>
 800a694:	f1c1 0420 	rsb	r4, r1, #32
 800a698:	fa22 f404 	lsr.w	r4, r2, r4
 800a69c:	1e4d      	subs	r5, r1, #1
 800a69e:	408a      	lsls	r2, r1
 800a6a0:	4323      	orrs	r3, r4
 800a6a2:	1b41      	subs	r1, r0, r5
 800a6a4:	e772      	b.n	800a58c <__ieee754_sqrt+0x58>
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	e7f0      	b.n	800a68c <__ieee754_sqrt+0x158>
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	3101      	adds	r1, #1
 800a6ae:	e7ef      	b.n	800a690 <__ieee754_sqrt+0x15c>
 800a6b0:	46e0      	mov	r8, ip
 800a6b2:	e7aa      	b.n	800a60a <__ieee754_sqrt+0xd6>
 800a6b4:	f7f5 fdfa 	bl	80002ac <__adddf3>
 800a6b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f6 fa1a 	bl	8000afc <__aeabi_dcmplt>
 800a6c8:	b120      	cbz	r0, 800a6d4 <__ieee754_sqrt+0x1a0>
 800a6ca:	1ca0      	adds	r0, r4, #2
 800a6cc:	bf08      	it	eq
 800a6ce:	3501      	addeq	r5, #1
 800a6d0:	3402      	adds	r4, #2
 800a6d2:	e7ca      	b.n	800a66a <__ieee754_sqrt+0x136>
 800a6d4:	3401      	adds	r4, #1
 800a6d6:	f024 0401 	bic.w	r4, r4, #1
 800a6da:	e7c6      	b.n	800a66a <__ieee754_sqrt+0x136>
 800a6dc:	7ff00000 	.word	0x7ff00000
 800a6e0:	20000078 	.word	0x20000078
 800a6e4:	20000080 	.word	0x20000080

0800a6e8 <_init>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	bf00      	nop
 800a6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	469e      	mov	lr, r3
 800a6f2:	4770      	bx	lr

0800a6f4 <_fini>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	bf00      	nop
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr
