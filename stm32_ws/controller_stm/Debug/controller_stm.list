
controller_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005920  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005ac0  08005ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b54  08005b54  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b5c  08005b5c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  08005bc0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08005bc0  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e982  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ce  00000000  00000000  0002ea51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00030b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092a  00000000  00000000  00031718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023849  00000000  00000000  00032042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc12  00000000  00000000  0005588b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de4bd  00000000  00000000  0006349d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000364c  00000000  00000000  0014195c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00144fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005aa8 	.word	0x08005aa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005aa8 	.word	0x08005aa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b097      	sub	sp, #92	; 0x5c
 8000580:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//Initialize structure variables to nothing
	uint8_t leftToggleUD = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t leftToggleLR = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t rightToggleUD = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t rightToggleLR = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t subDown = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t subUp = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t screenshot = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fc59 	bl	8000e62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f8aa 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f9de 	bl	8000974 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b8:	f000 f9be 	bl	8000938 <MX_DMA_Init>
  MX_ADC1_Init();
 80005bc:	f000 f8f6 	bl	80007ac <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f98a 	bl	80008d8 <MX_USART2_UART_Init>
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_2);
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_3);
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_4);

  //Turn on Power LED
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	484c      	ldr	r0, [pc, #304]	; (80006f8 <main+0x17c>)
 80005c8:	f002 faee 	bl	8002ba8 <HAL_GPIO_TogglePin>

  //Buffer to be transmitted
  //25 indices for 4 three digit numbers, 6 commas, a carriage return and newline
  //and 3 single digits. Added two extra indices as a buffer so that sprintf doesn't error
  char buffer[25];
  for(int i = 0; i < 35; i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80005d0:	e007      	b.n	80005e2 <main+0x66>
  {
	  buffer[i] = 0;
 80005d2:	463a      	mov	r2, r7
 80005d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005d6:	4413      	add	r3, r2
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 80005dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005de:	3301      	adds	r3, #1
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80005e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e4:	2b22      	cmp	r3, #34	; 0x22
 80005e6:	ddf4      	ble.n	80005d2 <main+0x56>
  /* USER CODE BEGIN WHILE */
	//Start ADC in DMA mode
	while (1)
	{
		//Poll data from GPIO pins and ADC channels 1-4
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) subUp = 1;
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f002 faaa 	bl	8002b48 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d102      	bne.n	8000600 <main+0x84>
 80005fa:	2301      	movs	r3, #1
 80005fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET) subDown = 1;
 8000600:	2120      	movs	r1, #32
 8000602:	483d      	ldr	r0, [pc, #244]	; (80006f8 <main+0x17c>)
 8000604:	f002 faa0 	bl	8002b48 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d102      	bne.n	8000614 <main+0x98>
 800060e:	2301      	movs	r3, #1
 8000610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET) screenshot = 1;
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	4838      	ldr	r0, [pc, #224]	; (80006f8 <main+0x17c>)
 8000618:	f002 fa96 	bl	8002b48 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d102      	bne.n	8000628 <main+0xac>
 8000622:	2301      	movs	r3, #1
 8000624:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		HAL_ADC_Start_DMA(&hadc1, toggleData, 4);
 8000628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062c:	2204      	movs	r2, #4
 800062e:	4619      	mov	r1, r3
 8000630:	4832      	ldr	r0, [pc, #200]	; (80006fc <main+0x180>)
 8000632:	f000 ffcf 	bl	80015d4 <HAL_ADC_Start_DMA>

		leftToggleUD = toggleData[0];
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		leftToggleLR = toggleData[1];
 800063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		rightToggleUD = toggleData[2];
 8000642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		rightToggleLR = toggleData[3];
 8000648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800064a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		//Local debug
		localbuff[0] = leftToggleUD;
 800064e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000652:	773b      	strb	r3, [r7, #28]
		localbuff[1] = leftToggleLR;
 8000654:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000658:	777b      	strb	r3, [r7, #29]
		localbuff[2] = rightToggleUD;
 800065a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800065e:	77bb      	strb	r3, [r7, #30]
		localbuff[3] = rightToggleLR;
 8000660:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000664:	77fb      	strb	r3, [r7, #31]
		localbuff[4] = subUp;
 8000666:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800066a:	f887 3020 	strb.w	r3, [r7, #32]
		localbuff[5] = subDown;
 800066e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000672:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		localbuff[6] = screenshot;
 8000676:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800067a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		sprintf(buffer, "%u,%u,%u,%u,%u,%u,%u\n\r", leftToggleUD, leftToggleLR,
 800067e:	f897 6037 	ldrb.w	r6, [r7, #55]	; 0x37
 8000682:	f897 c036 	ldrb.w	ip, [r7, #54]	; 0x36
 8000686:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800068a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800068e:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8000692:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
 8000696:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
 800069a:	463d      	mov	r5, r7
 800069c:	9404      	str	r4, [sp, #16]
 800069e:	9003      	str	r0, [sp, #12]
 80006a0:	9102      	str	r1, [sp, #8]
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4663      	mov	r3, ip
 80006a8:	4632      	mov	r2, r6
 80006aa:	4915      	ldr	r1, [pc, #84]	; (8000700 <main+0x184>)
 80006ac:	4628      	mov	r0, r5
 80006ae:	f004 fd57 	bl	8005160 <siprintf>
						rightToggleUD, rightToggleLR, subUp, subDown, screenshot);

		//Transmit Data
		if(HAL_UART_Transmit(&huart2, (uint8_t *)buffer, sizeof(buffer), HAL_MAX_DELAY) == HAL_OK)
 80006b2:	4639      	mov	r1, r7
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b8:	2219      	movs	r2, #25
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <main+0x188>)
 80006bc:	f003 fcd6 	bl	800406c <HAL_UART_Transmit>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d190      	bne.n	80005e8 <main+0x6c>
		{
			//Delay because we don't need to transmit that fast - this is a controller operated by humans
			HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	; 0xfa
 80006c8:	f000 fc40 	bl	8000f4c <HAL_Delay>
			//Reset everything to 0 once data is transmitted
			subUp = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			subDown = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			screenshot = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			leftToggleLR = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			leftToggleUD = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rightToggleLR = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			rightToggleUD = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) subUp = 1;
 80006f6:	e777      	b.n	80005e8 <main+0x6c>
 80006f8:	48000400 	.word	0x48000400
 80006fc:	20000078 	.word	0x20000078
 8000700:	08005ac0 	.word	0x08005ac0
 8000704:	20000128 	.word	0x20000128

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b096      	sub	sp, #88	; 0x58
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2244      	movs	r2, #68	; 0x44
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fd42 	bl	80051a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800072e:	f002 fa63 	bl	8002bf8 <HAL_PWREx_ControlVoltageScaling>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000738:	f000 f9c0 	bl	8000abc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000744:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000746:	2340      	movs	r3, #64	; 0x40
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074e:	2302      	movs	r3, #2
 8000750:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000756:	230a      	movs	r3, #10
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800075a:	2307      	movs	r3, #7
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fa9a 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000776:	f000 f9a1 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2303      	movs	r3, #3
 8000780:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	2104      	movs	r1, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fe9a 	bl	80034cc <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800079e:	f000 f98d 	bl	8000abc <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3758      	adds	r7, #88	; 0x58
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007c4:	4a3f      	ldr	r2, [pc, #252]	; (80008c4 <MX_ADC1_Init+0x118>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c8:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007ce:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007d0:	2210      	movs	r2, #16
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b3a      	ldr	r3, [pc, #232]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e0:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ec:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007f4:	2204      	movs	r2, #4
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f8:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_ADC1_Init+0x114>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <MX_ADC1_Init+0x114>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <MX_ADC1_Init+0x114>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_ADC1_Init+0x114>)
 800080e:	2201      	movs	r2, #1
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_ADC1_Init+0x114>)
 8000816:	2200      	movs	r2, #0
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_ADC1_Init+0x114>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000822:	4827      	ldr	r0, [pc, #156]	; (80008c0 <MX_ADC1_Init+0x114>)
 8000824:	f000 fd90 	bl	8001348 <HAL_ADC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800082e:	f000 f945 	bl	8000abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000832:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_ADC1_Init+0x11c>)
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	2306      	movs	r3, #6
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083e:	237f      	movs	r3, #127	; 0x7f
 8000840:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000842:	2304      	movs	r3, #4
 8000844:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <MX_ADC1_Init+0x114>)
 8000850:	f000 ff62 	bl	8001718 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800085a:	f000 f92f 	bl	8000abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_ADC1_Init+0x120>)
 8000860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000862:	230c      	movs	r3, #12
 8000864:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_ADC1_Init+0x114>)
 8000870:	f000 ff52 	bl	8001718 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800087a:	f000 f91f 	bl	8000abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_ADC1_Init+0x124>)
 8000880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000882:	2312      	movs	r3, #18
 8000884:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_ADC1_Init+0x114>)
 800088c:	f000 ff44 	bl	8001718 <HAL_ADC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000896:	f000 f911 	bl	8000abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_ADC1_Init+0x128>)
 800089c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800089e:	2318      	movs	r3, #24
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_ADC1_Init+0x114>)
 80008a8:	f000 ff36 	bl	8001718 <HAL_ADC_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80008b2:	f000 f903 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000078 	.word	0x20000078
 80008c4:	50040000 	.word	0x50040000
 80008c8:	04300002 	.word	0x04300002
 80008cc:	08600004 	.word	0x08600004
 80008d0:	0c900008 	.word	0x0c900008
 80008d4:	10c00010 	.word	0x10c00010

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <MX_USART2_UART_Init+0x5c>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x58>)
 800091c:	f003 fb58 	bl	8003fd0 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f8c9 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000128 	.word	0x20000128
 8000934:	40004400 	.word	0x40004400

08000938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_DMA_Init+0x38>)
 8000940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <MX_DMA_Init+0x38>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6493      	str	r3, [r2, #72]	; 0x48
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_DMA_Init+0x38>)
 800094c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200b      	movs	r0, #11
 800095c:	f001 fccd 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000960:	200b      	movs	r0, #11
 8000962:	f001 fce6 	bl	8002332 <HAL_NVIC_EnableIRQ>

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a48      	ldr	r2, [pc, #288]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a42      	ldr	r2, [pc, #264]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a3c      	ldr	r2, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a36      	ldr	r2, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b34      	ldr	r3, [pc, #208]	; (8000ab0 <MX_GPIO_Init+0x13c>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	21b0      	movs	r1, #176	; 0xb0
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f002 f8c1 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Power_LED_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80009fc:	482d      	ldr	r0, [pc, #180]	; (8000ab4 <MX_GPIO_Init+0x140>)
 80009fe:	f002 f8bb 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0x144>)
 8000a1a:	f001 ff1b 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a1e:	23b0      	movs	r3, #176	; 0xb0
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f001 ff0c 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f001 feff 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Power_LED_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Power_LED_Pin;
 8000a56:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0x140>)
 8000a70:	f001 fef0 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sub_Up_Pin */
  GPIO_InitStruct.Pin = Sub_Up_Pin;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sub_Up_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f001 fee2 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sub_Down_Pin Screenshot_Pin */
  GPIO_InitStruct.Pin = Sub_Down_Pin|Screenshot_Pin;
 8000a90:	23a0      	movs	r3, #160	; 0xa0
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0x140>)
 8000aa4:	f001 fed6 	bl	8002854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48000800 	.word	0x48000800

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0a4      	sub	sp, #144	; 0x90
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2268      	movs	r2, #104	; 0x68
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fb35 	bl	80051a0 <memset>
  if(hadc->Instance==ADC1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a3b      	ldr	r2, [pc, #236]	; (8000c28 <HAL_ADC_MspInit+0x118>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d16f      	bne.n	8000c20 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b44:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b4a:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b54:	2308      	movs	r3, #8
 8000b56:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 fed0 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b7a:	f7ff ff9f 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_ADC_MspInit+0x11c>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <HAL_ADC_MspInit+0x11c>)
 8000b84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <HAL_ADC_MspInit+0x11c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <HAL_ADC_MspInit+0x11c>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a24      	ldr	r2, [pc, #144]	; (8000c2c <HAL_ADC_MspInit+0x11c>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <HAL_ADC_MspInit+0x11c>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Left_Toggle_UD_Pin|Left_Toggle_LR_Pin|Right_Toggle_UD_Pin|Right_Toggle_LR_Pin;
 8000bae:	230f      	movs	r3, #15
 8000bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481a      	ldr	r0, [pc, #104]	; (8000c30 <HAL_ADC_MspInit+0x120>)
 8000bc6:	f001 fe45 	bl	8002854 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000bce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bf6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000c06:	f001 fbaf 	bl	8002368 <HAL_DMA_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000c10:	f7ff ff54 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000c18:	651a      	str	r2, [r3, #80]	; 0x50
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3790      	adds	r7, #144	; 0x90
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	50040000 	.word	0x50040000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000800 	.word	0x48000800
 8000c34:	200000e0 	.word	0x200000e0
 8000c38:	40020008 	.word	0x40020008

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0a4      	sub	sp, #144	; 0x90
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2268      	movs	r2, #104	; 0x68
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 fa9f 	bl	80051a0 <memset>
  if(huart->Instance==USART2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_UART_MspInit+0xc0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d142      	bne.n	8000cf2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fe4b 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c84:	f7ff ff1a 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_UART_MspInit+0xc4>)
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_UART_MspInit+0xc4>)
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c92:	6593      	str	r3, [r2, #88]	; 0x58
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_UART_MspInit+0xc4>)
 8000c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0xc4>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca4:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <HAL_UART_MspInit+0xc4>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0xc4>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f001 fdb9 	bl	8002854 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2026      	movs	r0, #38	; 0x26
 8000ce8:	f001 fb07 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cec:	2026      	movs	r0, #38	; 0x26
 8000cee:	f001 fb20 	bl	8002332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3790      	adds	r7, #144	; 0x90
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40021000 	.word	0x40021000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f8dc 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <DMA1_Channel1_IRQHandler+0x10>)
 8000d5e:	f001 fc9a 	bl	8002696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000e0 	.word	0x200000e0

08000d6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <USART2_IRQHandler+0x10>)
 8000d72:	f003 fa05 	bl	8004180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000128 	.word	0x20000128

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d207      	bcs.n	8000dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db0:	f004 f9fe 	bl	80051b0 <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	220c      	movs	r2, #12
 8000db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dbe:	e009      	b.n	8000dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_sbrk+0x64>)
 8000dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20028000 	.word	0x20028000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	200001b0 	.word	0x200001b0
 8000de8:	20000300 	.word	0x20000300

08000dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff ffea 	bl	8000dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1a:	490d      	ldr	r1, [pc, #52]	; (8000e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <LoopForever+0xe>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e30:	4c0a      	ldr	r4, [pc, #40]	; (8000e5c <LoopForever+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f004 f9bd 	bl	80051bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fb9b 	bl	800057c <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e48:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e54:	08005b64 	.word	0x08005b64
  ldr r2, =_sbss
 8000e58:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e5c:	20000300 	.word	0x20000300

08000e60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_IRQHandler>

08000e62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f001 fa39 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f80e 	bl	8000e94 <HAL_InitTick>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	e001      	b.n	8000e88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e84:	f7ff fe20 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_InitTick+0x6c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d023      	beq.n	8000ef0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_InitTick+0x70>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_InitTick+0x6c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fa45 	bl	800234e <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10f      	bne.n	8000eea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d809      	bhi.n	8000ee4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed8:	f001 fa0f 	bl	80022fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_InitTick+0x74>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e007      	b.n	8000ef4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e004      	b.n	8000ef4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e001      	b.n	8000ef4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	200001b4 	.word	0x200001b4

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200001b4 	.word	0x200001b4

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008

08000f94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3360      	adds	r3, #96	; 0x60
 800100e:	461a      	mov	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <LL_ADC_SetOffset+0x44>)
 800101e:	4013      	ands	r3, r2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	4313      	orrs	r3, r2
 800102c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	03fff000 	.word	0x03fff000

08001044 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3360      	adds	r3, #96	; 0x60
 8001052:	461a      	mov	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3360      	adds	r3, #96	; 0x60
 8001080:	461a      	mov	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	431a      	orrs	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	615a      	str	r2, [r3, #20]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3330      	adds	r3, #48	; 0x30
 8001102:	461a      	mov	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	4413      	add	r3, r2
 8001110:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	211f      	movs	r1, #31
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0e9b      	lsrs	r3, r3, #26
 800112a:	f003 011f 	and.w	r1, r3, #31
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	431a      	orrs	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800114a:	b480      	push	{r7}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3314      	adds	r3, #20
 800115a:	461a      	mov	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	0e5b      	lsrs	r3, r3, #25
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	4413      	add	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	0d1b      	lsrs	r3, r3, #20
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	2107      	movs	r1, #7
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	0d1b      	lsrs	r3, r3, #20
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	431a      	orrs	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001194:	bf00      	nop
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011b8:	43db      	mvns	r3, r3
 80011ba:	401a      	ands	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0318 	and.w	r3, r3, #24
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011c4:	40d9      	lsrs	r1, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	400b      	ands	r3, r1
 80011ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ce:	431a      	orrs	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	0007ffff 	.word	0x0007ffff

080011e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6093      	str	r3, [r2, #8]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001220:	d101      	bne.n	8001226 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001248:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001270:	d101      	bne.n	8001276 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <LL_ADC_IsEnabled+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_ADC_IsEnabled+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e6:	f043 0204 	orr.w	r2, r3, #4
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b04      	cmp	r3, #4
 800130c:	d101      	bne.n	8001312 <LL_ADC_REG_IsConversionOngoing+0x18>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b08      	cmp	r3, #8
 8001332:	d101      	bne.n	8001338 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e129      	b.n	80015b6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	2b00      	cmp	r3, #0
 800136e:	d109      	bne.n	8001384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fbcd 	bl	8000b10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff3f 	bl	800120c <LL_ADC_IsDeepPowerDownEnabled>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff25 	bl	80011e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff5a 	bl	800125c <LL_ADC_IsInternalRegulatorEnabled>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d115      	bne.n	80013da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff3e 	bl	8001234 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013b8:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <HAL_ADC_Init+0x278>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	099b      	lsrs	r3, r3, #6
 80013be:	4a81      	ldr	r2, [pc, #516]	; (80015c4 <HAL_ADC_Init+0x27c>)
 80013c0:	fba2 2303 	umull	r2, r3, r2, r3
 80013c4:	099b      	lsrs	r3, r3, #6
 80013c6:	3301      	adds	r3, #1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff3c 	bl	800125c <LL_ADC_IsInternalRegulatorEnabled>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10d      	bne.n	8001406 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	f043 0210 	orr.w	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	f043 0201 	orr.w	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff75 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 8001410:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 80c2 	bne.w	80015a4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 80be 	bne.w	80015a4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001430:	f043 0202 	orr.w	r2, r3, #2
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff35 	bl	80012ac <LL_ADC_IsEnabled>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10b      	bne.n	8001460 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001448:	485f      	ldr	r0, [pc, #380]	; (80015c8 <HAL_ADC_Init+0x280>)
 800144a:	f7ff ff2f 	bl	80012ac <LL_ADC_IsEnabled>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4619      	mov	r1, r3
 800145a:	485c      	ldr	r0, [pc, #368]	; (80015cc <HAL_ADC_Init+0x284>)
 800145c:	f7ff fd9a 	bl	8000f94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e5b      	ldrb	r3, [r3, #25]
 8001464:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800146a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001470:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001476:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d106      	bne.n	800149c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	3b01      	subs	r3, #1
 8001494:	045b      	lsls	r3, r3, #17
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d009      	beq.n	80014b8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <HAL_ADC_Init+0x288>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	430b      	orrs	r3, r1
 80014ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff25 	bl	8001320 <LL_ADC_INJ_IsConversionOngoing>
 80014d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d140      	bne.n	8001560 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d13d      	bne.n	8001560 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e1b      	ldrb	r3, [r3, #24]
 80014ec:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ee:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001506:	f023 0306 	bic.w	r3, r3, #6
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	430b      	orrs	r3, r1
 8001512:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151a:	2b01      	cmp	r3, #1
 800151c:	d118      	bne.n	8001550 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001534:	4311      	orrs	r1, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800153a:	4311      	orrs	r1, r2
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001540:	430a      	orrs	r2, r1
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0201 	orr.w	r2, r2, #1
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	e007      	b.n	8001560 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10c      	bne.n	8001582 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f023 010f 	bic.w	r1, r3, #15
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
 8001580:	e007      	b.n	8001592 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020f 	bic.w	r2, r2, #15
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	f023 0303 	bic.w	r3, r3, #3
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	659a      	str	r2, [r3, #88]	; 0x58
 80015a2:	e007      	b.n	80015b4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	f043 0210 	orr.w	r2, r3, #16
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000000 	.word	0x20000000
 80015c4:	053e2d63 	.word	0x053e2d63
 80015c8:	50040000 	.word	0x50040000
 80015cc:	50040300 	.word	0x50040300
 80015d0:	fff0c007 	.word	0xfff0c007

080015d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fe88 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d167      	bne.n	80016c0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Start_DMA+0x2a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e063      	b.n	80016c6 <HAL_ADC_Start_DMA+0xf2>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 fc82 	bl	8001f10 <ADC_Enable>
 800160c:	4603      	mov	r3, r0
 800160e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d14f      	bne.n	80016b6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	f023 0206 	bic.w	r2, r3, #6
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	65da      	str	r2, [r3, #92]	; 0x5c
 8001642:	e002      	b.n	800164a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164e:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <HAL_ADC_Start_DMA+0xfc>)
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_ADC_Start_DMA+0x100>)
 8001658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_ADC_Start_DMA+0x104>)
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	221c      	movs	r2, #28
 8001668:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0210 	orr.w	r2, r2, #16
 8001680:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3340      	adds	r3, #64	; 0x40
 800169c:	4619      	mov	r1, r3
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f000 ff19 	bl	80024d8 <HAL_DMA_Start_IT>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fe0f 	bl	80012d2 <LL_ADC_REG_StartConversion>
 80016b4:	e006      	b.n	80016c4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80016be:	e001      	b.n	80016c4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016c0:	2302      	movs	r3, #2
 80016c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0800201d 	.word	0x0800201d
 80016d4:	080020f5 	.word	0x080020f5
 80016d8:	08002111 	.word	0x08002111

080016dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0b6      	sub	sp, #216	; 0xd8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_ConfigChannel+0x22>
 8001736:	2302      	movs	r3, #2
 8001738:	e3d5      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x7ce>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fdd7 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 83ba 	bne.w	8001ec8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d824      	bhi.n	80017ae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	3b02      	subs	r3, #2
 800176a:	2b03      	cmp	r3, #3
 800176c:	d81b      	bhi.n	80017a6 <HAL_ADC_ConfigChannel+0x8e>
 800176e:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <HAL_ADC_ConfigChannel+0x5c>)
 8001770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001774:	08001785 	.word	0x08001785
 8001778:	0800178d 	.word	0x0800178d
 800177c:	08001795 	.word	0x08001795
 8001780:	0800179d 	.word	0x0800179d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001784:	230c      	movs	r3, #12
 8001786:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800178a:	e010      	b.n	80017ae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800178c:	2312      	movs	r3, #18
 800178e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001792:	e00c      	b.n	80017ae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001794:	2318      	movs	r3, #24
 8001796:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800179a:	e008      	b.n	80017ae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800179c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017a4:	e003      	b.n	80017ae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80017a6:	2306      	movs	r3, #6
 80017a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017ac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80017bc:	f7ff fc99 	bl	80010f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fd98 	bl	80012fa <LL_ADC_REG_IsConversionOngoing>
 80017ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fda4 	bl	8001320 <LL_ADC_INJ_IsConversionOngoing>
 80017d8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 81bf 	bne.w	8001b64 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 81ba 	bne.w	8001b64 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017f8:	d10f      	bne.n	800181a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff fca0 	bl	800114a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fc47 	bl	80010a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001818:	e00e      	b.n	8001838 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	461a      	mov	r2, r3
 8001828:	f7ff fc8f 	bl	800114a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fc37 	bl	80010a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	08db      	lsrs	r3, r3, #3
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b04      	cmp	r3, #4
 8001858:	d00a      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6919      	ldr	r1, [r3, #16]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800186a:	f7ff fbc7 	bl	8000ffc <LL_ADC_SetOffset>
 800186e:	e179      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fbe4 	bl	8001044 <LL_ADC_GetOffsetChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10a      	bne.n	800189c <HAL_ADC_ConfigChannel+0x184>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fbd9 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	0e9b      	lsrs	r3, r3, #26
 8001896:	f003 021f 	and.w	r2, r3, #31
 800189a:	e01e      	b.n	80018da <HAL_ADC_ConfigChannel+0x1c2>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fbce 	bl	8001044 <LL_ADC_GetOffsetChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80018ca:	2320      	movs	r3, #32
 80018cc:	e004      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80018ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x1da>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	e018      	b.n	8001924 <HAL_ADC_ConfigChannel+0x20c>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800190a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800190e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001916:	2320      	movs	r3, #32
 8001918:	e004      	b.n	8001924 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800191a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800191e:	fab3 f383 	clz	r3, r3
 8001922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001924:	429a      	cmp	r2, r3
 8001926:	d106      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fb9d 	bl	8001070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fb81 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x24a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fb76 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	0e9b      	lsrs	r3, r3, #26
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	e01e      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x288>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2101      	movs	r1, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fb6b 	bl	8001044 <LL_ADC_GetOffsetChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001990:	2320      	movs	r3, #32
 8001992:	e004      	b.n	800199e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x2a0>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	e018      	b.n	80019ea <HAL_ADC_ConfigChannel+0x2d2>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80019cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80019d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e004      	b.n	80019ea <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80019e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d106      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	2101      	movs	r1, #1
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fb3a 	bl	8001070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2102      	movs	r1, #2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fb1e 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10a      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x310>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fb13 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	0e9b      	lsrs	r3, r3, #26
 8001a22:	f003 021f 	and.w	r2, r3, #31
 8001a26:	e01e      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x34e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fb08 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001a56:	2320      	movs	r3, #32
 8001a58:	e004      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x366>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0e9b      	lsrs	r3, r3, #26
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	e014      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x390>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e004      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d106      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fadb 	bl	8001070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2103      	movs	r1, #3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fabf 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10a      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x3ce>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fab4 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	0e9b      	lsrs	r3, r3, #26
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	e017      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x3fe>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2103      	movs	r1, #3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff faa9 	bl	8001044 <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b00:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e003      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x416>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0e9b      	lsrs	r3, r3, #26
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	e011      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x43a>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b3e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001b46:	2320      	movs	r3, #32
 8001b48:	e003      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d106      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fa86 	bl	8001070 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fb9f 	bl	80012ac <LL_ADC_IsEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 813f 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f7ff fb0c 	bl	80011a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a8e      	ldr	r2, [pc, #568]	; (8001dc8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f040 8130 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10b      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x4a4>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0e9b      	lsrs	r3, r3, #26
 8001baa:	3301      	adds	r3, #1
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e019      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x4d8>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e003      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	2b09      	cmp	r3, #9
 8001be8:	bf94      	ite	ls
 8001bea:	2301      	movls	r3, #1
 8001bec:	2300      	movhi	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d079      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x4f8>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	069b      	lsls	r3, r3, #26
 8001c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c0e:	e015      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x524>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c20:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e003      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	069b      	lsls	r3, r3, #26
 8001c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x544>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	e017      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x574>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e003      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	ea42 0103 	orr.w	r1, r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x59a>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	051b      	lsls	r3, r3, #20
 8001cb0:	e018      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x5cc>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e003      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	e080      	b.n	8001dea <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x5ec>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	069b      	lsls	r3, r3, #26
 8001cfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d02:	e015      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x618>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	e003      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x638>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0e9b      	lsrs	r3, r3, #26
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	e017      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x668>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e003      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	ea42 0103 	orr.w	r1, r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x694>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	3301      	adds	r3, #1
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	3b1e      	subs	r3, #30
 8001da4:	051b      	lsls	r3, r3, #20
 8001da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001daa:	e01d      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x6d0>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	60fb      	str	r3, [r7, #12]
  return result;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e005      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x6bc>
 8001dc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 021f 	and.w	r2, r3, #31
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	3b1e      	subs	r3, #30
 8001de2:	051b      	lsls	r3, r3, #20
 8001de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7ff f9ab 	bl	800114a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d06c      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e00:	483c      	ldr	r0, [pc, #240]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e02:	f7ff f8ed 	bl	8000fe0 <LL_ADC_GetCommonPathInternalCh>
 8001e06:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ef8 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d127      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d121      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a35      	ldr	r2, [pc, #212]	; (8001efc <HAL_ADC_ConfigChannel+0x7e4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d157      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e32:	4619      	mov	r1, r3
 8001e34:	482f      	ldr	r0, [pc, #188]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e36:	f7ff f8c0 	bl	8000fba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_ADC_ConfigChannel+0x7e8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	4a30      	ldr	r2, [pc, #192]	; (8001f04 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e54:	e002      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f9      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e62:	e03a      	b.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_ADC_ConfigChannel+0x7f0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d113      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10d      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_ADC_ConfigChannel+0x7e4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d12a      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4819      	ldr	r0, [pc, #100]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e90:	f7ff f893 	bl	8000fba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e94:	e021      	b.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <HAL_ADC_ConfigChannel+0x7f4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d11c      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d116      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_ADC_ConfigChannel+0x7e4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d111      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ec2:	f7ff f87a 	bl	8000fba <LL_ADC_SetCommonPathInternalCh>
 8001ec6:	e008      	b.n	8001eda <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ee2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	37d8      	adds	r7, #216	; 0xd8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	80080000 	.word	0x80080000
 8001ef4:	50040300 	.word	0x50040300
 8001ef8:	c7520000 	.word	0xc7520000
 8001efc:	50040000 	.word	0x50040000
 8001f00:	20000000 	.word	0x20000000
 8001f04:	053e2d63 	.word	0x053e2d63
 8001f08:	cb840000 	.word	0xcb840000
 8001f0c:	80000001 	.word	0x80000001

08001f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f9c3 	bl	80012ac <LL_ADC_IsEnabled>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d169      	bne.n	8002000 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <ADC_Enable+0xfc>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00d      	beq.n	8001f56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f043 0210 	orr.w	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e055      	b.n	8002002 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f992 	bl	8001284 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f60:	482b      	ldr	r0, [pc, #172]	; (8002010 <ADC_Enable+0x100>)
 8001f62:	f7ff f83d 	bl	8000fe0 <LL_ADC_GetCommonPathInternalCh>
 8001f66:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <ADC_Enable+0x104>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <ADC_Enable+0x108>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f8a:	e002      	b.n	8001f92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f9      	bne.n	8001f8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f98:	f7fe ffcc 	bl	8000f34 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f9e:	e028      	b.n	8001ff2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f981 	bl	80012ac <LL_ADC_IsEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f965 	bl	8001284 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fba:	f7fe ffbb 	bl	8000f34 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d914      	bls.n	8001ff2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d00d      	beq.n	8001ff2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	f043 0210 	orr.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e007      	b.n	8002002 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d1cf      	bne.n	8001fa0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	8000003f 	.word	0x8000003f
 8002010:	50040300 	.word	0x50040300
 8002014:	20000000 	.word	0x20000000
 8002018:	053e2d63 	.word	0x053e2d63

0800201c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002032:	2b00      	cmp	r3, #0
 8002034:	d14b      	bne.n	80020ce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d021      	beq.n	8002094 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f839 	bl	80010cc <LL_ADC_REG_IsTriggerSourceSWStart>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d032      	beq.n	80020c6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12b      	bne.n	80020c6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d11f      	bne.n	80020c6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	659a      	str	r2, [r3, #88]	; 0x58
 8002092:	e018      	b.n	80020c6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d111      	bne.n	80020c6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f7ff fb08 	bl	80016dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020cc:	e00e      	b.n	80020ec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7ff fb12 	bl	8001704 <HAL_ADC_ErrorCallback>
}
 80020e0:	e004      	b.n	80020ec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7ff faf4 	bl	80016f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	f043 0204 	orr.w	r2, r3, #4
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7ff fae4 	bl	8001704 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff29 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800230c:	f7ff ff3e 	bl	800218c <__NVIC_GetPriorityGrouping>
 8002310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	6978      	ldr	r0, [r7, #20]
 8002318:	f7ff ff8e 	bl	8002238 <NVIC_EncodePriority>
 800231c:	4602      	mov	r2, r0
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff5d 	bl	80021e4 <__NVIC_SetPriority>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff31 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffa2 	bl	80022a0 <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e098      	b.n	80024ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_DMA_Init+0x150>)
 8002382:	429a      	cmp	r2, r3
 8002384:	d80f      	bhi.n	80023a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_DMA_Init+0x154>)
 800238e:	4413      	add	r3, r2
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_DMA_Init+0x158>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_DMA_Init+0x15c>)
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
 80023a4:	e00e      	b.n	80023c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <HAL_DMA_Init+0x160>)
 80023ae:	4413      	add	r3, r2
 80023b0:	4a43      	ldr	r2, [pc, #268]	; (80024c0 <HAL_DMA_Init+0x158>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a42      	ldr	r2, [pc, #264]	; (80024cc <HAL_DMA_Init+0x164>)
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800241e:	d039      	beq.n	8002494 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_DMA_Init+0x15c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d11a      	bne.n	8002460 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_DMA_Init+0x168>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f003 031c 	and.w	r3, r3, #28
 8002436:	210f      	movs	r1, #15
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4924      	ldr	r1, [pc, #144]	; (80024d0 <HAL_DMA_Init+0x168>)
 8002440:	4013      	ands	r3, r2
 8002442:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_DMA_Init+0x168>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	f003 031c 	and.w	r3, r3, #28
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	491d      	ldr	r1, [pc, #116]	; (80024d0 <HAL_DMA_Init+0x168>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
 800245e:	e019      	b.n	8002494 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_DMA_Init+0x16c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f003 031c 	and.w	r3, r3, #28
 800246c:	210f      	movs	r1, #15
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	4917      	ldr	r1, [pc, #92]	; (80024d4 <HAL_DMA_Init+0x16c>)
 8002476:	4013      	ands	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_DMA_Init+0x16c>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f003 031c 	and.w	r3, r3, #28
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	4911      	ldr	r1, [pc, #68]	; (80024d4 <HAL_DMA_Init+0x16c>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40020407 	.word	0x40020407
 80024bc:	bffdfff8 	.word	0xbffdfff8
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	40020000 	.word	0x40020000
 80024c8:	bffdfbf8 	.word	0xbffdfbf8
 80024cc:	40020400 	.word	0x40020400
 80024d0:	400200a8 	.word	0x400200a8
 80024d4:	400204a8 	.word	0x400204a8

080024d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Start_IT+0x20>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e04b      	b.n	8002590 <HAL_DMA_Start_IT+0xb8>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d13a      	bne.n	8002582 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f95f 	bl	80027f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 020e 	orr.w	r2, r2, #14
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00f      	b.n	8002570 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0204 	bic.w	r2, r2, #4
 800255e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 020a 	orr.w	r2, r2, #10
 800256e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e005      	b.n	800258e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d008      	beq.n	80025c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2204      	movs	r2, #4
 80025b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e022      	b.n	8002608 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 020e 	bic.w	r2, r2, #14
 80025d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f003 021c 	and.w	r2, r3, #28
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d005      	beq.n	8002638 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2204      	movs	r2, #4
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e029      	b.n	800268c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 020e 	bic.w	r2, r2, #14
 8002646:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f003 021c 	and.w	r2, r3, #28
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f202 	lsl.w	r2, r1, r2
 800266a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
    }
  }
  return status;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f003 031c 	and.w	r3, r3, #28
 80026b6:	2204      	movs	r2, #4
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d026      	beq.n	8002710 <HAL_DMA_IRQHandler+0x7a>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d021      	beq.n	8002710 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0204 	bic.w	r2, r2, #4
 80026e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f003 021c 	and.w	r2, r3, #28
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2104      	movs	r1, #4
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	2b00      	cmp	r3, #0
 8002704:	d071      	beq.n	80027ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800270e:	e06c      	b.n	80027ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	f003 031c 	and.w	r3, r3, #28
 8002718:	2202      	movs	r2, #2
 800271a:	409a      	lsls	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02e      	beq.n	8002782 <HAL_DMA_IRQHandler+0xec>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d029      	beq.n	8002782 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10b      	bne.n	8002754 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 020a 	bic.w	r2, r2, #10
 800274a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	f003 021c 	and.w	r2, r3, #28
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2102      	movs	r1, #2
 8002762:	fa01 f202 	lsl.w	r2, r1, r2
 8002766:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d038      	beq.n	80027ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002780:	e033      	b.n	80027ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f003 031c 	and.w	r3, r3, #28
 800278a:	2208      	movs	r2, #8
 800278c:	409a      	lsls	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d02a      	beq.n	80027ec <HAL_DMA_IRQHandler+0x156>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d025      	beq.n	80027ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 020e 	bic.w	r2, r2, #14
 80027ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	f003 021c 	and.w	r2, r3, #28
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f202 	lsl.w	r2, r1, r2
 80027c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
}
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f003 021c 	and.w	r2, r3, #28
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d108      	bne.n	8002838 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002836:	e007      	b.n	8002848 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	e154      	b.n	8002b0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8146 	beq.w	8002b08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d005      	beq.n	8002894 <HAL_GPIO_Init+0x40>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d130      	bne.n	80028f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ca:	2201      	movs	r2, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0201 	and.w	r2, r3, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d017      	beq.n	8002932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d123      	bne.n	8002986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	6939      	ldr	r1, [r7, #16]
 8002982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0203 	and.w	r2, r3, #3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80a0 	beq.w	8002b08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c8:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_GPIO_Init+0x2d8>)
 80029ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029cc:	4a57      	ldr	r2, [pc, #348]	; (8002b2c <HAL_GPIO_Init+0x2d8>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6613      	str	r3, [r2, #96]	; 0x60
 80029d4:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <HAL_GPIO_Init+0x2d8>)
 80029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029e0:	4a53      	ldr	r2, [pc, #332]	; (8002b30 <HAL_GPIO_Init+0x2dc>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a0a:	d019      	beq.n	8002a40 <HAL_GPIO_Init+0x1ec>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a49      	ldr	r2, [pc, #292]	; (8002b34 <HAL_GPIO_Init+0x2e0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_GPIO_Init+0x1e8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <HAL_GPIO_Init+0x2e4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00d      	beq.n	8002a38 <HAL_GPIO_Init+0x1e4>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a47      	ldr	r2, [pc, #284]	; (8002b3c <HAL_GPIO_Init+0x2e8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_Init+0x1e0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a46      	ldr	r2, [pc, #280]	; (8002b40 <HAL_GPIO_Init+0x2ec>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_GPIO_Init+0x1dc>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e008      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a30:	2307      	movs	r3, #7
 8002a32:	e006      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a34:	2303      	movs	r3, #3
 8002a36:	e004      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e002      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_GPIO_Init+0x1ee>
 8002a40:	2300      	movs	r3, #0
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	f002 0203 	and.w	r2, r2, #3
 8002a48:	0092      	lsls	r2, r2, #2
 8002a4a:	4093      	lsls	r3, r2
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a52:	4937      	ldr	r1, [pc, #220]	; (8002b30 <HAL_GPIO_Init+0x2dc>)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a84:	4a2f      	ldr	r2, [pc, #188]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aae:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ab4:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b02:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <HAL_GPIO_Init+0x2f0>)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f aea3 	bne.w	8002864 <HAL_GPIO_Init+0x10>
  }
}
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40010000 	.word	0x40010000
 8002b34:	48000400 	.word	0x48000400
 8002b38:	48000800 	.word	0x48000800
 8002b3c:	48000c00 	.word	0x48000c00
 8002b40:	48001000 	.word	0x48001000
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	041a      	lsls	r2, r3, #16
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	43d9      	mvns	r1, r3
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	400b      	ands	r3, r1
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40007000 	.word	0x40007000

08002bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c06:	d130      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c14:	d038      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2232      	movs	r2, #50	; 0x32
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9b      	lsrs	r3, r3, #18
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3c:	e002      	b.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d102      	bne.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f2      	bne.n	8002c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c64:	d110      	bne.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e00f      	b.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d007      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f000 bc02 	b.w	80034bc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb8:	4b96      	ldr	r3, [pc, #600]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc2:	4b94      	ldr	r3, [pc, #592]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80e4 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4c>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	f040 808b 	bne.w	8002dfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 8087 	bne.w	8002dfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf0:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x64>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e3d9      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	4b81      	ldr	r3, [pc, #516]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_RCC_OscConfig+0x7e>
 8002d18:	4b7e      	ldr	r3, [pc, #504]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d20:	e005      	b.n	8002d2e <HAL_RCC_OscConfig+0x8a>
 8002d22:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d223      	bcs.n	8002d7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fd8c 	bl	8003854 <RCC_SetFlashLatencyFromMSIRange>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e3ba      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d46:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a72      	ldr	r2, [pc, #456]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	496d      	ldr	r1, [pc, #436]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d64:	4b6b      	ldr	r3, [pc, #428]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4968      	ldr	r1, [pc, #416]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	e025      	b.n	8002dc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7a:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b63      	ldr	r3, [pc, #396]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4960      	ldr	r1, [pc, #384]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d98:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	495b      	ldr	r1, [pc, #364]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd4c 	bl	8003854 <RCC_SetFlashLatencyFromMSIRange>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e37a      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc6:	f000 fc81 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b51      	ldr	r3, [pc, #324]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4950      	ldr	r1, [pc, #320]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	5ccb      	ldrb	r3, [r1, r3]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a4e      	ldr	r2, [pc, #312]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002de4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002de6:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f852 	bl	8000e94 <HAL_InitTick>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d052      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	e35e      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d032      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e06:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e12:	f7fe f88f 	bl	8000f34 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1a:	f7fe f88b 	bl	8000f34 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e347      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e2c:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	4b36      	ldr	r3, [pc, #216]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4930      	ldr	r1, [pc, #192]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e56:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	492b      	ldr	r1, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
 8002e6a:	e01a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e6c:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e78:	f7fe f85c 	bl	8000f34 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e80:	f7fe f858 	bl	8000f34 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e314      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1dc>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d073      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x21c>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d063      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d15f      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e2f1      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e025      	b.n	8002f3c <HAL_RCC_OscConfig+0x298>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef8:	d114      	bne.n	8002f24 <HAL_RCC_OscConfig+0x280>
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a02      	ldr	r2, [pc, #8]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e013      	b.n	8002f3c <HAL_RCC_OscConfig+0x298>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08005ad8 	.word	0x08005ad8
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004
 8002f24:	4ba0      	ldr	r3, [pc, #640]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a9f      	ldr	r2, [pc, #636]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b9d      	ldr	r3, [pc, #628]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a9c      	ldr	r2, [pc, #624]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fd fff6 	bl	8000f34 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fd fff2 	bl	8000f34 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e2ae      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	4b92      	ldr	r3, [pc, #584]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2a8>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fd ffe2 	bl	8000f34 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fd ffde 	bl	8000f34 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e29a      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f86:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d0>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d060      	beq.n	8003064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x310>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d116      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x328>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e277      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4973      	ldr	r1, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	e040      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d023      	beq.n	8003032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fea:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fd ff9d 	bl	8000f34 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fd ff99 	bl	8000f34 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e255      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	495f      	ldr	r1, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
 8003030:	e018      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fd ff79 	bl	8000f34 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fd ff75 	bl	8000f34 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e231      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03c      	beq.n	80030ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fd ff54 	bl	8000f34 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fd ff50 	bl	8000f34 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e20c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ef      	beq.n	8003090 <HAL_RCC_OscConfig+0x3ec>
 80030b0:	e01b      	b.n	80030ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b8:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fd ff37 	bl	8000f34 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fd ff33 	bl	8000f34 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1ef      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ef      	bne.n	80030ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80a6 	beq.w	8003244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030fc:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	; 0x58
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d118      	bne.n	8003162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7fd fefa 	bl	8000f34 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fd fef6 	bl	8000f34 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1b2      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x4d8>
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800317a:	e029      	b.n	80031d0 <HAL_RCC_OscConfig+0x52c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_OscConfig+0x50c>
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a4:	e014      	b.n	80031d0 <HAL_RCC_OscConfig+0x52c>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
 80031b0:	4b9a      	ldr	r3, [pc, #616]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a99      	ldr	r2, [pc, #612]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c0:	4b96      	ldr	r3, [pc, #600]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a95      	ldr	r2, [pc, #596]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d016      	beq.n	8003206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fd feac 	bl	8000f34 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fd fea8 	bl	8000f34 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e162      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f6:	4b89      	ldr	r3, [pc, #548]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ed      	beq.n	80031e0 <HAL_RCC_OscConfig+0x53c>
 8003204:	e015      	b.n	8003232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fd fe95 	bl	8000f34 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fd fe91 	bl	8000f34 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e14b      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003224:	4b7d      	ldr	r3, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ed      	bne.n	800320e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b78      	ldr	r3, [pc, #480]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	4a77      	ldr	r2, [pc, #476]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03c      	beq.n	80032ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003258:	4b70      	ldr	r3, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800325a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325e:	4a6f      	ldr	r2, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd fe64 	bl	8000f34 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003270:	f7fd fe60 	bl	8000f34 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e11c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003282:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x5cc>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003292:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003298:	4a60      	ldr	r2, [pc, #384]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fe47 	bl	8000f34 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032aa:	f7fd fe43 	bl	8000f34 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0ff      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032bc:	4b57      	ldr	r3, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80032be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ef      	bne.n	80032aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80f3 	beq.w	80034ba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	2b02      	cmp	r3, #2
 80032da:	f040 80c9 	bne.w	8003470 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032de:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0203 	and.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d12c      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	3b01      	subs	r3, #1
 80032fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d123      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d11b      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d113      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d109      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d06b      	beq.n	8003424 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d062      	beq.n	8003418 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003352:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0ac      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003362:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800336e:	f7fd fde1 	bl	8000f34 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fd fddd 	bl	8000f34 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e099      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x778>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_OscConfig+0x77c>)
 800339a:	4013      	ands	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ae:	0212      	lsls	r2, r2, #8
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033b6:	0852      	lsrs	r2, r2, #1
 80033b8:	3a01      	subs	r2, #1
 80033ba:	0552      	lsls	r2, r2, #21
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033c2:	0852      	lsrs	r2, r2, #1
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0652      	lsls	r2, r2, #25
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ce:	06d2      	lsls	r2, r2, #27
 80033d0:	430a      	orrs	r2, r1
 80033d2:	4912      	ldr	r1, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a0c      	ldr	r2, [pc, #48]	; (800341c <HAL_RCC_OscConfig+0x778>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f0:	f7fd fda0 	bl	8000f34 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fd fd9c 	bl	8000f34 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e058      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCC_OscConfig+0x778>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003416:	e050      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e04f      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
 800341c:	40021000 	.word	0x40021000
 8003420:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d144      	bne.n	80034ba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003446:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003448:	f7fd fd74 	bl	8000f34 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd fd70 	bl	8000f34 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e02c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x7ac>
 800346e:	e024      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d01f      	beq.n	80034b6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 800347c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fd57 	bl	8000f34 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7fd fd53 	bl	8000f34 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e00f      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	4905      	ldr	r1, [pc, #20]	; (80034c4 <HAL_RCC_OscConfig+0x820>)
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60cb      	str	r3, [r1, #12]
 80034b4:	e001      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	feeefffc 	.word	0xfeeefffc

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0e7      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b75      	ldr	r3, [pc, #468]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d910      	bls.n	8003510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b72      	ldr	r3, [pc, #456]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 0207 	bic.w	r2, r3, #7
 80034f6:	4970      	ldr	r1, [pc, #448]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b6e      	ldr	r3, [pc, #440]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cf      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d010      	beq.n	800353e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003528:	429a      	cmp	r2, r3
 800352a:	d908      	bls.n	800353e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b63      	ldr	r3, [pc, #396]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4960      	ldr	r1, [pc, #384]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d04c      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	4b5a      	ldr	r3, [pc, #360]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d121      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0a6      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e09a      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003582:	4b4e      	ldr	r3, [pc, #312]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e08e      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e086      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b46      	ldr	r3, [pc, #280]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4943      	ldr	r1, [pc, #268]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fd fcbe 	bl	8000f34 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fd fcba 	bl	8000f34 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e06e      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d208      	bcs.n	8003612 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b2e      	ldr	r3, [pc, #184]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	492b      	ldr	r1, [pc, #172]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003612:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d210      	bcs.n	8003642 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 0207 	bic.w	r2, r3, #7
 8003628:	4923      	ldr	r1, [pc, #140]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003630:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e036      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4918      	ldr	r1, [pc, #96]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4910      	ldr	r1, [pc, #64]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003680:	f000 f824 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	490b      	ldr	r1, [pc, #44]	; (80036c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1f8>)
 800369e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1fc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fd fbf5 	bl	8000e94 <HAL_InitTick>
 80036aa:	4603      	mov	r3, r0
 80036ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80036ae:	7afb      	ldrb	r3, [r7, #11]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08005ad8 	.word	0x08005ad8
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000004 	.word	0x20000004

080036cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036da:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e4:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x34>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d121      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d11e      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003700:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800370c:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e005      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800371c:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003728:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d102      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	e004      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d101      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003752:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d134      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d003      	beq.n	8003772 <HAL_RCC_GetSysClockFreq+0xa6>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d003      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0xac>
 8003770:	e005      	b.n	800377e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003772:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003774:	617b      	str	r3, [r7, #20]
      break;
 8003776:	e005      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800377a:	617b      	str	r3, [r7, #20]
      break;
 800377c:	e002      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	617b      	str	r3, [r7, #20]
      break;
 8003782:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	3301      	adds	r3, #1
 8003790:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	fb03 f202 	mul.w	r2, r3, r2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	0e5b      	lsrs	r3, r3, #25
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	3301      	adds	r3, #1
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037c4:	69bb      	ldr	r3, [r7, #24]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08005af0 	.word	0x08005af0
 80037dc:	00f42400 	.word	0x00f42400
 80037e0:	007a1200 	.word	0x007a1200

080037e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000000 	.word	0x20000000

080037fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003800:	f7ff fff0 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4904      	ldr	r1, [pc, #16]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	08005ae8 	.word	0x08005ae8

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800382c:	f7ff ffda 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0adb      	lsrs	r3, r3, #11
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	08005ae8 	.word	0x08005ae8

08003854 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800386c:	f7ff f9b6 	bl	8002bdc <HAL_PWREx_GetVoltageRange>
 8003870:	6178      	str	r0, [r7, #20]
 8003872:	e014      	b.n	800389e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	4a24      	ldr	r2, [pc, #144]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387e:	6593      	str	r3, [r2, #88]	; 0x58
 8003880:	4b22      	ldr	r3, [pc, #136]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800388c:	f7ff f9a6 	bl	8002bdc <HAL_PWREx_GetVoltageRange>
 8003890:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a4:	d10b      	bne.n	80038be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d919      	bls.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2ba0      	cmp	r3, #160	; 0xa0
 80038b0:	d902      	bls.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b2:	2302      	movs	r3, #2
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e013      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038b8:	2301      	movs	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e010      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d902      	bls.n	80038ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038c4:	2303      	movs	r3, #3
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e00a      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d102      	bne.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038d0:	2302      	movs	r3, #2
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e004      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b70      	cmp	r3, #112	; 0x70
 80038da:	d101      	bne.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038dc:	2301      	movs	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f023 0207 	bic.w	r2, r3, #7
 80038e8:	4909      	ldr	r1, [pc, #36]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	40022000 	.word	0x40022000

08003914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800391c:	2300      	movs	r3, #0
 800391e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003920:	2300      	movs	r3, #0
 8003922:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392c:	2b00      	cmp	r3, #0
 800392e:	d031      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003934:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003938:	d01a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800393a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800393e:	d814      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003944:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003948:	d10f      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800394a:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003956:	e00c      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fa44 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	74fb      	strb	r3, [r7, #19]
      break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003978:	4b51      	ldr	r3, [pc, #324]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	494e      	ldr	r1, [pc, #312]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800398e:	e001      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 809e 	beq.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039a6:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b40      	ldr	r3, [pc, #256]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	4a3f      	ldr	r2, [pc, #252]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6593      	str	r3, [r2, #88]	; 0x58
 80039c8:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d4:	2301      	movs	r3, #1
 80039d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b3a      	ldr	r3, [pc, #232]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a39      	ldr	r2, [pc, #228]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e4:	f7fd faa6 	bl	8000f34 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ea:	e009      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fd faa2 	bl	8000f34 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d902      	bls.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	74fb      	strb	r3, [r7, #19]
        break;
 80039fe:	e005      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a00:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ef      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d15a      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a12:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01e      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d019      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a5a:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fa62 	bl	8000f34 <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	e00b      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd fa5e 	bl	8000f34 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d902      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	74fb      	strb	r3, [r7, #19]
            break;
 8003a8a:	e006      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ec      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a9a:	7cfb      	ldrb	r3, [r7, #19]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aae:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	74bb      	strb	r3, [r7, #18]
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003acc:	7c7b      	ldrb	r3, [r7, #17]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b9e      	ldr	r3, [pc, #632]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	4a9d      	ldr	r2, [pc, #628]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aea:	4b98      	ldr	r3, [pc, #608]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f023 0203 	bic.w	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4994      	ldr	r1, [pc, #592]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b0c:	4b8f      	ldr	r3, [pc, #572]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f023 020c 	bic.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	498c      	ldr	r1, [pc, #560]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b2e:	4b87      	ldr	r3, [pc, #540]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	4983      	ldr	r1, [pc, #524]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b50:	4b7e      	ldr	r3, [pc, #504]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	497b      	ldr	r1, [pc, #492]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b72:	4b76      	ldr	r3, [pc, #472]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	4972      	ldr	r1, [pc, #456]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b94:	4b6d      	ldr	r3, [pc, #436]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	496a      	ldr	r1, [pc, #424]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bb6:	4b65      	ldr	r3, [pc, #404]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	4961      	ldr	r1, [pc, #388]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bd8:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	4959      	ldr	r1, [pc, #356]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bfa:	4b54      	ldr	r3, [pc, #336]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	4950      	ldr	r1, [pc, #320]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c1c:	4b4b      	ldr	r3, [pc, #300]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	4948      	ldr	r1, [pc, #288]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c3e:	4b43      	ldr	r3, [pc, #268]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c44:	f023 0203 	bic.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	493f      	ldr	r1, [pc, #252]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d028      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c60:	4b3a      	ldr	r3, [pc, #232]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	4937      	ldr	r1, [pc, #220]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8a:	60d3      	str	r3, [r2, #12]
 8003c8c:	e011      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c96:	d10c      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f8a4 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	491f      	ldr	r1, [pc, #124]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cdc:	d106      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cde:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce8:	60d3      	str	r3, [r2, #12]
 8003cea:	e011      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f875 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d02b      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	4908      	ldr	r1, [pc, #32]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3a:	d109      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a02      	ldr	r2, [pc, #8]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d46:	60d3      	str	r3, [r2, #12]
 8003d48:	e014      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f843 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01c      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	4916      	ldr	r1, [pc, #88]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9e:	d10c      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2102      	movs	r1, #2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f820 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd4:	4904      	ldr	r1, [pc, #16]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ddc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000

08003dec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dfa:	4b74      	ldr	r3, [pc, #464]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e06:	4b71      	ldr	r3, [pc, #452]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0203 	and.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d10d      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
       ||
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e1e:	4b6b      	ldr	r3, [pc, #428]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d047      	beq.n	8003ec2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	e044      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d018      	beq.n	8003e72 <RCCEx_PLLSAI1_Config+0x86>
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d825      	bhi.n	8003e90 <RCCEx_PLLSAI1_Config+0xa4>
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d002      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x62>
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d009      	beq.n	8003e60 <RCCEx_PLLSAI1_Config+0x74>
 8003e4c:	e020      	b.n	8003e90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e4e:	4b5f      	ldr	r3, [pc, #380]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11d      	bne.n	8003e96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5e:	e01a      	b.n	8003e96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e60:	4b5a      	ldr	r3, [pc, #360]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d116      	bne.n	8003e9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e70:	e013      	b.n	8003e9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e72:	4b56      	ldr	r3, [pc, #344]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e7e:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e8e:	e006      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
      break;
 8003e94:	e004      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ea6:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	4943      	ldr	r1, [pc, #268]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d17c      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ec8:	4b40      	ldr	r3, [pc, #256]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3f      	ldr	r2, [pc, #252]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fd f82e 	bl	8000f34 <HAL_GetTick>
 8003ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eda:	e009      	b.n	8003ef0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003edc:	f7fd f82a 	bl	8000f34 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d902      	bls.n	8003ef0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	73fb      	strb	r3, [r7, #15]
        break;
 8003eee:	e005      	b.n	8003efc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ef0:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ef      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d15f      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d110      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f08:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6892      	ldr	r2, [r2, #8]
 8003f18:	0211      	lsls	r1, r2, #8
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68d2      	ldr	r2, [r2, #12]
 8003f1e:	06d2      	lsls	r2, r2, #27
 8003f20:	430a      	orrs	r2, r1
 8003f22:	492a      	ldr	r1, [pc, #168]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	610b      	str	r3, [r1, #16]
 8003f28:	e027      	b.n	8003f7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d112      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f30:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	0211      	lsls	r1, r2, #8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6912      	ldr	r2, [r2, #16]
 8003f46:	0852      	lsrs	r2, r2, #1
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	0552      	lsls	r2, r2, #21
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	491f      	ldr	r1, [pc, #124]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	610b      	str	r3, [r1, #16]
 8003f54:	e011      	b.n	8003f7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6892      	ldr	r2, [r2, #8]
 8003f66:	0211      	lsls	r1, r2, #8
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6952      	ldr	r2, [r2, #20]
 8003f6c:	0852      	lsrs	r2, r2, #1
 8003f6e:	3a01      	subs	r2, #1
 8003f70:	0652      	lsls	r2, r2, #25
 8003f72:	430a      	orrs	r2, r1
 8003f74:	4915      	ldr	r1, [pc, #84]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a13      	ldr	r2, [pc, #76]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fc ffd5 	bl	8000f34 <HAL_GetTick>
 8003f8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f8c:	e009      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f8e:	f7fc ffd1 	bl	8000f34 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d902      	bls.n	8003fa2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	73fb      	strb	r3, [r7, #15]
          break;
 8003fa0:	e005      	b.n	8003fae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0ef      	beq.n	8003f8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4903      	ldr	r1, [pc, #12]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e040      	b.n	8004064 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fe22 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fe42 	bl	8004ca0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fbb9 	bl	8004794 <UART_SetConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e01b      	b.n	8004064 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fec1 	bl	8004de4 <UART_CheckIdleState>
 8004062:	4603      	mov	r3, r0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004080:	2b20      	cmp	r3, #32
 8004082:	d178      	bne.n	8004176 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Transmit+0x24>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e071      	b.n	8004178 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2221      	movs	r2, #33	; 0x21
 80040a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a2:	f7fc ff47 	bl	8000f34 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d108      	bne.n	80040d4 <HAL_UART_Transmit+0x68>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e003      	b.n	80040dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040dc:	e030      	b.n	8004140 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 ff23 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d004      	beq.n	80040fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e03c      	b.n	8004178 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	881a      	ldrh	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004110:	b292      	uxth	r2, r2
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	3302      	adds	r3, #2
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e008      	b.n	800412e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	b292      	uxth	r2, r2
 8004126:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3301      	adds	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1c8      	bne.n	80040de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2200      	movs	r2, #0
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 feec 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d004      	beq.n	800416c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e005      	b.n	8004178 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b0ba      	sub	sp, #232	; 0xe8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80041ae:	4013      	ands	r3, r2
 80041b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d115      	bne.n	80041e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00f      	beq.n	80041e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 82ae 	beq.w	800473a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
      }
      return;
 80041e6:	e2a8      	b.n	800473a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80041e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8117 	beq.w	8004420 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004202:	4b85      	ldr	r3, [pc, #532]	; (8004418 <HAL_UART_IRQHandler+0x298>)
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 810a 	beq.w	8004420 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800420c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d011      	beq.n	800423c <HAL_UART_IRQHandler+0xbc>
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2201      	movs	r2, #1
 800422a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800423c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d011      	beq.n	800426c <HAL_UART_IRQHandler+0xec>
 8004248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2202      	movs	r2, #2
 800425a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004262:	f043 0204 	orr.w	r2, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d011      	beq.n	800429c <HAL_UART_IRQHandler+0x11c>
 8004278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2204      	movs	r2, #4
 800428a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004292:	f043 0202 	orr.w	r2, r3, #2
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d017      	beq.n	80042d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00b      	beq.n	80042d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2208      	movs	r2, #8
 80042c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	f043 0208 	orr.w	r2, r3, #8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <HAL_UART_IRQHandler+0x18a>
 80042e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8214 	beq.w	800473e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800435a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d04f      	beq.n	8004402 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fe4d 	bl	8005002 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d141      	bne.n	80043fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800438c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1d9      	bne.n	8004376 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d013      	beq.n	80043f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	4a13      	ldr	r2, [pc, #76]	; (800441c <HAL_UART_IRQHandler+0x29c>)
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe f91c 	bl	8002614 <HAL_DMA_Abort_IT>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d017      	beq.n	8004412 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043ec:	4610      	mov	r0, r2
 80043ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	e00f      	b.n	8004412 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9b8 	bl	8004768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	e00b      	b.n	8004412 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f9b4 	bl	8004768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	e007      	b.n	8004412 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f9b0 	bl	8004768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004410:	e195      	b.n	800473e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004412:	bf00      	nop
    return;
 8004414:	e193      	b.n	800473e <HAL_UART_IRQHandler+0x5be>
 8004416:	bf00      	nop
 8004418:	04000120 	.word	0x04000120
 800441c:	080050cb 	.word	0x080050cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004424:	2b01      	cmp	r3, #1
 8004426:	f040 814e 	bne.w	80046c6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8147 	beq.w	80046c6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8140 	beq.w	80046c6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2210      	movs	r2, #16
 800444c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	f040 80b8 	bne.w	80045ce <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800446a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8167 	beq.w	8004742 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800447a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800447e:	429a      	cmp	r2, r3
 8004480:	f080 815f 	bcs.w	8004742 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800448a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	f040 8086 	bne.w	80045ac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1da      	bne.n	80044a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3308      	adds	r3, #8
 80044f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800450e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004512:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e1      	bne.n	80044ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3308      	adds	r3, #8
 8004546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800454a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800454c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004550:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e3      	bne.n	8004526 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800457a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457c:	f023 0310 	bic.w	r3, r3, #16
 8004580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800458e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004590:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800459c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e4      	bne.n	800456c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fff6 	bl	8002598 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f8d8 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045cc:	e0b9      	b.n	8004742 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80ab 	beq.w	8004746 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80045f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80a6 	beq.w	8004746 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800460e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
 800461e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800462a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e4      	bne.n	80045fa <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3308      	adds	r3, #8
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	623b      	str	r3, [r7, #32]
   return(result);
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004654:	633a      	str	r2, [r7, #48]	; 0x30
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800465a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e3      	bne.n	8004630 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	60fb      	str	r3, [r7, #12]
   return(result);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f023 0310 	bic.w	r3, r3, #16
 8004690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	69b9      	ldr	r1, [r7, #24]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	617b      	str	r3, [r7, #20]
   return(result);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e4      	bne.n	800467c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046bc:	4619      	mov	r1, r3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f85c 	bl	800477c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046c4:	e03f      	b.n	8004746 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <HAL_UART_IRQHandler+0x570>
 80046d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fd2e 	bl	800514a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ee:	e02d      	b.n	800474c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00e      	beq.n	800471a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01c      	beq.n	800474a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
    }
    return;
 8004718:	e017      	b.n	800474a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d012      	beq.n	800474c <HAL_UART_IRQHandler+0x5cc>
 8004726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fcdf 	bl	80050f6 <UART_EndTransmit_IT>
    return;
 8004738:	e008      	b.n	800474c <HAL_UART_IRQHandler+0x5cc>
      return;
 800473a:	bf00      	nop
 800473c:	e006      	b.n	800474c <HAL_UART_IRQHandler+0x5cc>
    return;
 800473e:	bf00      	nop
 8004740:	e004      	b.n	800474c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <HAL_UART_IRQHandler+0x5cc>
    return;
 800474a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800474c:	37e8      	adds	r7, #232	; 0xe8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop

08004754 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004798:	b08a      	sub	sp, #40	; 0x28
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4ba5      	ldr	r3, [pc, #660]	; (8004a58 <UART_SetConfig+0x2c4>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a9a      	ldr	r2, [pc, #616]	; (8004a5c <UART_SetConfig+0x2c8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	4313      	orrs	r3, r2
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a91      	ldr	r2, [pc, #580]	; (8004a60 <UART_SetConfig+0x2cc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d126      	bne.n	800486c <UART_SetConfig+0xd8>
 800481e:	4b91      	ldr	r3, [pc, #580]	; (8004a64 <UART_SetConfig+0x2d0>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	2b03      	cmp	r3, #3
 800482a:	d81b      	bhi.n	8004864 <UART_SetConfig+0xd0>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0xa0>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004845 	.word	0x08004845
 8004838:	08004855 	.word	0x08004855
 800483c:	0800484d 	.word	0x0800484d
 8004840:	0800485d 	.word	0x0800485d
 8004844:	2301      	movs	r3, #1
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e0d6      	b.n	80049fa <UART_SetConfig+0x266>
 800484c:	2302      	movs	r3, #2
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e0d2      	b.n	80049fa <UART_SetConfig+0x266>
 8004854:	2304      	movs	r3, #4
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e0ce      	b.n	80049fa <UART_SetConfig+0x266>
 800485c:	2308      	movs	r3, #8
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e0ca      	b.n	80049fa <UART_SetConfig+0x266>
 8004864:	2310      	movs	r3, #16
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e0c6      	b.n	80049fa <UART_SetConfig+0x266>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a7d      	ldr	r2, [pc, #500]	; (8004a68 <UART_SetConfig+0x2d4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d138      	bne.n	80048e8 <UART_SetConfig+0x154>
 8004876:	4b7b      	ldr	r3, [pc, #492]	; (8004a64 <UART_SetConfig+0x2d0>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d82d      	bhi.n	80048e0 <UART_SetConfig+0x14c>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0xf8>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048c1 	.word	0x080048c1
 8004890:	080048e1 	.word	0x080048e1
 8004894:	080048e1 	.word	0x080048e1
 8004898:	080048e1 	.word	0x080048e1
 800489c:	080048d1 	.word	0x080048d1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048e1 	.word	0x080048e1
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	080048c9 	.word	0x080048c9
 80048b0:	080048e1 	.word	0x080048e1
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048d9 	.word	0x080048d9
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c6:	e098      	b.n	80049fa <UART_SetConfig+0x266>
 80048c8:	2302      	movs	r3, #2
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ce:	e094      	b.n	80049fa <UART_SetConfig+0x266>
 80048d0:	2304      	movs	r3, #4
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d6:	e090      	b.n	80049fa <UART_SetConfig+0x266>
 80048d8:	2308      	movs	r3, #8
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048de:	e08c      	b.n	80049fa <UART_SetConfig+0x266>
 80048e0:	2310      	movs	r3, #16
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e6:	e088      	b.n	80049fa <UART_SetConfig+0x266>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5f      	ldr	r2, [pc, #380]	; (8004a6c <UART_SetConfig+0x2d8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d125      	bne.n	800493e <UART_SetConfig+0x1aa>
 80048f2:	4b5c      	ldr	r3, [pc, #368]	; (8004a64 <UART_SetConfig+0x2d0>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d016      	beq.n	800492e <UART_SetConfig+0x19a>
 8004900:	2b30      	cmp	r3, #48	; 0x30
 8004902:	d818      	bhi.n	8004936 <UART_SetConfig+0x1a2>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d00a      	beq.n	800491e <UART_SetConfig+0x18a>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d814      	bhi.n	8004936 <UART_SetConfig+0x1a2>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <UART_SetConfig+0x182>
 8004910:	2b10      	cmp	r3, #16
 8004912:	d008      	beq.n	8004926 <UART_SetConfig+0x192>
 8004914:	e00f      	b.n	8004936 <UART_SetConfig+0x1a2>
 8004916:	2300      	movs	r3, #0
 8004918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491c:	e06d      	b.n	80049fa <UART_SetConfig+0x266>
 800491e:	2302      	movs	r3, #2
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004924:	e069      	b.n	80049fa <UART_SetConfig+0x266>
 8004926:	2304      	movs	r3, #4
 8004928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492c:	e065      	b.n	80049fa <UART_SetConfig+0x266>
 800492e:	2308      	movs	r3, #8
 8004930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004934:	e061      	b.n	80049fa <UART_SetConfig+0x266>
 8004936:	2310      	movs	r3, #16
 8004938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493c:	e05d      	b.n	80049fa <UART_SetConfig+0x266>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a4b      	ldr	r2, [pc, #300]	; (8004a70 <UART_SetConfig+0x2dc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d125      	bne.n	8004994 <UART_SetConfig+0x200>
 8004948:	4b46      	ldr	r3, [pc, #280]	; (8004a64 <UART_SetConfig+0x2d0>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004952:	2bc0      	cmp	r3, #192	; 0xc0
 8004954:	d016      	beq.n	8004984 <UART_SetConfig+0x1f0>
 8004956:	2bc0      	cmp	r3, #192	; 0xc0
 8004958:	d818      	bhi.n	800498c <UART_SetConfig+0x1f8>
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d00a      	beq.n	8004974 <UART_SetConfig+0x1e0>
 800495e:	2b80      	cmp	r3, #128	; 0x80
 8004960:	d814      	bhi.n	800498c <UART_SetConfig+0x1f8>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <UART_SetConfig+0x1d8>
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d008      	beq.n	800497c <UART_SetConfig+0x1e8>
 800496a:	e00f      	b.n	800498c <UART_SetConfig+0x1f8>
 800496c:	2300      	movs	r3, #0
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e042      	b.n	80049fa <UART_SetConfig+0x266>
 8004974:	2302      	movs	r3, #2
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e03e      	b.n	80049fa <UART_SetConfig+0x266>
 800497c:	2304      	movs	r3, #4
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e03a      	b.n	80049fa <UART_SetConfig+0x266>
 8004984:	2308      	movs	r3, #8
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	e036      	b.n	80049fa <UART_SetConfig+0x266>
 800498c:	2310      	movs	r3, #16
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004992:	e032      	b.n	80049fa <UART_SetConfig+0x266>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a30      	ldr	r2, [pc, #192]	; (8004a5c <UART_SetConfig+0x2c8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d12a      	bne.n	80049f4 <UART_SetConfig+0x260>
 800499e:	4b31      	ldr	r3, [pc, #196]	; (8004a64 <UART_SetConfig+0x2d0>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ac:	d01a      	beq.n	80049e4 <UART_SetConfig+0x250>
 80049ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b2:	d81b      	bhi.n	80049ec <UART_SetConfig+0x258>
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b8:	d00c      	beq.n	80049d4 <UART_SetConfig+0x240>
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049be:	d815      	bhi.n	80049ec <UART_SetConfig+0x258>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <UART_SetConfig+0x238>
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c8:	d008      	beq.n	80049dc <UART_SetConfig+0x248>
 80049ca:	e00f      	b.n	80049ec <UART_SetConfig+0x258>
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d2:	e012      	b.n	80049fa <UART_SetConfig+0x266>
 80049d4:	2302      	movs	r3, #2
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049da:	e00e      	b.n	80049fa <UART_SetConfig+0x266>
 80049dc:	2304      	movs	r3, #4
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e2:	e00a      	b.n	80049fa <UART_SetConfig+0x266>
 80049e4:	2308      	movs	r3, #8
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ea:	e006      	b.n	80049fa <UART_SetConfig+0x266>
 80049ec:	2310      	movs	r3, #16
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f2:	e002      	b.n	80049fa <UART_SetConfig+0x266>
 80049f4:	2310      	movs	r3, #16
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <UART_SetConfig+0x2c8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	f040 808b 	bne.w	8004b1c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d834      	bhi.n	8004a78 <UART_SetConfig+0x2e4>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <UART_SetConfig+0x280>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a79 	.word	0x08004a79
 8004a1c:	08004a41 	.word	0x08004a41
 8004a20:	08004a79 	.word	0x08004a79
 8004a24:	08004a47 	.word	0x08004a47
 8004a28:	08004a79 	.word	0x08004a79
 8004a2c:	08004a79 	.word	0x08004a79
 8004a30:	08004a79 	.word	0x08004a79
 8004a34:	08004a4f 	.word	0x08004a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fe fee0 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8004a3c:	61f8      	str	r0, [r7, #28]
        break;
 8004a3e:	e021      	b.n	8004a84 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <UART_SetConfig+0x2e0>)
 8004a42:	61fb      	str	r3, [r7, #28]
        break;
 8004a44:	e01e      	b.n	8004a84 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a46:	f7fe fe41 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8004a4a:	61f8      	str	r0, [r7, #28]
        break;
 8004a4c:	e01a      	b.n	8004a84 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a52:	61fb      	str	r3, [r7, #28]
        break;
 8004a54:	e016      	b.n	8004a84 <UART_SetConfig+0x2f0>
 8004a56:	bf00      	nop
 8004a58:	efff69f3 	.word	0xefff69f3
 8004a5c:	40008000 	.word	0x40008000
 8004a60:	40013800 	.word	0x40013800
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40004400 	.word	0x40004400
 8004a6c:	40004800 	.word	0x40004800
 8004a70:	40004c00 	.word	0x40004c00
 8004a74:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80fa 	beq.w	8004c80 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4413      	add	r3, r2
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d305      	bcc.n	8004aa8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d903      	bls.n	8004ab0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004aae:	e0e7      	b.n	8004c80 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	461c      	mov	r4, r3
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	022b      	lsls	r3, r5, #8
 8004ac2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ac6:	0222      	lsls	r2, r4, #8
 8004ac8:	68f9      	ldr	r1, [r7, #12]
 8004aca:	6849      	ldr	r1, [r1, #4]
 8004acc:	0849      	lsrs	r1, r1, #1
 8004ace:	2000      	movs	r0, #0
 8004ad0:	4688      	mov	r8, r1
 8004ad2:	4681      	mov	r9, r0
 8004ad4:	eb12 0a08 	adds.w	sl, r2, r8
 8004ad8:	eb43 0b09 	adc.w	fp, r3, r9
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aea:	4650      	mov	r0, sl
 8004aec:	4659      	mov	r1, fp
 8004aee:	f7fb fbc7 	bl	8000280 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4613      	mov	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b00:	d308      	bcc.n	8004b14 <UART_SetConfig+0x380>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b08:	d204      	bcs.n	8004b14 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	60da      	str	r2, [r3, #12]
 8004b12:	e0b5      	b.n	8004c80 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b1a:	e0b1      	b.n	8004c80 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b24:	d15d      	bne.n	8004be2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004b26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d827      	bhi.n	8004b7e <UART_SetConfig+0x3ea>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x3a0>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b7f 	.word	0x08004b7f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b7f 	.word	0x08004b7f
 8004b50:	08004b7f 	.word	0x08004b7f
 8004b54:	08004b77 	.word	0x08004b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fe fe50 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61f8      	str	r0, [r7, #28]
        break;
 8004b5e:	e014      	b.n	8004b8a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7fe fe62 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8004b64:	61f8      	str	r0, [r7, #28]
        break;
 8004b66:	e010      	b.n	8004b8a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b68:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <UART_SetConfig+0x508>)
 8004b6a:	61fb      	str	r3, [r7, #28]
        break;
 8004b6c:	e00d      	b.n	8004b8a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6e:	f7fe fdad 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8004b72:	61f8      	str	r0, [r7, #28]
        break;
 8004b74:	e009      	b.n	8004b8a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7a:	61fb      	str	r3, [r7, #28]
        break;
 8004b7c:	e005      	b.n	8004b8a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d077      	beq.n	8004c80 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	005a      	lsls	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	441a      	add	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d916      	bls.n	8004bda <UART_SetConfig+0x446>
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d212      	bcs.n	8004bda <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f023 030f 	bic.w	r3, r3, #15
 8004bbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	8afb      	ldrh	r3, [r7, #22]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	8afa      	ldrh	r2, [r7, #22]
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e052      	b.n	8004c80 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004be0:	e04e      	b.n	8004c80 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004be2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d827      	bhi.n	8004c3a <UART_SetConfig+0x4a6>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <UART_SetConfig+0x45c>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c15 	.word	0x08004c15
 8004bf4:	08004c1d 	.word	0x08004c1d
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c3b 	.word	0x08004c3b
 8004c00:	08004c2b 	.word	0x08004c2b
 8004c04:	08004c3b 	.word	0x08004c3b
 8004c08:	08004c3b 	.word	0x08004c3b
 8004c0c:	08004c3b 	.word	0x08004c3b
 8004c10:	08004c33 	.word	0x08004c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c14:	f7fe fdf2 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8004c18:	61f8      	str	r0, [r7, #28]
        break;
 8004c1a:	e014      	b.n	8004c46 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c1c:	f7fe fe04 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8004c20:	61f8      	str	r0, [r7, #28]
        break;
 8004c22:	e010      	b.n	8004c46 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <UART_SetConfig+0x508>)
 8004c26:	61fb      	str	r3, [r7, #28]
        break;
 8004c28:	e00d      	b.n	8004c46 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2a:	f7fe fd4f 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8004c2e:	61f8      	str	r0, [r7, #28]
        break;
 8004c30:	e009      	b.n	8004c46 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c36:	61fb      	str	r3, [r7, #28]
        break;
 8004c38:	e005      	b.n	8004c46 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c44:	bf00      	nop
    }

    if (pclk != 0U)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d019      	beq.n	8004c80 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	085a      	lsrs	r2, r3, #1
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	441a      	add	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	d909      	bls.n	8004c7a <UART_SetConfig+0x4e6>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d205      	bcs.n	8004c7a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e002      	b.n	8004c80 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3728      	adds	r7, #40	; 0x28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9a:	bf00      	nop
 8004c9c:	00f42400 	.word	0x00f42400

08004ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9e:	d10a      	bne.n	8004db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b098      	sub	sp, #96	; 0x60
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df4:	f7fc f89e 	bl	8000f34 <HAL_GetTick>
 8004df8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d12e      	bne.n	8004e66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f88c 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d021      	beq.n	8004e66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e36:	653b      	str	r3, [r7, #80]	; 0x50
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44
 8004e42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e6      	bne.n	8004e22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e062      	b.n	8004f2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d149      	bne.n	8004f08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f856 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d03c      	beq.n	8004f08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	633b      	str	r3, [r7, #48]	; 0x30
 8004eae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee0:	61fa      	str	r2, [r7, #28]
 8004ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	617b      	str	r3, [r7, #20]
   return(result);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e5      	bne.n	8004ec0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e011      	b.n	8004f2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3758      	adds	r7, #88	; 0x58
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f44:	e049      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f4c:	d045      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fb fff1 	bl	8000f34 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e048      	b.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d031      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d110      	bne.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2208      	movs	r2, #8
 8004f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f838 	bl	8005002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2208      	movs	r2, #8
 8004f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e029      	b.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb4:	d111      	bne.n	8004fda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f81e 	bl	8005002 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e00f      	b.n	8004ffa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d0a6      	beq.n	8004f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005002:	b480      	push	{r7}
 8005004:	b095      	sub	sp, #84	; 0x54
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005028:	643b      	str	r3, [r7, #64]	; 0x40
 800502a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800502e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e6      	bne.n	800500a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3308      	adds	r3, #8
 8005042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	61fb      	str	r3, [r7, #28]
   return(result);
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	64bb      	str	r3, [r7, #72]	; 0x48
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800505c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005074:	2b01      	cmp	r3, #1
 8005076:	d118      	bne.n	80050aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	60bb      	str	r3, [r7, #8]
   return(result);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f023 0310 	bic.w	r3, r3, #16
 800508c:	647b      	str	r3, [r7, #68]	; 0x44
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6979      	ldr	r1, [r7, #20]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	613b      	str	r3, [r7, #16]
   return(result);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e6      	bne.n	8005078 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050be:	bf00      	nop
 80050c0:	3754      	adds	r7, #84	; 0x54
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff fb3d 	bl	8004768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b088      	sub	sp, #32
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60bb      	str	r3, [r7, #8]
   return(result);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6979      	ldr	r1, [r7, #20]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	613b      	str	r3, [r7, #16]
   return(result);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e6      	bne.n	80050fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fb09 	bl	8004754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005142:	bf00      	nop
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <siprintf>:
 8005160:	b40e      	push	{r1, r2, r3}
 8005162:	b500      	push	{lr}
 8005164:	b09c      	sub	sp, #112	; 0x70
 8005166:	ab1d      	add	r3, sp, #116	; 0x74
 8005168:	9002      	str	r0, [sp, #8]
 800516a:	9006      	str	r0, [sp, #24]
 800516c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005170:	4809      	ldr	r0, [pc, #36]	; (8005198 <siprintf+0x38>)
 8005172:	9107      	str	r1, [sp, #28]
 8005174:	9104      	str	r1, [sp, #16]
 8005176:	4909      	ldr	r1, [pc, #36]	; (800519c <siprintf+0x3c>)
 8005178:	f853 2b04 	ldr.w	r2, [r3], #4
 800517c:	9105      	str	r1, [sp, #20]
 800517e:	6800      	ldr	r0, [r0, #0]
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	a902      	add	r1, sp, #8
 8005184:	f000 f992 	bl	80054ac <_svfiprintf_r>
 8005188:	9b02      	ldr	r3, [sp, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	b01c      	add	sp, #112	; 0x70
 8005190:	f85d eb04 	ldr.w	lr, [sp], #4
 8005194:	b003      	add	sp, #12
 8005196:	4770      	bx	lr
 8005198:	20000058 	.word	0x20000058
 800519c:	ffff0208 	.word	0xffff0208

080051a0 <memset>:
 80051a0:	4402      	add	r2, r0
 80051a2:	4603      	mov	r3, r0
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d100      	bne.n	80051aa <memset+0xa>
 80051a8:	4770      	bx	lr
 80051aa:	f803 1b01 	strb.w	r1, [r3], #1
 80051ae:	e7f9      	b.n	80051a4 <memset+0x4>

080051b0 <__errno>:
 80051b0:	4b01      	ldr	r3, [pc, #4]	; (80051b8 <__errno+0x8>)
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000058 	.word	0x20000058

080051bc <__libc_init_array>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	4d0d      	ldr	r5, [pc, #52]	; (80051f4 <__libc_init_array+0x38>)
 80051c0:	4c0d      	ldr	r4, [pc, #52]	; (80051f8 <__libc_init_array+0x3c>)
 80051c2:	1b64      	subs	r4, r4, r5
 80051c4:	10a4      	asrs	r4, r4, #2
 80051c6:	2600      	movs	r6, #0
 80051c8:	42a6      	cmp	r6, r4
 80051ca:	d109      	bne.n	80051e0 <__libc_init_array+0x24>
 80051cc:	4d0b      	ldr	r5, [pc, #44]	; (80051fc <__libc_init_array+0x40>)
 80051ce:	4c0c      	ldr	r4, [pc, #48]	; (8005200 <__libc_init_array+0x44>)
 80051d0:	f000 fc6a 	bl	8005aa8 <_init>
 80051d4:	1b64      	subs	r4, r4, r5
 80051d6:	10a4      	asrs	r4, r4, #2
 80051d8:	2600      	movs	r6, #0
 80051da:	42a6      	cmp	r6, r4
 80051dc:	d105      	bne.n	80051ea <__libc_init_array+0x2e>
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e4:	4798      	blx	r3
 80051e6:	3601      	adds	r6, #1
 80051e8:	e7ee      	b.n	80051c8 <__libc_init_array+0xc>
 80051ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ee:	4798      	blx	r3
 80051f0:	3601      	adds	r6, #1
 80051f2:	e7f2      	b.n	80051da <__libc_init_array+0x1e>
 80051f4:	08005b5c 	.word	0x08005b5c
 80051f8:	08005b5c 	.word	0x08005b5c
 80051fc:	08005b5c 	.word	0x08005b5c
 8005200:	08005b60 	.word	0x08005b60

08005204 <__retarget_lock_acquire_recursive>:
 8005204:	4770      	bx	lr

08005206 <__retarget_lock_release_recursive>:
 8005206:	4770      	bx	lr

08005208 <_free_r>:
 8005208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800520a:	2900      	cmp	r1, #0
 800520c:	d044      	beq.n	8005298 <_free_r+0x90>
 800520e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005212:	9001      	str	r0, [sp, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f1a1 0404 	sub.w	r4, r1, #4
 800521a:	bfb8      	it	lt
 800521c:	18e4      	addlt	r4, r4, r3
 800521e:	f000 f8df 	bl	80053e0 <__malloc_lock>
 8005222:	4a1e      	ldr	r2, [pc, #120]	; (800529c <_free_r+0x94>)
 8005224:	9801      	ldr	r0, [sp, #4]
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	b933      	cbnz	r3, 8005238 <_free_r+0x30>
 800522a:	6063      	str	r3, [r4, #4]
 800522c:	6014      	str	r4, [r2, #0]
 800522e:	b003      	add	sp, #12
 8005230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005234:	f000 b8da 	b.w	80053ec <__malloc_unlock>
 8005238:	42a3      	cmp	r3, r4
 800523a:	d908      	bls.n	800524e <_free_r+0x46>
 800523c:	6825      	ldr	r5, [r4, #0]
 800523e:	1961      	adds	r1, r4, r5
 8005240:	428b      	cmp	r3, r1
 8005242:	bf01      	itttt	eq
 8005244:	6819      	ldreq	r1, [r3, #0]
 8005246:	685b      	ldreq	r3, [r3, #4]
 8005248:	1949      	addeq	r1, r1, r5
 800524a:	6021      	streq	r1, [r4, #0]
 800524c:	e7ed      	b.n	800522a <_free_r+0x22>
 800524e:	461a      	mov	r2, r3
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	b10b      	cbz	r3, 8005258 <_free_r+0x50>
 8005254:	42a3      	cmp	r3, r4
 8005256:	d9fa      	bls.n	800524e <_free_r+0x46>
 8005258:	6811      	ldr	r1, [r2, #0]
 800525a:	1855      	adds	r5, r2, r1
 800525c:	42a5      	cmp	r5, r4
 800525e:	d10b      	bne.n	8005278 <_free_r+0x70>
 8005260:	6824      	ldr	r4, [r4, #0]
 8005262:	4421      	add	r1, r4
 8005264:	1854      	adds	r4, r2, r1
 8005266:	42a3      	cmp	r3, r4
 8005268:	6011      	str	r1, [r2, #0]
 800526a:	d1e0      	bne.n	800522e <_free_r+0x26>
 800526c:	681c      	ldr	r4, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	6053      	str	r3, [r2, #4]
 8005272:	440c      	add	r4, r1
 8005274:	6014      	str	r4, [r2, #0]
 8005276:	e7da      	b.n	800522e <_free_r+0x26>
 8005278:	d902      	bls.n	8005280 <_free_r+0x78>
 800527a:	230c      	movs	r3, #12
 800527c:	6003      	str	r3, [r0, #0]
 800527e:	e7d6      	b.n	800522e <_free_r+0x26>
 8005280:	6825      	ldr	r5, [r4, #0]
 8005282:	1961      	adds	r1, r4, r5
 8005284:	428b      	cmp	r3, r1
 8005286:	bf04      	itt	eq
 8005288:	6819      	ldreq	r1, [r3, #0]
 800528a:	685b      	ldreq	r3, [r3, #4]
 800528c:	6063      	str	r3, [r4, #4]
 800528e:	bf04      	itt	eq
 8005290:	1949      	addeq	r1, r1, r5
 8005292:	6021      	streq	r1, [r4, #0]
 8005294:	6054      	str	r4, [r2, #4]
 8005296:	e7ca      	b.n	800522e <_free_r+0x26>
 8005298:	b003      	add	sp, #12
 800529a:	bd30      	pop	{r4, r5, pc}
 800529c:	200002f8 	.word	0x200002f8

080052a0 <sbrk_aligned>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4e0e      	ldr	r6, [pc, #56]	; (80052dc <sbrk_aligned+0x3c>)
 80052a4:	460c      	mov	r4, r1
 80052a6:	6831      	ldr	r1, [r6, #0]
 80052a8:	4605      	mov	r5, r0
 80052aa:	b911      	cbnz	r1, 80052b2 <sbrk_aligned+0x12>
 80052ac:	f000 fba6 	bl	80059fc <_sbrk_r>
 80052b0:	6030      	str	r0, [r6, #0]
 80052b2:	4621      	mov	r1, r4
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 fba1 	bl	80059fc <_sbrk_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d00a      	beq.n	80052d4 <sbrk_aligned+0x34>
 80052be:	1cc4      	adds	r4, r0, #3
 80052c0:	f024 0403 	bic.w	r4, r4, #3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d007      	beq.n	80052d8 <sbrk_aligned+0x38>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 fb96 	bl	80059fc <_sbrk_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d101      	bne.n	80052d8 <sbrk_aligned+0x38>
 80052d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80052d8:	4620      	mov	r0, r4
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	200002fc 	.word	0x200002fc

080052e0 <_malloc_r>:
 80052e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e4:	1ccd      	adds	r5, r1, #3
 80052e6:	f025 0503 	bic.w	r5, r5, #3
 80052ea:	3508      	adds	r5, #8
 80052ec:	2d0c      	cmp	r5, #12
 80052ee:	bf38      	it	cc
 80052f0:	250c      	movcc	r5, #12
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	4607      	mov	r7, r0
 80052f6:	db01      	blt.n	80052fc <_malloc_r+0x1c>
 80052f8:	42a9      	cmp	r1, r5
 80052fa:	d905      	bls.n	8005308 <_malloc_r+0x28>
 80052fc:	230c      	movs	r3, #12
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	2600      	movs	r6, #0
 8005302:	4630      	mov	r0, r6
 8005304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005308:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053dc <_malloc_r+0xfc>
 800530c:	f000 f868 	bl	80053e0 <__malloc_lock>
 8005310:	f8d8 3000 	ldr.w	r3, [r8]
 8005314:	461c      	mov	r4, r3
 8005316:	bb5c      	cbnz	r4, 8005370 <_malloc_r+0x90>
 8005318:	4629      	mov	r1, r5
 800531a:	4638      	mov	r0, r7
 800531c:	f7ff ffc0 	bl	80052a0 <sbrk_aligned>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	4604      	mov	r4, r0
 8005324:	d155      	bne.n	80053d2 <_malloc_r+0xf2>
 8005326:	f8d8 4000 	ldr.w	r4, [r8]
 800532a:	4626      	mov	r6, r4
 800532c:	2e00      	cmp	r6, #0
 800532e:	d145      	bne.n	80053bc <_malloc_r+0xdc>
 8005330:	2c00      	cmp	r4, #0
 8005332:	d048      	beq.n	80053c6 <_malloc_r+0xe6>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	4631      	mov	r1, r6
 8005338:	4638      	mov	r0, r7
 800533a:	eb04 0903 	add.w	r9, r4, r3
 800533e:	f000 fb5d 	bl	80059fc <_sbrk_r>
 8005342:	4581      	cmp	r9, r0
 8005344:	d13f      	bne.n	80053c6 <_malloc_r+0xe6>
 8005346:	6821      	ldr	r1, [r4, #0]
 8005348:	1a6d      	subs	r5, r5, r1
 800534a:	4629      	mov	r1, r5
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff ffa7 	bl	80052a0 <sbrk_aligned>
 8005352:	3001      	adds	r0, #1
 8005354:	d037      	beq.n	80053c6 <_malloc_r+0xe6>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	442b      	add	r3, r5
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	f8d8 3000 	ldr.w	r3, [r8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d038      	beq.n	80053d6 <_malloc_r+0xf6>
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	42a2      	cmp	r2, r4
 8005368:	d12b      	bne.n	80053c2 <_malloc_r+0xe2>
 800536a:	2200      	movs	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	e00f      	b.n	8005390 <_malloc_r+0xb0>
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	1b52      	subs	r2, r2, r5
 8005374:	d41f      	bmi.n	80053b6 <_malloc_r+0xd6>
 8005376:	2a0b      	cmp	r2, #11
 8005378:	d917      	bls.n	80053aa <_malloc_r+0xca>
 800537a:	1961      	adds	r1, r4, r5
 800537c:	42a3      	cmp	r3, r4
 800537e:	6025      	str	r5, [r4, #0]
 8005380:	bf18      	it	ne
 8005382:	6059      	strne	r1, [r3, #4]
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	bf08      	it	eq
 8005388:	f8c8 1000 	streq.w	r1, [r8]
 800538c:	5162      	str	r2, [r4, r5]
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	4638      	mov	r0, r7
 8005392:	f104 060b 	add.w	r6, r4, #11
 8005396:	f000 f829 	bl	80053ec <__malloc_unlock>
 800539a:	f026 0607 	bic.w	r6, r6, #7
 800539e:	1d23      	adds	r3, r4, #4
 80053a0:	1af2      	subs	r2, r6, r3
 80053a2:	d0ae      	beq.n	8005302 <_malloc_r+0x22>
 80053a4:	1b9b      	subs	r3, r3, r6
 80053a6:	50a3      	str	r3, [r4, r2]
 80053a8:	e7ab      	b.n	8005302 <_malloc_r+0x22>
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	6862      	ldr	r2, [r4, #4]
 80053ae:	d1dd      	bne.n	800536c <_malloc_r+0x8c>
 80053b0:	f8c8 2000 	str.w	r2, [r8]
 80053b4:	e7ec      	b.n	8005390 <_malloc_r+0xb0>
 80053b6:	4623      	mov	r3, r4
 80053b8:	6864      	ldr	r4, [r4, #4]
 80053ba:	e7ac      	b.n	8005316 <_malloc_r+0x36>
 80053bc:	4634      	mov	r4, r6
 80053be:	6876      	ldr	r6, [r6, #4]
 80053c0:	e7b4      	b.n	800532c <_malloc_r+0x4c>
 80053c2:	4613      	mov	r3, r2
 80053c4:	e7cc      	b.n	8005360 <_malloc_r+0x80>
 80053c6:	230c      	movs	r3, #12
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	4638      	mov	r0, r7
 80053cc:	f000 f80e 	bl	80053ec <__malloc_unlock>
 80053d0:	e797      	b.n	8005302 <_malloc_r+0x22>
 80053d2:	6025      	str	r5, [r4, #0]
 80053d4:	e7dc      	b.n	8005390 <_malloc_r+0xb0>
 80053d6:	605b      	str	r3, [r3, #4]
 80053d8:	deff      	udf	#255	; 0xff
 80053da:	bf00      	nop
 80053dc:	200002f8 	.word	0x200002f8

080053e0 <__malloc_lock>:
 80053e0:	4801      	ldr	r0, [pc, #4]	; (80053e8 <__malloc_lock+0x8>)
 80053e2:	f7ff bf0f 	b.w	8005204 <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	200002f4 	.word	0x200002f4

080053ec <__malloc_unlock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__malloc_unlock+0x8>)
 80053ee:	f7ff bf0a 	b.w	8005206 <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	200002f4 	.word	0x200002f4

080053f8 <__ssputs_r>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	688e      	ldr	r6, [r1, #8]
 80053fe:	461f      	mov	r7, r3
 8005400:	42be      	cmp	r6, r7
 8005402:	680b      	ldr	r3, [r1, #0]
 8005404:	4682      	mov	sl, r0
 8005406:	460c      	mov	r4, r1
 8005408:	4690      	mov	r8, r2
 800540a:	d82c      	bhi.n	8005466 <__ssputs_r+0x6e>
 800540c:	898a      	ldrh	r2, [r1, #12]
 800540e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005412:	d026      	beq.n	8005462 <__ssputs_r+0x6a>
 8005414:	6965      	ldr	r5, [r4, #20]
 8005416:	6909      	ldr	r1, [r1, #16]
 8005418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800541c:	eba3 0901 	sub.w	r9, r3, r1
 8005420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005424:	1c7b      	adds	r3, r7, #1
 8005426:	444b      	add	r3, r9
 8005428:	106d      	asrs	r5, r5, #1
 800542a:	429d      	cmp	r5, r3
 800542c:	bf38      	it	cc
 800542e:	461d      	movcc	r5, r3
 8005430:	0553      	lsls	r3, r2, #21
 8005432:	d527      	bpl.n	8005484 <__ssputs_r+0x8c>
 8005434:	4629      	mov	r1, r5
 8005436:	f7ff ff53 	bl	80052e0 <_malloc_r>
 800543a:	4606      	mov	r6, r0
 800543c:	b360      	cbz	r0, 8005498 <__ssputs_r+0xa0>
 800543e:	6921      	ldr	r1, [r4, #16]
 8005440:	464a      	mov	r2, r9
 8005442:	f000 faeb 	bl	8005a1c <memcpy>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	6126      	str	r6, [r4, #16]
 8005454:	6165      	str	r5, [r4, #20]
 8005456:	444e      	add	r6, r9
 8005458:	eba5 0509 	sub.w	r5, r5, r9
 800545c:	6026      	str	r6, [r4, #0]
 800545e:	60a5      	str	r5, [r4, #8]
 8005460:	463e      	mov	r6, r7
 8005462:	42be      	cmp	r6, r7
 8005464:	d900      	bls.n	8005468 <__ssputs_r+0x70>
 8005466:	463e      	mov	r6, r7
 8005468:	6820      	ldr	r0, [r4, #0]
 800546a:	4632      	mov	r2, r6
 800546c:	4641      	mov	r1, r8
 800546e:	f000 faab 	bl	80059c8 <memmove>
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	1b9b      	subs	r3, r3, r6
 8005476:	60a3      	str	r3, [r4, #8]
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	4433      	add	r3, r6
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	2000      	movs	r0, #0
 8005480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005484:	462a      	mov	r2, r5
 8005486:	f000 fad7 	bl	8005a38 <_realloc_r>
 800548a:	4606      	mov	r6, r0
 800548c:	2800      	cmp	r0, #0
 800548e:	d1e0      	bne.n	8005452 <__ssputs_r+0x5a>
 8005490:	6921      	ldr	r1, [r4, #16]
 8005492:	4650      	mov	r0, sl
 8005494:	f7ff feb8 	bl	8005208 <_free_r>
 8005498:	230c      	movs	r3, #12
 800549a:	f8ca 3000 	str.w	r3, [sl]
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054aa:	e7e9      	b.n	8005480 <__ssputs_r+0x88>

080054ac <_svfiprintf_r>:
 80054ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	4698      	mov	r8, r3
 80054b2:	898b      	ldrh	r3, [r1, #12]
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	b09d      	sub	sp, #116	; 0x74
 80054b8:	4607      	mov	r7, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	4614      	mov	r4, r2
 80054be:	d50e      	bpl.n	80054de <_svfiprintf_r+0x32>
 80054c0:	690b      	ldr	r3, [r1, #16]
 80054c2:	b963      	cbnz	r3, 80054de <_svfiprintf_r+0x32>
 80054c4:	2140      	movs	r1, #64	; 0x40
 80054c6:	f7ff ff0b 	bl	80052e0 <_malloc_r>
 80054ca:	6028      	str	r0, [r5, #0]
 80054cc:	6128      	str	r0, [r5, #16]
 80054ce:	b920      	cbnz	r0, 80054da <_svfiprintf_r+0x2e>
 80054d0:	230c      	movs	r3, #12
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054d8:	e0d0      	b.n	800567c <_svfiprintf_r+0x1d0>
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	616b      	str	r3, [r5, #20]
 80054de:	2300      	movs	r3, #0
 80054e0:	9309      	str	r3, [sp, #36]	; 0x24
 80054e2:	2320      	movs	r3, #32
 80054e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ec:	2330      	movs	r3, #48	; 0x30
 80054ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005694 <_svfiprintf_r+0x1e8>
 80054f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054f6:	f04f 0901 	mov.w	r9, #1
 80054fa:	4623      	mov	r3, r4
 80054fc:	469a      	mov	sl, r3
 80054fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005502:	b10a      	cbz	r2, 8005508 <_svfiprintf_r+0x5c>
 8005504:	2a25      	cmp	r2, #37	; 0x25
 8005506:	d1f9      	bne.n	80054fc <_svfiprintf_r+0x50>
 8005508:	ebba 0b04 	subs.w	fp, sl, r4
 800550c:	d00b      	beq.n	8005526 <_svfiprintf_r+0x7a>
 800550e:	465b      	mov	r3, fp
 8005510:	4622      	mov	r2, r4
 8005512:	4629      	mov	r1, r5
 8005514:	4638      	mov	r0, r7
 8005516:	f7ff ff6f 	bl	80053f8 <__ssputs_r>
 800551a:	3001      	adds	r0, #1
 800551c:	f000 80a9 	beq.w	8005672 <_svfiprintf_r+0x1c6>
 8005520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005522:	445a      	add	r2, fp
 8005524:	9209      	str	r2, [sp, #36]	; 0x24
 8005526:	f89a 3000 	ldrb.w	r3, [sl]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80a1 	beq.w	8005672 <_svfiprintf_r+0x1c6>
 8005530:	2300      	movs	r3, #0
 8005532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800553a:	f10a 0a01 	add.w	sl, sl, #1
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	9307      	str	r3, [sp, #28]
 8005542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005546:	931a      	str	r3, [sp, #104]	; 0x68
 8005548:	4654      	mov	r4, sl
 800554a:	2205      	movs	r2, #5
 800554c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005550:	4850      	ldr	r0, [pc, #320]	; (8005694 <_svfiprintf_r+0x1e8>)
 8005552:	f7fa fe45 	bl	80001e0 <memchr>
 8005556:	9a04      	ldr	r2, [sp, #16]
 8005558:	b9d8      	cbnz	r0, 8005592 <_svfiprintf_r+0xe6>
 800555a:	06d0      	lsls	r0, r2, #27
 800555c:	bf44      	itt	mi
 800555e:	2320      	movmi	r3, #32
 8005560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005564:	0711      	lsls	r1, r2, #28
 8005566:	bf44      	itt	mi
 8005568:	232b      	movmi	r3, #43	; 0x2b
 800556a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800556e:	f89a 3000 	ldrb.w	r3, [sl]
 8005572:	2b2a      	cmp	r3, #42	; 0x2a
 8005574:	d015      	beq.n	80055a2 <_svfiprintf_r+0xf6>
 8005576:	9a07      	ldr	r2, [sp, #28]
 8005578:	4654      	mov	r4, sl
 800557a:	2000      	movs	r0, #0
 800557c:	f04f 0c0a 	mov.w	ip, #10
 8005580:	4621      	mov	r1, r4
 8005582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005586:	3b30      	subs	r3, #48	; 0x30
 8005588:	2b09      	cmp	r3, #9
 800558a:	d94d      	bls.n	8005628 <_svfiprintf_r+0x17c>
 800558c:	b1b0      	cbz	r0, 80055bc <_svfiprintf_r+0x110>
 800558e:	9207      	str	r2, [sp, #28]
 8005590:	e014      	b.n	80055bc <_svfiprintf_r+0x110>
 8005592:	eba0 0308 	sub.w	r3, r0, r8
 8005596:	fa09 f303 	lsl.w	r3, r9, r3
 800559a:	4313      	orrs	r3, r2
 800559c:	9304      	str	r3, [sp, #16]
 800559e:	46a2      	mov	sl, r4
 80055a0:	e7d2      	b.n	8005548 <_svfiprintf_r+0x9c>
 80055a2:	9b03      	ldr	r3, [sp, #12]
 80055a4:	1d19      	adds	r1, r3, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	9103      	str	r1, [sp, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bfbb      	ittet	lt
 80055ae:	425b      	neglt	r3, r3
 80055b0:	f042 0202 	orrlt.w	r2, r2, #2
 80055b4:	9307      	strge	r3, [sp, #28]
 80055b6:	9307      	strlt	r3, [sp, #28]
 80055b8:	bfb8      	it	lt
 80055ba:	9204      	strlt	r2, [sp, #16]
 80055bc:	7823      	ldrb	r3, [r4, #0]
 80055be:	2b2e      	cmp	r3, #46	; 0x2e
 80055c0:	d10c      	bne.n	80055dc <_svfiprintf_r+0x130>
 80055c2:	7863      	ldrb	r3, [r4, #1]
 80055c4:	2b2a      	cmp	r3, #42	; 0x2a
 80055c6:	d134      	bne.n	8005632 <_svfiprintf_r+0x186>
 80055c8:	9b03      	ldr	r3, [sp, #12]
 80055ca:	1d1a      	adds	r2, r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	9203      	str	r2, [sp, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bfb8      	it	lt
 80055d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80055d8:	3402      	adds	r4, #2
 80055da:	9305      	str	r3, [sp, #20]
 80055dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056a4 <_svfiprintf_r+0x1f8>
 80055e0:	7821      	ldrb	r1, [r4, #0]
 80055e2:	2203      	movs	r2, #3
 80055e4:	4650      	mov	r0, sl
 80055e6:	f7fa fdfb 	bl	80001e0 <memchr>
 80055ea:	b138      	cbz	r0, 80055fc <_svfiprintf_r+0x150>
 80055ec:	9b04      	ldr	r3, [sp, #16]
 80055ee:	eba0 000a 	sub.w	r0, r0, sl
 80055f2:	2240      	movs	r2, #64	; 0x40
 80055f4:	4082      	lsls	r2, r0
 80055f6:	4313      	orrs	r3, r2
 80055f8:	3401      	adds	r4, #1
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005600:	4825      	ldr	r0, [pc, #148]	; (8005698 <_svfiprintf_r+0x1ec>)
 8005602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005606:	2206      	movs	r2, #6
 8005608:	f7fa fdea 	bl	80001e0 <memchr>
 800560c:	2800      	cmp	r0, #0
 800560e:	d038      	beq.n	8005682 <_svfiprintf_r+0x1d6>
 8005610:	4b22      	ldr	r3, [pc, #136]	; (800569c <_svfiprintf_r+0x1f0>)
 8005612:	bb1b      	cbnz	r3, 800565c <_svfiprintf_r+0x1b0>
 8005614:	9b03      	ldr	r3, [sp, #12]
 8005616:	3307      	adds	r3, #7
 8005618:	f023 0307 	bic.w	r3, r3, #7
 800561c:	3308      	adds	r3, #8
 800561e:	9303      	str	r3, [sp, #12]
 8005620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005622:	4433      	add	r3, r6
 8005624:	9309      	str	r3, [sp, #36]	; 0x24
 8005626:	e768      	b.n	80054fa <_svfiprintf_r+0x4e>
 8005628:	fb0c 3202 	mla	r2, ip, r2, r3
 800562c:	460c      	mov	r4, r1
 800562e:	2001      	movs	r0, #1
 8005630:	e7a6      	b.n	8005580 <_svfiprintf_r+0xd4>
 8005632:	2300      	movs	r3, #0
 8005634:	3401      	adds	r4, #1
 8005636:	9305      	str	r3, [sp, #20]
 8005638:	4619      	mov	r1, r3
 800563a:	f04f 0c0a 	mov.w	ip, #10
 800563e:	4620      	mov	r0, r4
 8005640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005644:	3a30      	subs	r2, #48	; 0x30
 8005646:	2a09      	cmp	r2, #9
 8005648:	d903      	bls.n	8005652 <_svfiprintf_r+0x1a6>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0c6      	beq.n	80055dc <_svfiprintf_r+0x130>
 800564e:	9105      	str	r1, [sp, #20]
 8005650:	e7c4      	b.n	80055dc <_svfiprintf_r+0x130>
 8005652:	fb0c 2101 	mla	r1, ip, r1, r2
 8005656:	4604      	mov	r4, r0
 8005658:	2301      	movs	r3, #1
 800565a:	e7f0      	b.n	800563e <_svfiprintf_r+0x192>
 800565c:	ab03      	add	r3, sp, #12
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	462a      	mov	r2, r5
 8005662:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <_svfiprintf_r+0x1f4>)
 8005664:	a904      	add	r1, sp, #16
 8005666:	4638      	mov	r0, r7
 8005668:	f3af 8000 	nop.w
 800566c:	1c42      	adds	r2, r0, #1
 800566e:	4606      	mov	r6, r0
 8005670:	d1d6      	bne.n	8005620 <_svfiprintf_r+0x174>
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	065b      	lsls	r3, r3, #25
 8005676:	f53f af2d 	bmi.w	80054d4 <_svfiprintf_r+0x28>
 800567a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800567c:	b01d      	add	sp, #116	; 0x74
 800567e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005682:	ab03      	add	r3, sp, #12
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	462a      	mov	r2, r5
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <_svfiprintf_r+0x1f4>)
 800568a:	a904      	add	r1, sp, #16
 800568c:	4638      	mov	r0, r7
 800568e:	f000 f879 	bl	8005784 <_printf_i>
 8005692:	e7eb      	b.n	800566c <_svfiprintf_r+0x1c0>
 8005694:	08005b20 	.word	0x08005b20
 8005698:	08005b2a 	.word	0x08005b2a
 800569c:	00000000 	.word	0x00000000
 80056a0:	080053f9 	.word	0x080053f9
 80056a4:	08005b26 	.word	0x08005b26

080056a8 <_printf_common>:
 80056a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ac:	4616      	mov	r6, r2
 80056ae:	4699      	mov	r9, r3
 80056b0:	688a      	ldr	r2, [r1, #8]
 80056b2:	690b      	ldr	r3, [r1, #16]
 80056b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056b8:	4293      	cmp	r3, r2
 80056ba:	bfb8      	it	lt
 80056bc:	4613      	movlt	r3, r2
 80056be:	6033      	str	r3, [r6, #0]
 80056c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056c4:	4607      	mov	r7, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	b10a      	cbz	r2, 80056ce <_printf_common+0x26>
 80056ca:	3301      	adds	r3, #1
 80056cc:	6033      	str	r3, [r6, #0]
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	0699      	lsls	r1, r3, #26
 80056d2:	bf42      	ittt	mi
 80056d4:	6833      	ldrmi	r3, [r6, #0]
 80056d6:	3302      	addmi	r3, #2
 80056d8:	6033      	strmi	r3, [r6, #0]
 80056da:	6825      	ldr	r5, [r4, #0]
 80056dc:	f015 0506 	ands.w	r5, r5, #6
 80056e0:	d106      	bne.n	80056f0 <_printf_common+0x48>
 80056e2:	f104 0a19 	add.w	sl, r4, #25
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	6832      	ldr	r2, [r6, #0]
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	42ab      	cmp	r3, r5
 80056ee:	dc26      	bgt.n	800573e <_printf_common+0x96>
 80056f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056f4:	1e13      	subs	r3, r2, #0
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	bf18      	it	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	0692      	lsls	r2, r2, #26
 80056fe:	d42b      	bmi.n	8005758 <_printf_common+0xb0>
 8005700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005704:	4649      	mov	r1, r9
 8005706:	4638      	mov	r0, r7
 8005708:	47c0      	blx	r8
 800570a:	3001      	adds	r0, #1
 800570c:	d01e      	beq.n	800574c <_printf_common+0xa4>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	6922      	ldr	r2, [r4, #16]
 8005712:	f003 0306 	and.w	r3, r3, #6
 8005716:	2b04      	cmp	r3, #4
 8005718:	bf02      	ittt	eq
 800571a:	68e5      	ldreq	r5, [r4, #12]
 800571c:	6833      	ldreq	r3, [r6, #0]
 800571e:	1aed      	subeq	r5, r5, r3
 8005720:	68a3      	ldr	r3, [r4, #8]
 8005722:	bf0c      	ite	eq
 8005724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005728:	2500      	movne	r5, #0
 800572a:	4293      	cmp	r3, r2
 800572c:	bfc4      	itt	gt
 800572e:	1a9b      	subgt	r3, r3, r2
 8005730:	18ed      	addgt	r5, r5, r3
 8005732:	2600      	movs	r6, #0
 8005734:	341a      	adds	r4, #26
 8005736:	42b5      	cmp	r5, r6
 8005738:	d11a      	bne.n	8005770 <_printf_common+0xc8>
 800573a:	2000      	movs	r0, #0
 800573c:	e008      	b.n	8005750 <_printf_common+0xa8>
 800573e:	2301      	movs	r3, #1
 8005740:	4652      	mov	r2, sl
 8005742:	4649      	mov	r1, r9
 8005744:	4638      	mov	r0, r7
 8005746:	47c0      	blx	r8
 8005748:	3001      	adds	r0, #1
 800574a:	d103      	bne.n	8005754 <_printf_common+0xac>
 800574c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005754:	3501      	adds	r5, #1
 8005756:	e7c6      	b.n	80056e6 <_printf_common+0x3e>
 8005758:	18e1      	adds	r1, r4, r3
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	2030      	movs	r0, #48	; 0x30
 800575e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005762:	4422      	add	r2, r4
 8005764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800576c:	3302      	adds	r3, #2
 800576e:	e7c7      	b.n	8005700 <_printf_common+0x58>
 8005770:	2301      	movs	r3, #1
 8005772:	4622      	mov	r2, r4
 8005774:	4649      	mov	r1, r9
 8005776:	4638      	mov	r0, r7
 8005778:	47c0      	blx	r8
 800577a:	3001      	adds	r0, #1
 800577c:	d0e6      	beq.n	800574c <_printf_common+0xa4>
 800577e:	3601      	adds	r6, #1
 8005780:	e7d9      	b.n	8005736 <_printf_common+0x8e>
	...

08005784 <_printf_i>:
 8005784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005788:	7e0f      	ldrb	r7, [r1, #24]
 800578a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800578c:	2f78      	cmp	r7, #120	; 0x78
 800578e:	4691      	mov	r9, r2
 8005790:	4680      	mov	r8, r0
 8005792:	460c      	mov	r4, r1
 8005794:	469a      	mov	sl, r3
 8005796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800579a:	d807      	bhi.n	80057ac <_printf_i+0x28>
 800579c:	2f62      	cmp	r7, #98	; 0x62
 800579e:	d80a      	bhi.n	80057b6 <_printf_i+0x32>
 80057a0:	2f00      	cmp	r7, #0
 80057a2:	f000 80d4 	beq.w	800594e <_printf_i+0x1ca>
 80057a6:	2f58      	cmp	r7, #88	; 0x58
 80057a8:	f000 80c0 	beq.w	800592c <_printf_i+0x1a8>
 80057ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057b4:	e03a      	b.n	800582c <_printf_i+0xa8>
 80057b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ba:	2b15      	cmp	r3, #21
 80057bc:	d8f6      	bhi.n	80057ac <_printf_i+0x28>
 80057be:	a101      	add	r1, pc, #4	; (adr r1, 80057c4 <_printf_i+0x40>)
 80057c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057c4:	0800581d 	.word	0x0800581d
 80057c8:	08005831 	.word	0x08005831
 80057cc:	080057ad 	.word	0x080057ad
 80057d0:	080057ad 	.word	0x080057ad
 80057d4:	080057ad 	.word	0x080057ad
 80057d8:	080057ad 	.word	0x080057ad
 80057dc:	08005831 	.word	0x08005831
 80057e0:	080057ad 	.word	0x080057ad
 80057e4:	080057ad 	.word	0x080057ad
 80057e8:	080057ad 	.word	0x080057ad
 80057ec:	080057ad 	.word	0x080057ad
 80057f0:	08005935 	.word	0x08005935
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	080058ef 	.word	0x080058ef
 80057fc:	080057ad 	.word	0x080057ad
 8005800:	080057ad 	.word	0x080057ad
 8005804:	08005957 	.word	0x08005957
 8005808:	080057ad 	.word	0x080057ad
 800580c:	0800585d 	.word	0x0800585d
 8005810:	080057ad 	.word	0x080057ad
 8005814:	080057ad 	.word	0x080057ad
 8005818:	080058f7 	.word	0x080058f7
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	1d1a      	adds	r2, r3, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	602a      	str	r2, [r5, #0]
 8005824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800582c:	2301      	movs	r3, #1
 800582e:	e09f      	b.n	8005970 <_printf_i+0x1ec>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	682b      	ldr	r3, [r5, #0]
 8005834:	0607      	lsls	r7, r0, #24
 8005836:	f103 0104 	add.w	r1, r3, #4
 800583a:	6029      	str	r1, [r5, #0]
 800583c:	d501      	bpl.n	8005842 <_printf_i+0xbe>
 800583e:	681e      	ldr	r6, [r3, #0]
 8005840:	e003      	b.n	800584a <_printf_i+0xc6>
 8005842:	0646      	lsls	r6, r0, #25
 8005844:	d5fb      	bpl.n	800583e <_printf_i+0xba>
 8005846:	f9b3 6000 	ldrsh.w	r6, [r3]
 800584a:	2e00      	cmp	r6, #0
 800584c:	da03      	bge.n	8005856 <_printf_i+0xd2>
 800584e:	232d      	movs	r3, #45	; 0x2d
 8005850:	4276      	negs	r6, r6
 8005852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005856:	485a      	ldr	r0, [pc, #360]	; (80059c0 <_printf_i+0x23c>)
 8005858:	230a      	movs	r3, #10
 800585a:	e012      	b.n	8005882 <_printf_i+0xfe>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	1d19      	adds	r1, r3, #4
 8005862:	6029      	str	r1, [r5, #0]
 8005864:	0605      	lsls	r5, r0, #24
 8005866:	d501      	bpl.n	800586c <_printf_i+0xe8>
 8005868:	681e      	ldr	r6, [r3, #0]
 800586a:	e002      	b.n	8005872 <_printf_i+0xee>
 800586c:	0641      	lsls	r1, r0, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0xe4>
 8005870:	881e      	ldrh	r6, [r3, #0]
 8005872:	4853      	ldr	r0, [pc, #332]	; (80059c0 <_printf_i+0x23c>)
 8005874:	2f6f      	cmp	r7, #111	; 0x6f
 8005876:	bf0c      	ite	eq
 8005878:	2308      	moveq	r3, #8
 800587a:	230a      	movne	r3, #10
 800587c:	2100      	movs	r1, #0
 800587e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005882:	6865      	ldr	r5, [r4, #4]
 8005884:	60a5      	str	r5, [r4, #8]
 8005886:	2d00      	cmp	r5, #0
 8005888:	bfa2      	ittt	ge
 800588a:	6821      	ldrge	r1, [r4, #0]
 800588c:	f021 0104 	bicge.w	r1, r1, #4
 8005890:	6021      	strge	r1, [r4, #0]
 8005892:	b90e      	cbnz	r6, 8005898 <_printf_i+0x114>
 8005894:	2d00      	cmp	r5, #0
 8005896:	d04b      	beq.n	8005930 <_printf_i+0x1ac>
 8005898:	4615      	mov	r5, r2
 800589a:	fbb6 f1f3 	udiv	r1, r6, r3
 800589e:	fb03 6711 	mls	r7, r3, r1, r6
 80058a2:	5dc7      	ldrb	r7, [r0, r7]
 80058a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058a8:	4637      	mov	r7, r6
 80058aa:	42bb      	cmp	r3, r7
 80058ac:	460e      	mov	r6, r1
 80058ae:	d9f4      	bls.n	800589a <_printf_i+0x116>
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d10b      	bne.n	80058cc <_printf_i+0x148>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	07de      	lsls	r6, r3, #31
 80058b8:	d508      	bpl.n	80058cc <_printf_i+0x148>
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	6861      	ldr	r1, [r4, #4]
 80058be:	4299      	cmp	r1, r3
 80058c0:	bfde      	ittt	le
 80058c2:	2330      	movle	r3, #48	; 0x30
 80058c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058cc:	1b52      	subs	r2, r2, r5
 80058ce:	6122      	str	r2, [r4, #16]
 80058d0:	f8cd a000 	str.w	sl, [sp]
 80058d4:	464b      	mov	r3, r9
 80058d6:	aa03      	add	r2, sp, #12
 80058d8:	4621      	mov	r1, r4
 80058da:	4640      	mov	r0, r8
 80058dc:	f7ff fee4 	bl	80056a8 <_printf_common>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d14a      	bne.n	800597a <_printf_i+0x1f6>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058e8:	b004      	add	sp, #16
 80058ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	f043 0320 	orr.w	r3, r3, #32
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	4833      	ldr	r0, [pc, #204]	; (80059c4 <_printf_i+0x240>)
 80058f8:	2778      	movs	r7, #120	; 0x78
 80058fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	6829      	ldr	r1, [r5, #0]
 8005902:	061f      	lsls	r7, r3, #24
 8005904:	f851 6b04 	ldr.w	r6, [r1], #4
 8005908:	d402      	bmi.n	8005910 <_printf_i+0x18c>
 800590a:	065f      	lsls	r7, r3, #25
 800590c:	bf48      	it	mi
 800590e:	b2b6      	uxthmi	r6, r6
 8005910:	07df      	lsls	r7, r3, #31
 8005912:	bf48      	it	mi
 8005914:	f043 0320 	orrmi.w	r3, r3, #32
 8005918:	6029      	str	r1, [r5, #0]
 800591a:	bf48      	it	mi
 800591c:	6023      	strmi	r3, [r4, #0]
 800591e:	b91e      	cbnz	r6, 8005928 <_printf_i+0x1a4>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	f023 0320 	bic.w	r3, r3, #32
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	2310      	movs	r3, #16
 800592a:	e7a7      	b.n	800587c <_printf_i+0xf8>
 800592c:	4824      	ldr	r0, [pc, #144]	; (80059c0 <_printf_i+0x23c>)
 800592e:	e7e4      	b.n	80058fa <_printf_i+0x176>
 8005930:	4615      	mov	r5, r2
 8005932:	e7bd      	b.n	80058b0 <_printf_i+0x12c>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	6826      	ldr	r6, [r4, #0]
 8005938:	6961      	ldr	r1, [r4, #20]
 800593a:	1d18      	adds	r0, r3, #4
 800593c:	6028      	str	r0, [r5, #0]
 800593e:	0635      	lsls	r5, r6, #24
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	d501      	bpl.n	8005948 <_printf_i+0x1c4>
 8005944:	6019      	str	r1, [r3, #0]
 8005946:	e002      	b.n	800594e <_printf_i+0x1ca>
 8005948:	0670      	lsls	r0, r6, #25
 800594a:	d5fb      	bpl.n	8005944 <_printf_i+0x1c0>
 800594c:	8019      	strh	r1, [r3, #0]
 800594e:	2300      	movs	r3, #0
 8005950:	6123      	str	r3, [r4, #16]
 8005952:	4615      	mov	r5, r2
 8005954:	e7bc      	b.n	80058d0 <_printf_i+0x14c>
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	1d1a      	adds	r2, r3, #4
 800595a:	602a      	str	r2, [r5, #0]
 800595c:	681d      	ldr	r5, [r3, #0]
 800595e:	6862      	ldr	r2, [r4, #4]
 8005960:	2100      	movs	r1, #0
 8005962:	4628      	mov	r0, r5
 8005964:	f7fa fc3c 	bl	80001e0 <memchr>
 8005968:	b108      	cbz	r0, 800596e <_printf_i+0x1ea>
 800596a:	1b40      	subs	r0, r0, r5
 800596c:	6060      	str	r0, [r4, #4]
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	6123      	str	r3, [r4, #16]
 8005972:	2300      	movs	r3, #0
 8005974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005978:	e7aa      	b.n	80058d0 <_printf_i+0x14c>
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	462a      	mov	r2, r5
 800597e:	4649      	mov	r1, r9
 8005980:	4640      	mov	r0, r8
 8005982:	47d0      	blx	sl
 8005984:	3001      	adds	r0, #1
 8005986:	d0ad      	beq.n	80058e4 <_printf_i+0x160>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	079b      	lsls	r3, r3, #30
 800598c:	d413      	bmi.n	80059b6 <_printf_i+0x232>
 800598e:	68e0      	ldr	r0, [r4, #12]
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	4298      	cmp	r0, r3
 8005994:	bfb8      	it	lt
 8005996:	4618      	movlt	r0, r3
 8005998:	e7a6      	b.n	80058e8 <_printf_i+0x164>
 800599a:	2301      	movs	r3, #1
 800599c:	4632      	mov	r2, r6
 800599e:	4649      	mov	r1, r9
 80059a0:	4640      	mov	r0, r8
 80059a2:	47d0      	blx	sl
 80059a4:	3001      	adds	r0, #1
 80059a6:	d09d      	beq.n	80058e4 <_printf_i+0x160>
 80059a8:	3501      	adds	r5, #1
 80059aa:	68e3      	ldr	r3, [r4, #12]
 80059ac:	9903      	ldr	r1, [sp, #12]
 80059ae:	1a5b      	subs	r3, r3, r1
 80059b0:	42ab      	cmp	r3, r5
 80059b2:	dcf2      	bgt.n	800599a <_printf_i+0x216>
 80059b4:	e7eb      	b.n	800598e <_printf_i+0x20a>
 80059b6:	2500      	movs	r5, #0
 80059b8:	f104 0619 	add.w	r6, r4, #25
 80059bc:	e7f5      	b.n	80059aa <_printf_i+0x226>
 80059be:	bf00      	nop
 80059c0:	08005b31 	.word	0x08005b31
 80059c4:	08005b42 	.word	0x08005b42

080059c8 <memmove>:
 80059c8:	4288      	cmp	r0, r1
 80059ca:	b510      	push	{r4, lr}
 80059cc:	eb01 0402 	add.w	r4, r1, r2
 80059d0:	d902      	bls.n	80059d8 <memmove+0x10>
 80059d2:	4284      	cmp	r4, r0
 80059d4:	4623      	mov	r3, r4
 80059d6:	d807      	bhi.n	80059e8 <memmove+0x20>
 80059d8:	1e43      	subs	r3, r0, #1
 80059da:	42a1      	cmp	r1, r4
 80059dc:	d008      	beq.n	80059f0 <memmove+0x28>
 80059de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059e6:	e7f8      	b.n	80059da <memmove+0x12>
 80059e8:	4402      	add	r2, r0
 80059ea:	4601      	mov	r1, r0
 80059ec:	428a      	cmp	r2, r1
 80059ee:	d100      	bne.n	80059f2 <memmove+0x2a>
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059fa:	e7f7      	b.n	80059ec <memmove+0x24>

080059fc <_sbrk_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d06      	ldr	r5, [pc, #24]	; (8005a18 <_sbrk_r+0x1c>)
 8005a00:	2300      	movs	r3, #0
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	f7fb f9ba 	bl	8000d80 <_sbrk>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_sbrk_r+0x1a>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_sbrk_r+0x1a>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	200002f0 	.word	0x200002f0

08005a1c <memcpy>:
 8005a1c:	440a      	add	r2, r1
 8005a1e:	4291      	cmp	r1, r2
 8005a20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a24:	d100      	bne.n	8005a28 <memcpy+0xc>
 8005a26:	4770      	bx	lr
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a32:	4291      	cmp	r1, r2
 8005a34:	d1f9      	bne.n	8005a2a <memcpy+0xe>
 8005a36:	bd10      	pop	{r4, pc}

08005a38 <_realloc_r>:
 8005a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	4614      	mov	r4, r2
 8005a40:	460e      	mov	r6, r1
 8005a42:	b921      	cbnz	r1, 8005a4e <_realloc_r+0x16>
 8005a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a48:	4611      	mov	r1, r2
 8005a4a:	f7ff bc49 	b.w	80052e0 <_malloc_r>
 8005a4e:	b92a      	cbnz	r2, 8005a5c <_realloc_r+0x24>
 8005a50:	f7ff fbda 	bl	8005208 <_free_r>
 8005a54:	4625      	mov	r5, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a5c:	f000 f81b 	bl	8005a96 <_malloc_usable_size_r>
 8005a60:	4284      	cmp	r4, r0
 8005a62:	4607      	mov	r7, r0
 8005a64:	d802      	bhi.n	8005a6c <_realloc_r+0x34>
 8005a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a6a:	d812      	bhi.n	8005a92 <_realloc_r+0x5a>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4640      	mov	r0, r8
 8005a70:	f7ff fc36 	bl	80052e0 <_malloc_r>
 8005a74:	4605      	mov	r5, r0
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d0ed      	beq.n	8005a56 <_realloc_r+0x1e>
 8005a7a:	42bc      	cmp	r4, r7
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4631      	mov	r1, r6
 8005a80:	bf28      	it	cs
 8005a82:	463a      	movcs	r2, r7
 8005a84:	f7ff ffca 	bl	8005a1c <memcpy>
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f7ff fbbc 	bl	8005208 <_free_r>
 8005a90:	e7e1      	b.n	8005a56 <_realloc_r+0x1e>
 8005a92:	4635      	mov	r5, r6
 8005a94:	e7df      	b.n	8005a56 <_realloc_r+0x1e>

08005a96 <_malloc_usable_size_r>:
 8005a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a9a:	1f18      	subs	r0, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bfbc      	itt	lt
 8005aa0:	580b      	ldrlt	r3, [r1, r0]
 8005aa2:	18c0      	addlt	r0, r0, r3
 8005aa4:	4770      	bx	lr
	...

08005aa8 <_init>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr

08005ab4 <_fini>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	bf00      	nop
 8005ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aba:	bc08      	pop	{r3}
 8005abc:	469e      	mov	lr, r3
 8005abe:	4770      	bx	lr
