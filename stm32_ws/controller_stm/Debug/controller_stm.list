
controller_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005910  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb4  08005bb4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bbc  08005bbc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08005c20  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005c20  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb6a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e8  00000000  00000000  0002ec39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  00030d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095a  00000000  00000000  00031960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023874  00000000  00000000  000322ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd73  00000000  00000000  00055b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de5bf  00000000  00000000  000638a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037a0  00000000  00000000  00141e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00145600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a98 	.word	0x08005a98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005a98 	.word	0x08005a98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc8c 	bl	8000e9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f8c3 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9f7 	bl	800097c <MX_GPIO_Init>
  MX_DMA_Init();
 800058e:	f000 f9d7 	bl	8000940 <MX_DMA_Init>
  MX_ADC1_Init();
 8000592:	f000 f90f 	bl	80007b4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f9a3 	bl	80008e0 <MX_USART2_UART_Init>
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_2);
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_3);
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_4);

  //Turn on Power LED
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4850      	ldr	r0, [pc, #320]	; (80006e0 <main+0x164>)
 800059e:	f002 faf3 	bl	8002b88 <HAL_GPIO_TogglePin>
  //Increments during while loop to set channel
  uint8_t channel = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	75fb      	strb	r3, [r7, #23]
  //ADC channel with high priority
  uint8_t rank = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	75bb      	strb	r3, [r7, #22]
  //Array size for sent data (7 data points)
  int size = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	613b      	str	r3, [r7, #16]
  uint8_t localbuff[7];
  uint8_t *buffer = malloc(size * sizeof(uint8_t));
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fdc5 	bl	8005140 <malloc>
 80005b6:	4603      	mov	r3, r0
 80005b8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Poll data from GPIO pins and ADC channels 1-4
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) subUp = 1;
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f002 fab1 	bl	8002b28 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d102      	bne.n	80005d2 <main+0x56>
 80005cc:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <main+0x168>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET) subDown = 1;
 80005d2:	2120      	movs	r1, #32
 80005d4:	4842      	ldr	r0, [pc, #264]	; (80006e0 <main+0x164>)
 80005d6:	f002 faa7 	bl	8002b28 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d102      	bne.n	80005e6 <main+0x6a>
 80005e0:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <main+0x16c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET) screenshot = 1;
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	483d      	ldr	r0, [pc, #244]	; (80006e0 <main+0x164>)
 80005ea:	f002 fa9d 	bl	8002b28 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d102      	bne.n	80005fa <main+0x7e>
 80005f4:	4b3d      	ldr	r3, [pc, #244]	; (80006ec <main+0x170>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
		//Start ADC in DMA mode
		HAL_ADC_Start_DMA(&hadc1, &toggleData, 4);
 80005fa:	2204      	movs	r2, #4
 80005fc:	493c      	ldr	r1, [pc, #240]	; (80006f0 <main+0x174>)
 80005fe:	483d      	ldr	r0, [pc, #244]	; (80006f4 <main+0x178>)
 8000600:	f000 ffe2 	bl	80015c8 <HAL_ADC_Start_DMA>
		//configure_channel(4, rank);
		//rightToggleLR = adc_fetch_sample();

		//Copy data from struct to buffer
		//memcpy(buffer, &transmissionData, sizeof(transmissionData));
		leftToggleUD = (uint8_t *)toggleData[0];
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <main+0x174>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <main+0x17c>)
 800060c:	701a      	strb	r2, [r3, #0]
		leftToggleLR = (uint8_t *)toggleData[1];
 800060e:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <main+0x174>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <main+0x180>)
 8000616:	701a      	strb	r2, [r3, #0]
		rightToggleUD = (uint8_t *)toggleData[2];
 8000618:	4b35      	ldr	r3, [pc, #212]	; (80006f0 <main+0x174>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <main+0x184>)
 8000620:	701a      	strb	r2, [r3, #0]
		rightToggleLR = (uint8_t *)toggleData[3];
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <main+0x174>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b36      	ldr	r3, [pc, #216]	; (8000704 <main+0x188>)
 800062a:	701a      	strb	r2, [r3, #0]

		localbuff[0] = leftToggleUD;
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <main+0x17c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	713b      	strb	r3, [r7, #4]
		localbuff[1] = leftToggleLR;
 8000632:	4b32      	ldr	r3, [pc, #200]	; (80006fc <main+0x180>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	717b      	strb	r3, [r7, #5]
		localbuff[2] = rightToggleUD;
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <main+0x184>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	71bb      	strb	r3, [r7, #6]
		localbuff[3] = rightToggleLR;
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <main+0x188>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
		localbuff[4] = subUp;
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <main+0x168>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	723b      	strb	r3, [r7, #8]
		localbuff[5] = subDown;
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <main+0x16c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	727b      	strb	r3, [r7, #9]
		localbuff[6] = screenshot;
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <main+0x170>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	72bb      	strb	r3, [r7, #10]

		buffer[0] = leftToggleUD;
 8000656:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <main+0x17c>)
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	701a      	strb	r2, [r3, #0]
		buffer[1] = leftToggleLR;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	4a26      	ldr	r2, [pc, #152]	; (80006fc <main+0x180>)
 8000664:	7812      	ldrb	r2, [r2, #0]
 8000666:	701a      	strb	r2, [r3, #0]
		buffer[2] = rightToggleUD;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3302      	adds	r3, #2
 800066c:	4a24      	ldr	r2, [pc, #144]	; (8000700 <main+0x184>)
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	701a      	strb	r2, [r3, #0]
		buffer[3] = rightToggleLR;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3303      	adds	r3, #3
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <main+0x188>)
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	701a      	strb	r2, [r3, #0]
		buffer[4] = subUp;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3304      	adds	r3, #4
 8000680:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <main+0x168>)
 8000682:	7812      	ldrb	r2, [r2, #0]
 8000684:	701a      	strb	r2, [r3, #0]
		buffer[5] = subDown;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3305      	adds	r3, #5
 800068a:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <main+0x16c>)
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	701a      	strb	r2, [r3, #0]
		buffer[6] = screenshot;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3306      	adds	r3, #6
 8000694:	4a15      	ldr	r2, [pc, #84]	; (80006ec <main+0x170>)
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	701a      	strb	r2, [r3, #0]

		//strcpy(buffer, stringify(leftToggleUD, leftToggleLR, rightToggleUD, rightToggleLR, subUp, subDown, screenshot));

		//Transmit Data
		if(HAL_UART_Transmit(&huart2, buffer, sprintf(buffer, "%d", buffer), 10) != HAL_OK)
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	491a      	ldr	r1, [pc, #104]	; (8000708 <main+0x18c>)
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	f004 fe02 	bl	80052a8 <siprintf>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	230a      	movs	r3, #10
 80006aa:	68f9      	ldr	r1, [r7, #12]
 80006ac:	4817      	ldr	r0, [pc, #92]	; (800070c <main+0x190>)
 80006ae:	f003 fccd 	bl	800404c <HAL_UART_Transmit>
		{


		}
		//Reset everything to 0 once data is transmitted
		subUp = 0;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <main+0x168>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
		subDown = 0;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <main+0x16c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
		screenshot = 0;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <main+0x170>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
		leftToggleLR = 0;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <main+0x180>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
		leftToggleUD = 0;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <main+0x17c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
		rightToggleLR = 0;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <main+0x188>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
		rightToggleUD = 0;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <main+0x184>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) subUp = 1;
 80006dc:	e76d      	b.n	80005ba <main+0x3e>
 80006de:	bf00      	nop
 80006e0:	48000400 	.word	0x48000400
 80006e4:	200001b5 	.word	0x200001b5
 80006e8:	200001b4 	.word	0x200001b4
 80006ec:	200001b6 	.word	0x200001b6
 80006f0:	200001b8 	.word	0x200001b8
 80006f4:	20000078 	.word	0x20000078
 80006f8:	200001b0 	.word	0x200001b0
 80006fc:	200001b1 	.word	0x200001b1
 8000700:	200001b2 	.word	0x200001b2
 8000704:	200001b3 	.word	0x200001b3
 8000708:	08005b34 	.word	0x08005b34
 800070c:	20000128 	.word	0x20000128

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	; 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fde2 	bl	80052e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000736:	f002 fa4f 	bl	8002bd8 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 f9da 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800075e:	230a      	movs	r3, #10
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000762:	2307      	movs	r3, #7
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fa86 	bl	8002c84 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800077e:	f000 f9bb 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2104      	movs	r1, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fe86 	bl	80034ac <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007a6:	f000 f9a7 	bl	8000af8 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3758      	adds	r7, #88	; 0x58
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007cc:	4a3f      	ldr	r2, [pc, #252]	; (80008cc <MX_ADC1_Init+0x118>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007d8:	2210      	movs	r2, #16
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_ADC1_Init+0x114>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_ADC1_Init+0x114>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_ADC1_Init+0x114>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_ADC1_Init+0x114>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000814:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_ADC1_Init+0x114>)
 8000816:	2201      	movs	r2, #1
 8000818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_ADC1_Init+0x114>)
 800081e:	2200      	movs	r2, #0
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_ADC1_Init+0x114>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082a:	4827      	ldr	r0, [pc, #156]	; (80008c8 <MX_ADC1_Init+0x114>)
 800082c:	f000 fd86 	bl	800133c <HAL_ADC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000836:	f000 f95f 	bl	8000af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_ADC1_Init+0x11c>)
 800083c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083e:	2306      	movs	r3, #6
 8000840:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000846:	237f      	movs	r3, #127	; 0x7f
 8000848:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800084a:	2304      	movs	r3, #4
 800084c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 1;
 800084e:	2301      	movs	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	481c      	ldr	r0, [pc, #112]	; (80008c8 <MX_ADC1_Init+0x114>)
 8000858:	f000 ff4e 	bl	80016f8 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000862:	f000 f949 	bl	8000af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_ADC1_Init+0x120>)
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800086a:	230c      	movs	r3, #12
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_ADC1_Init+0x114>)
 8000878:	f000 ff3e 	bl	80016f8 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000882:	f000 f939 	bl	8000af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_ADC1_Init+0x124>)
 8000888:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800088a:	2312      	movs	r3, #18
 800088c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_ADC1_Init+0x114>)
 8000894:	f000 ff30 	bl	80016f8 <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800089e:	f000 f92b 	bl	8000af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_ADC1_Init+0x128>)
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008a6:	2318      	movs	r3, #24
 80008a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_ADC1_Init+0x114>)
 80008b0:	f000 ff22 	bl	80016f8 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80008ba:	f000 f91d 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000078 	.word	0x20000078
 80008cc:	50040000 	.word	0x50040000
 80008d0:	04300002 	.word	0x04300002
 80008d4:	08600004 	.word	0x08600004
 80008d8:	0c900008 	.word	0x0c900008
 80008dc:	10c00010 	.word	0x10c00010

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_USART2_UART_Init+0x5c>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000924:	f003 fb44 	bl	8003fb0 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f8e3 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000128 	.word	0x20000128
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_DMA_Init+0x38>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <MX_DMA_Init+0x38>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6493      	str	r3, [r2, #72]	; 0x48
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_DMA_Init+0x38>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200b      	movs	r0, #11
 8000964:	f001 fcb9 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000968:	200b      	movs	r0, #11
 800096a:	f001 fcd2 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a48      	ldr	r2, [pc, #288]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b46      	ldr	r3, [pc, #280]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a42      	ldr	r2, [pc, #264]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a3c      	ldr	r2, [pc, #240]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a36      	ldr	r2, [pc, #216]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <MX_GPIO_Init+0x13c>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	21b0      	movs	r1, #176	; 0xb0
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f002 f8ad 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Power_LED_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000a04:	482d      	ldr	r0, [pc, #180]	; (8000abc <MX_GPIO_Init+0x140>)
 8000a06:	f002 f8a7 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4827      	ldr	r0, [pc, #156]	; (8000ac0 <MX_GPIO_Init+0x144>)
 8000a22:	f001 ff07 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a26:	23b0      	movs	r3, #176	; 0xb0
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f001 fef8 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f001 feeb 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Power_LED_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Power_LED_Pin;
 8000a5e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_GPIO_Init+0x140>)
 8000a78:	f001 fedc 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sub_Up_Pin */
  GPIO_InitStruct.Pin = Sub_Up_Pin;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sub_Up_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f001 fece 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sub_Down_Pin Screenshot_Pin */
  GPIO_InitStruct.Pin = Sub_Down_Pin|Screenshot_Pin;
 8000a98:	23a0      	movs	r3, #160	; 0xa0
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0x140>)
 8000aac:	f001 fec2 	bl	8002834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	leftToggleUD = toggleData[0];
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000ad4:	701a      	strb	r2, [r3, #0]
	leftToggleLR = toggleData[1];
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000ade:	701a      	strb	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	200001b8 	.word	0x200001b8
 8000af0:	200001b0 	.word	0x200001b0
 8000af4:	200001b1 	.word	0x200001b1

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6613      	str	r3, [r2, #96]	; 0x60
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0a4      	sub	sp, #144	; 0x90
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2268      	movs	r2, #104	; 0x68
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fbbb 	bl	80052e8 <memset>
  if(hadc->Instance==ADC1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a3b      	ldr	r2, [pc, #236]	; (8000c64 <HAL_ADC_MspInit+0x118>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d16f      	bne.n	8000c5c <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b80:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b86:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b90:	2308      	movs	r3, #8
 8000b92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b94:	2307      	movs	r3, #7
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fea2 	bl	80038f4 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000bb6:	f7ff ff9f 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <HAL_ADC_MspInit+0x11c>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	; (8000c68 <HAL_ADC_MspInit+0x11c>)
 8000bc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_ADC_MspInit+0x11c>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_ADC_MspInit+0x11c>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <HAL_ADC_MspInit+0x11c>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <HAL_ADC_MspInit+0x11c>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Left_Toggle_UD_Pin|Left_Toggle_LR_Pin|Right_Toggle_UD_Pin|Right_Toggle_LR_Pin;
 8000bea:	230f      	movs	r3, #15
 8000bec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bee:	230b      	movs	r3, #11
 8000bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481a      	ldr	r0, [pc, #104]	; (8000c6c <HAL_ADC_MspInit+0x120>)
 8000c02:	f001 fe17 	bl	8002834 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_ADC_MspInit+0x128>)
 8000c0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c36:	2220      	movs	r2, #32
 8000c38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c42:	f001 fb81 	bl	8002348 <HAL_DMA_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000c4c:	f7ff ff54 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c54:	651a      	str	r2, [r3, #80]	; 0x50
 8000c56:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_ADC_MspInit+0x124>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3790      	adds	r7, #144	; 0x90
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	50040000 	.word	0x50040000
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	48000800 	.word	0x48000800
 8000c70:	200000e0 	.word	0x200000e0
 8000c74:	40020008 	.word	0x40020008

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0a4      	sub	sp, #144	; 0x90
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2268      	movs	r2, #104	; 0x68
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fb25 	bl	80052e8 <memset>
  if(huart->Instance==USART2)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a25      	ldr	r2, [pc, #148]	; (8000d38 <HAL_UART_MspInit+0xc0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d142      	bne.n	8000d2e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fe1d 	bl	80038f4 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f7ff ff1a 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_UART_MspInit+0xc4>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc8:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <HAL_UART_MspInit+0xc4>)
 8000cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cce:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_UART_MspInit+0xc4>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_UART_MspInit+0xc4>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <HAL_UART_MspInit+0xc4>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_UART_MspInit+0xc4>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f001 fd8b 	bl	8002834 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2026      	movs	r0, #38	; 0x26
 8000d24:	f001 fad9 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d28:	2026      	movs	r0, #38	; 0x26
 8000d2a:	f001 faf2 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3790      	adds	r7, #144	; 0x90
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40021000 	.word	0x40021000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f8dc 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <DMA1_Channel1_IRQHandler+0x10>)
 8000d9a:	f001 fc6c 	bl	8002676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000e0 	.word	0x200000e0

08000da8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <USART2_IRQHandler+0x10>)
 8000dae:	f003 f9d7 	bl	8004160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000128 	.word	0x20000128

08000dbc <_sbrk>:
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
 8000dec:	f004 fa94 	bl	8005318 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20028000 	.word	0x20028000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	200001c8 	.word	0x200001c8
 8000e24:	20000318 	.word	0x20000318

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <Reset_Handler>:
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopForever+0x2>
 8000e50:	f7ff ffea 	bl	8000e28 <SystemInit>
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopForever+0x6>)
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopForever+0xa>)
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopForever+0xe>)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:
 8000e5e:	58d4      	ldr	r4, [r2, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:
 8000e64:	18c4      	adds	r4, r0, r3
 8000e66:	428c      	cmp	r4, r1
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopForever+0x12>)
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopForever+0x16>)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:
 8000e76:	42a2      	cmp	r2, r4
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>
 8000e7a:	f004 fa53 	bl	8005324 <__libc_init_array>
 8000e7e:	f7ff fb7d 	bl	800057c <main>

08000e82 <LoopForever>:
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
 8000e84:	20028000 	.word	0x20028000
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	2000005c 	.word	0x2000005c
 8000e90:	08005bc4 	.word	0x08005bc4
 8000e94:	2000005c 	.word	0x2000005c
 8000e98:	20000318 	.word	0x20000318

08000e9c <ADC1_IRQHandler>:
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_IRQHandler>

08000e9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f001 fa0b 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f80e 	bl	8000ed0 <HAL_InitTick>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	e001      	b.n	8000ec4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec0:	f7ff fe20 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_InitTick+0x6c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d023      	beq.n	8000f2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_InitTick+0x70>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_InitTick+0x6c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fa17 	bl	800232e <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10f      	bne.n	8000f26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d809      	bhi.n	8000f20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f14:	f001 f9e1 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_InitTick+0x74>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e007      	b.n	8000f30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e004      	b.n	8000f30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	e001      	b.n	8000f30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200001cc 	.word	0x200001cc

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200001cc 	.word	0x200001cc

08000f88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3360      	adds	r3, #96	; 0x60
 8001002:	461a      	mov	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <LL_ADC_SetOffset+0x44>)
 8001012:	4013      	ands	r3, r2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	4313      	orrs	r3, r2
 8001020:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001028:	bf00      	nop
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	03fff000 	.word	0x03fff000

08001038 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3360      	adds	r3, #96	; 0x60
 8001046:	461a      	mov	r2, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3360      	adds	r3, #96	; 0x60
 8001074:	461a      	mov	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	431a      	orrs	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	615a      	str	r2, [r3, #20]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b087      	sub	sp, #28
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3330      	adds	r3, #48	; 0x30
 80010f6:	461a      	mov	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	4413      	add	r3, r2
 8001104:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	211f      	movs	r1, #31
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	401a      	ands	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0e9b      	lsrs	r3, r3, #26
 800111e:	f003 011f 	and.w	r1, r3, #31
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	431a      	orrs	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800113e:	b480      	push	{r7}
 8001140:	b087      	sub	sp, #28
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3314      	adds	r3, #20
 800114e:	461a      	mov	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	0e5b      	lsrs	r3, r3, #25
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	4413      	add	r3, r2
 800115c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	0d1b      	lsrs	r3, r3, #20
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	2107      	movs	r1, #7
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0d1b      	lsrs	r3, r3, #20
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0318 	and.w	r3, r3, #24
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011b8:	40d9      	lsrs	r1, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	400b      	ands	r3, r1
 80011be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011c2:	431a      	orrs	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	0007ffff 	.word	0x0007ffff

080011dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6093      	str	r3, [r2, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001214:	d101      	bne.n	800121a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800123c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001264:	d101      	bne.n	800126a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <LL_ADC_IsEnabled+0x18>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_ADC_IsEnabled+0x1a>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012da:	f043 0204 	orr.w	r2, r3, #4
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d101      	bne.n	8001306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b08      	cmp	r3, #8
 8001326:	d101      	bne.n	800132c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e129      	b.n	80015aa <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fbf1 	bl	8000b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff3f 	bl	8001200 <LL_ADC_IsDeepPowerDownEnabled>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff25 	bl	80011dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff5a 	bl	8001250 <LL_ADC_IsInternalRegulatorEnabled>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d115      	bne.n	80013ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff3e 	bl	8001228 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013ac:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <HAL_ADC_Init+0x278>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	4a81      	ldr	r2, [pc, #516]	; (80015b8 <HAL_ADC_Init+0x27c>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	3301      	adds	r3, #1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013c0:	e002      	b.n	80013c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f9      	bne.n	80013c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff3c 	bl	8001250 <LL_ADC_IsInternalRegulatorEnabled>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10d      	bne.n	80013fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f043 0210 	orr.w	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff75 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 8001404:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 80c2 	bne.w	8001598 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 80be 	bne.w	8001598 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff35 	bl	80012a0 <LL_ADC_IsEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10b      	bne.n	8001454 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800143c:	485f      	ldr	r0, [pc, #380]	; (80015bc <HAL_ADC_Init+0x280>)
 800143e:	f7ff ff2f 	bl	80012a0 <LL_ADC_IsEnabled>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d105      	bne.n	8001454 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4619      	mov	r1, r3
 800144e:	485c      	ldr	r0, [pc, #368]	; (80015c0 <HAL_ADC_Init+0x284>)
 8001450:	f7ff fd9a 	bl	8000f88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7e5b      	ldrb	r3, [r3, #25]
 8001458:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001464:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800146a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001472:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d106      	bne.n	8001490 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	3b01      	subs	r3, #1
 8001488:	045b      	lsls	r3, r3, #17
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <HAL_ADC_Init+0x288>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	430b      	orrs	r3, r1
 80014be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff25 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 80014ca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d140      	bne.n	8001554 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d13d      	bne.n	8001554 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7e1b      	ldrb	r3, [r3, #24]
 80014e0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014fa:	f023 0306 	bic.w	r3, r3, #6
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	430b      	orrs	r3, r1
 8001506:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800150e:	2b01      	cmp	r3, #1
 8001510:	d118      	bne.n	8001544 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800152e:	4311      	orrs	r1, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001534:	430a      	orrs	r2, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	e007      	b.n	8001554 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10c      	bne.n	8001576 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f023 010f 	bic.w	r1, r3, #15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
 8001574:	e007      	b.n	8001586 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 020f 	bic.w	r2, r2, #15
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	f023 0303 	bic.w	r3, r3, #3
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	659a      	str	r2, [r3, #88]	; 0x58
 8001596:	e007      	b.n	80015a8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	f043 0210 	orr.w	r2, r3, #16
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000
 80015b8:	053e2d63 	.word	0x053e2d63
 80015bc:	50040000 	.word	0x50040000
 80015c0:	50040300 	.word	0x50040300
 80015c4:	fff0c007 	.word	0xfff0c007

080015c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fe88 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d167      	bne.n	80016b4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Start_DMA+0x2a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e063      	b.n	80016ba <HAL_ADC_Start_DMA+0xf2>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fc78 	bl	8001ef0 <ADC_Enable>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d14f      	bne.n	80016aa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	f023 0206 	bic.w	r2, r3, #6
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	65da      	str	r2, [r3, #92]	; 0x5c
 8001636:	e002      	b.n	800163e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001642:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <HAL_ADC_Start_DMA+0xfc>)
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800164a:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <HAL_ADC_Start_DMA+0x100>)
 800164c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_ADC_Start_DMA+0x104>)
 8001654:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	221c      	movs	r2, #28
 800165c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0210 	orr.w	r2, r2, #16
 8001674:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3340      	adds	r3, #64	; 0x40
 8001690:	4619      	mov	r1, r3
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f000 ff0f 	bl	80024b8 <HAL_DMA_Start_IT>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fe0f 	bl	80012c6 <LL_ADC_REG_StartConversion>
 80016a8:	e006      	b.n	80016b8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80016b2:	e001      	b.n	80016b8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016b4:	2302      	movs	r3, #2
 80016b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08001ffd 	.word	0x08001ffd
 80016c8:	080020d5 	.word	0x080020d5
 80016cc:	080020f1 	.word	0x080020f1

080016d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0b6      	sub	sp, #216	; 0xd8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_ADC_ConfigChannel+0x22>
 8001716:	2302      	movs	r3, #2
 8001718:	e3d5      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x7ce>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fde1 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 83ba 	bne.w	8001ea8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b05      	cmp	r3, #5
 8001742:	d824      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	3b02      	subs	r3, #2
 800174a:	2b03      	cmp	r3, #3
 800174c:	d81b      	bhi.n	8001786 <HAL_ADC_ConfigChannel+0x8e>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <HAL_ADC_ConfigChannel+0x5c>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	08001765 	.word	0x08001765
 8001758:	0800176d 	.word	0x0800176d
 800175c:	08001775 	.word	0x08001775
 8001760:	0800177d 	.word	0x0800177d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001764:	230c      	movs	r3, #12
 8001766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800176a:	e010      	b.n	800178e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800176c:	2312      	movs	r3, #18
 800176e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001772:	e00c      	b.n	800178e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001774:	2318      	movs	r3, #24
 8001776:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800177a:	e008      	b.n	800178e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800177c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001784:	e003      	b.n	800178e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001786:	2306      	movs	r3, #6
 8001788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800178c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800179c:	f7ff fca3 	bl	80010e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fda2 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 80017aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fdae 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 80017b8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 81bf 	bne.w	8001b44 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 81ba 	bne.w	8001b44 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017d8:	d10f      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff fcaa 	bl	800113e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fc51 	bl	800109a <LL_ADC_SetSamplingTimeCommonConfig>
 80017f8:	e00e      	b.n	8001818 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6819      	ldr	r1, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	461a      	mov	r2, r3
 8001808:	f7ff fc99 	bl	800113e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fc41 	bl	800109a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b04      	cmp	r3, #4
 8001838:	d00a      	beq.n	8001850 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6919      	ldr	r1, [r3, #16]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800184a:	f7ff fbd1 	bl	8000ff0 <LL_ADC_SetOffset>
 800184e:	e179      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fbee 	bl	8001038 <LL_ADC_GetOffsetChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <HAL_ADC_ConfigChannel+0x184>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fbe3 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	0e9b      	lsrs	r3, r3, #26
 8001876:	f003 021f 	and.w	r2, r3, #31
 800187a:	e01e      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1c2>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fbd8 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800189a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800189e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80018aa:	2320      	movs	r3, #32
 80018ac:	e004      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80018ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x1da>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	0e9b      	lsrs	r3, r3, #26
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	e018      	b.n	8001904 <HAL_ADC_ConfigChannel+0x20c>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80018e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80018ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80018f6:	2320      	movs	r3, #32
 80018f8:	e004      	b.n	8001904 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80018fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001904:	429a      	cmp	r2, r3
 8001906:	d106      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fba7 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2101      	movs	r1, #1
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb8b 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x24a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb80 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	0e9b      	lsrs	r3, r3, #26
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	e01e      	b.n	8001980 <HAL_ADC_ConfigChannel+0x288>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2101      	movs	r1, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fb75 	bl	8001038 <LL_ADC_GetOffsetChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001970:	2320      	movs	r3, #32
 8001972:	e004      	b.n	800197e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001974:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x2a0>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0e9b      	lsrs	r3, r3, #26
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	e018      	b.n	80019ca <HAL_ADC_ConfigChannel+0x2d2>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80019ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80019b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80019bc:	2320      	movs	r3, #32
 80019be:	e004      	b.n	80019ca <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80019c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d106      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	2101      	movs	r1, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb44 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2102      	movs	r1, #2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fb28 	bl	8001038 <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x310>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2102      	movs	r1, #2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb1d 	bl	8001038 <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 021f 	and.w	r2, r3, #31
 8001a06:	e01e      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x34e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fb12 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001a36:	2320      	movs	r3, #32
 8001a38:	e004      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x366>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	e014      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x390>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001a72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001a7a:	2320      	movs	r3, #32
 8001a7c:	e004      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d106      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	2102      	movs	r1, #2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fae5 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fac9 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10a      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x3ce>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fabe 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	e017      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x3fe>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2103      	movs	r1, #3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fab3 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae0:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001ae8:	2320      	movs	r3, #32
 8001aea:	e003      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x416>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	e011      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x43a>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b1e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001b26:	2320      	movs	r3, #32
 8001b28:	e003      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d106      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2103      	movs	r1, #3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fa90 	bl	8001064 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fba9 	bl	80012a0 <LL_ADC_IsEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f040 813f 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f7ff fb16 	bl	8001194 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a8e      	ldr	r2, [pc, #568]	; (8001da8 <HAL_ADC_ConfigChannel+0x6b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	f040 8130 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10b      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x4a4>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	bf94      	ite	ls
 8001b94:	2301      	movls	r3, #1
 8001b96:	2300      	movhi	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e019      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x4d8>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	e003      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2b09      	cmp	r3, #9
 8001bc8:	bf94      	ite	ls
 8001bca:	2301      	movls	r3, #1
 8001bcc:	2300      	movhi	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d079      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d107      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x4f8>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0e9b      	lsrs	r3, r3, #26
 8001be6:	3301      	adds	r3, #1
 8001be8:	069b      	lsls	r3, r3, #26
 8001bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bee:	e015      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x524>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c00:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	e003      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	069b      	lsls	r3, r3, #26
 8001c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x544>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	e017      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x574>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001c54:	2320      	movs	r3, #32
 8001c56:	e003      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	ea42 0103 	orr.w	r1, r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10a      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x59a>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	3301      	adds	r3, #1
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	051b      	lsls	r3, r3, #20
 8001c90:	e018      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x5cc>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001caa:	2320      	movs	r3, #32
 8001cac:	e003      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	e080      	b.n	8001dca <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d107      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x5ec>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	3301      	adds	r3, #1
 8001cdc:	069b      	lsls	r3, r3, #26
 8001cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce2:	e015      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x618>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e003      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	069b      	lsls	r3, r3, #26
 8001d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x638>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0e9b      	lsrs	r3, r3, #26
 8001d22:	3301      	adds	r3, #1
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	e017      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x668>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e003      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	ea42 0103 	orr.w	r1, r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10d      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x694>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	3301      	adds	r3, #1
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	3b1e      	subs	r3, #30
 8001d84:	051b      	lsls	r3, r3, #20
 8001d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	e01d      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x6d0>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	60fb      	str	r3, [r7, #12]
  return result;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d103      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e005      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x6bc>
 8001da8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	f003 021f 	and.w	r2, r3, #31
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b1e      	subs	r3, #30
 8001dc2:	051b      	lsls	r3, r3, #20
 8001dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f7ff f9b5 	bl	800113e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d06c      	beq.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de0:	483c      	ldr	r0, [pc, #240]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001de2:	f7ff f8f7 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 8001de6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a3a      	ldr	r2, [pc, #232]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7e0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d127      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d121      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a35      	ldr	r2, [pc, #212]	; (8001edc <HAL_ADC_ConfigChannel+0x7e4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d157      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e12:	4619      	mov	r1, r3
 8001e14:	482f      	ldr	r0, [pc, #188]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e16:	f7ff f8ca 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7e8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	099b      	lsrs	r3, r3, #6
 8001e20:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	099b      	lsrs	r3, r3, #6
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e42:	e03a      	b.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7f0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d113      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_ADC_ConfigChannel+0x7e4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d12a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4819      	ldr	r0, [pc, #100]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e70:	f7ff f89d 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e74:	e021      	b.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <HAL_ADC_ConfigChannel+0x7f4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d11c      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d116      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <HAL_ADC_ConfigChannel+0x7e4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d111      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ea2:	f7ff f884 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
 8001ea6:	e008      	b.n	8001eba <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ec2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	37d8      	adds	r7, #216	; 0xd8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	80080000 	.word	0x80080000
 8001ed4:	50040300 	.word	0x50040300
 8001ed8:	c7520000 	.word	0xc7520000
 8001edc:	50040000 	.word	0x50040000
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	053e2d63 	.word	0x053e2d63
 8001ee8:	cb840000 	.word	0xcb840000
 8001eec:	80000001 	.word	0x80000001

08001ef0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff f9cd 	bl	80012a0 <LL_ADC_IsEnabled>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d169      	bne.n	8001fe0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <ADC_Enable+0xfc>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00d      	beq.n	8001f36 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	f043 0210 	orr.w	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e055      	b.n	8001fe2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f99c 	bl	8001278 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f40:	482b      	ldr	r0, [pc, #172]	; (8001ff0 <ADC_Enable+0x100>)
 8001f42:	f7ff f847 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 8001f46:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <ADC_Enable+0x104>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <ADC_Enable+0x108>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f6a:	e002      	b.n	8001f72 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fffa 	bl	8000f70 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7e:	e028      	b.n	8001fd2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f98b 	bl	80012a0 <LL_ADC_IsEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d104      	bne.n	8001f9a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f96f 	bl	8001278 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9a:	f7fe ffe9 	bl	8000f70 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d914      	bls.n	8001fd2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d00d      	beq.n	8001fd2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e007      	b.n	8001fe2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d1cf      	bne.n	8001f80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	8000003f 	.word	0x8000003f
 8001ff0:	50040300 	.word	0x50040300
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	053e2d63 	.word	0x053e2d63

08001ffc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002012:	2b00      	cmp	r3, #0
 8002014:	d14b      	bne.n	80020ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d021      	beq.n	8002074 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f843 	bl	80010c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d032      	beq.n	80020a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d12b      	bne.n	80020a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11f      	bne.n	80020a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	659a      	str	r2, [r3, #88]	; 0x58
 8002072:	e018      	b.n	80020a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d111      	bne.n	80020a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff fb12 	bl	80016d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020ac:	e00e      	b.n	80020cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff fb12 	bl	80016e4 <HAL_ADC_ErrorCallback>
}
 80020c0:	e004      	b.n	80020cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7fe fcee 	bl	8000ac4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	f043 0204 	orr.w	r2, r3, #4
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7ff fae4 	bl	80016e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e098      	b.n	800248c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_DMA_Init+0x150>)
 8002362:	429a      	cmp	r2, r3
 8002364:	d80f      	bhi.n	8002386 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_DMA_Init+0x154>)
 800236e:	4413      	add	r3, r2
 8002370:	4a4b      	ldr	r2, [pc, #300]	; (80024a0 <HAL_DMA_Init+0x158>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	009a      	lsls	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a48      	ldr	r2, [pc, #288]	; (80024a4 <HAL_DMA_Init+0x15c>)
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
 8002384:	e00e      	b.n	80023a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <HAL_DMA_Init+0x160>)
 800238e:	4413      	add	r3, r2
 8002390:	4a43      	ldr	r2, [pc, #268]	; (80024a0 <HAL_DMA_Init+0x158>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a42      	ldr	r2, [pc, #264]	; (80024ac <HAL_DMA_Init+0x164>)
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023fe:	d039      	beq.n	8002474 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_DMA_Init+0x15c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11a      	bne.n	8002440 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_DMA_Init+0x168>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f003 031c 	and.w	r3, r3, #28
 8002416:	210f      	movs	r1, #15
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <HAL_DMA_Init+0x168>)
 8002420:	4013      	ands	r3, r2
 8002422:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_DMA_Init+0x168>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f003 031c 	and.w	r3, r3, #28
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	491d      	ldr	r1, [pc, #116]	; (80024b0 <HAL_DMA_Init+0x168>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
 800243e:	e019      	b.n	8002474 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	f003 031c 	and.w	r3, r3, #28
 800244c:	210f      	movs	r1, #15
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	4917      	ldr	r1, [pc, #92]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002456:	4013      	ands	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_DMA_Init+0x16c>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f003 031c 	and.w	r3, r3, #28
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	4911      	ldr	r1, [pc, #68]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40020407 	.word	0x40020407
 800249c:	bffdfff8 	.word	0xbffdfff8
 80024a0:	cccccccd 	.word	0xcccccccd
 80024a4:	40020000 	.word	0x40020000
 80024a8:	bffdfbf8 	.word	0xbffdfbf8
 80024ac:	40020400 	.word	0x40020400
 80024b0:	400200a8 	.word	0x400200a8
 80024b4:	400204a8 	.word	0x400204a8

080024b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_DMA_Start_IT+0x20>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e04b      	b.n	8002570 <HAL_DMA_Start_IT+0xb8>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d13a      	bne.n	8002562 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f95f 	bl	80027d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 020e 	orr.w	r2, r2, #14
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e00f      	b.n	8002550 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0204 	bic.w	r2, r2, #4
 800253e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 020a 	orr.w	r2, r2, #10
 800254e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e005      	b.n	800256e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800256a:	2302      	movs	r3, #2
 800256c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2204      	movs	r2, #4
 8002594:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e022      	b.n	80025e8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 020e 	bic.w	r2, r2, #14
 80025b0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f003 021c 	and.w	r2, r3, #28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d005      	beq.n	8002618 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2204      	movs	r2, #4
 8002610:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e029      	b.n	800266c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 020e 	bic.w	r2, r2, #14
 8002626:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f003 021c 	and.w	r2, r3, #28
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f202 	lsl.w	r2, r1, r2
 800264a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
    }
  }
  return status;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f003 031c 	and.w	r3, r3, #28
 8002696:	2204      	movs	r2, #4
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d026      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x7a>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d021      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d107      	bne.n	80026ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0204 	bic.w	r2, r2, #4
 80026c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 021c 	and.w	r2, r3, #28
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2104      	movs	r1, #4
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d071      	beq.n	80027ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026ee:	e06c      	b.n	80027ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f003 031c 	and.w	r3, r3, #28
 80026f8:	2202      	movs	r2, #2
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02e      	beq.n	8002762 <HAL_DMA_IRQHandler+0xec>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d029      	beq.n	8002762 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 020a 	bic.w	r2, r2, #10
 800272a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f003 021c 	and.w	r2, r3, #28
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2102      	movs	r1, #2
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d038      	beq.n	80027ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002760:	e033      	b.n	80027ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f003 031c 	and.w	r3, r3, #28
 800276a:	2208      	movs	r2, #8
 800276c:	409a      	lsls	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d02a      	beq.n	80027cc <HAL_DMA_IRQHandler+0x156>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d025      	beq.n	80027cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 020e 	bic.w	r2, r2, #14
 800278e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f003 021c 	and.w	r2, r3, #28
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
}
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f003 021c 	and.w	r2, r3, #28
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b10      	cmp	r3, #16
 8002804:	d108      	bne.n	8002818 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002816:	e007      	b.n	8002828 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002842:	e154      	b.n	8002aee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8146 	beq.w	8002ae8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d005      	beq.n	8002874 <HAL_GPIO_Init+0x40>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d130      	bne.n	80028d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028aa:	2201      	movs	r2, #1
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 0201 	and.w	r2, r3, #1
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d017      	beq.n	8002912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2203      	movs	r2, #3
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d123      	bne.n	8002966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	08da      	lsrs	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3208      	adds	r2, #8
 8002926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	6939      	ldr	r1, [r7, #16]
 8002962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2203      	movs	r2, #3
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0203 	and.w	r2, r3, #3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80a0 	beq.w	8002ae8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a8:	4b58      	ldr	r3, [pc, #352]	; (8002b0c <HAL_GPIO_Init+0x2d8>)
 80029aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ac:	4a57      	ldr	r2, [pc, #348]	; (8002b0c <HAL_GPIO_Init+0x2d8>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6613      	str	r3, [r2, #96]	; 0x60
 80029b4:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <HAL_GPIO_Init+0x2d8>)
 80029b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029c0:	4a53      	ldr	r2, [pc, #332]	; (8002b10 <HAL_GPIO_Init+0x2dc>)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	3302      	adds	r3, #2
 80029c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	220f      	movs	r2, #15
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ea:	d019      	beq.n	8002a20 <HAL_GPIO_Init+0x1ec>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_GPIO_Init+0x2e0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <HAL_GPIO_Init+0x1e8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_GPIO_Init+0x2e4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00d      	beq.n	8002a18 <HAL_GPIO_Init+0x1e4>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a47      	ldr	r2, [pc, #284]	; (8002b1c <HAL_GPIO_Init+0x2e8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <HAL_GPIO_Init+0x1e0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <HAL_GPIO_Init+0x2ec>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_GPIO_Init+0x1dc>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e008      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a10:	2307      	movs	r3, #7
 8002a12:	e006      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a14:	2303      	movs	r3, #3
 8002a16:	e004      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e002      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a20:	2300      	movs	r3, #0
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	f002 0203 	and.w	r2, r2, #3
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a32:	4937      	ldr	r1, [pc, #220]	; (8002b10 <HAL_GPIO_Init+0x2dc>)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a40:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a64:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a94:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_GPIO_Init+0x2f0>)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f aea3 	bne.w	8002844 <HAL_GPIO_Init+0x10>
  }
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010000 	.word	0x40010000
 8002b14:	48000400 	.word	0x48000400
 8002b18:	48000800 	.word	0x48000800
 8002b1c:	48000c00 	.word	0x48000c00
 8002b20:	48001000 	.word	0x48001000
 8002b24:	40010400 	.word	0x40010400

08002b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e001      	b.n	8002b4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b74:	e002      	b.n	8002b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	041a      	lsls	r2, r3, #16
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43d9      	mvns	r1, r3
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	400b      	ands	r3, r1
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40007000 	.word	0x40007000

08002bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be6:	d130      	bne.n	8002c4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf4:	d038      	beq.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2232      	movs	r2, #50	; 0x32
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0c9b      	lsrs	r3, r3, #18
 8002c18:	3301      	adds	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1c:	e002      	b.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c30:	d102      	bne.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f2      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c44:	d110      	bne.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e00f      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c56:	d007      	beq.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c60:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	431bde83 	.word	0x431bde83

08002c84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f000 bc02 	b.w	800349c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c98:	4b96      	ldr	r3, [pc, #600]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca2:	4b94      	ldr	r3, [pc, #592]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80e4 	beq.w	8002e82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4c>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	f040 808b 	bne.w	8002dde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 8087 	bne.w	8002dde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cd0:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x64>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e3d9      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	4b81      	ldr	r3, [pc, #516]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <HAL_RCC_OscConfig+0x7e>
 8002cf8:	4b7e      	ldr	r3, [pc, #504]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d00:	e005      	b.n	8002d0e <HAL_RCC_OscConfig+0x8a>
 8002d02:	4b7c      	ldr	r3, [pc, #496]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d223      	bcs.n	8002d5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd8c 	bl	8003834 <RCC_SetFlashLatencyFromMSIRange>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e3ba      	b.n	800349c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d26:	4b73      	ldr	r3, [pc, #460]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a72      	ldr	r2, [pc, #456]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b70      	ldr	r3, [pc, #448]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	496d      	ldr	r1, [pc, #436]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d44:	4b6b      	ldr	r3, [pc, #428]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	4968      	ldr	r1, [pc, #416]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e025      	b.n	8002da6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5a:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a65      	ldr	r2, [pc, #404]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4960      	ldr	r1, [pc, #384]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d78:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	495b      	ldr	r1, [pc, #364]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fd4c 	bl	8003834 <RCC_SetFlashLatencyFromMSIRange>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e37a      	b.n	800349c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da6:	f000 fc81 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b51      	ldr	r3, [pc, #324]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4950      	ldr	r1, [pc, #320]	; (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a4e      	ldr	r2, [pc, #312]	; (8002efc <HAL_RCC_OscConfig+0x278>)
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dc6:	4b4e      	ldr	r3, [pc, #312]	; (8002f00 <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe f880 	bl	8000ed0 <HAL_InitTick>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d052      	beq.n	8002e80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	e35e      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d032      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002de6:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a42      	ldr	r2, [pc, #264]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002df2:	f7fe f8bd 	bl	8000f70 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dfa:	f7fe f8b9 	bl	8000f70 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e347      	b.n	800349c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e0c:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a35      	ldr	r2, [pc, #212]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	f043 0308 	orr.w	r3, r3, #8
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4930      	ldr	r1, [pc, #192]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e36:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	492b      	ldr	r1, [pc, #172]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
 8002e4a:	e01a      	b.n	8002e82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e4c:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e58:	f7fe f88a 	bl	8000f70 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e60:	f7fe f886 	bl	8000f70 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e314      	b.n	800349c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1dc>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d073      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x21c>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d10e      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d063      	beq.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d15f      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e2f1      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x24c>
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e025      	b.n	8002f1c <HAL_RCC_OscConfig+0x298>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d114      	bne.n	8002f04 <HAL_RCC_OscConfig+0x280>
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a02      	ldr	r2, [pc, #8]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e013      	b.n	8002f1c <HAL_RCC_OscConfig+0x298>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	08005b38 	.word	0x08005b38
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004
 8002f04:	4ba0      	ldr	r3, [pc, #640]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a9f      	ldr	r2, [pc, #636]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b9d      	ldr	r3, [pc, #628]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a9c      	ldr	r2, [pc, #624]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe f824 	bl	8000f70 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe f820 	bl	8000f70 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e2ae      	b.n	800349c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3e:	4b92      	ldr	r3, [pc, #584]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x2a8>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f810 	bl	8000f70 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe f80c 	bl	8000f70 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e29a      	b.n	800349c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f66:	4b88      	ldr	r3, [pc, #544]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2d0>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d060      	beq.n	8003044 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_OscConfig+0x310>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d119      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d116      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f94:	4b7c      	ldr	r3, [pc, #496]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_OscConfig+0x328>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e277      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b76      	ldr	r3, [pc, #472]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	4973      	ldr	r1, [pc, #460]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc0:	e040      	b.n	8003044 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d023      	beq.n	8003012 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fca:	4b6f      	ldr	r3, [pc, #444]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6e      	ldr	r2, [pc, #440]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fd ffcb 	bl	8000f70 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fd ffc7 	bl	8000f70 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e255      	b.n	800349c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff0:	4b65      	ldr	r3, [pc, #404]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b62      	ldr	r3, [pc, #392]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	495f      	ldr	r1, [pc, #380]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
 8003010:	e018      	b.n	8003044 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003012:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5c      	ldr	r2, [pc, #368]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8003018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fd ffa7 	bl	8000f70 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003026:	f7fd ffa3 	bl	8000f70 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e231      	b.n	800349c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d03c      	beq.n	80030ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01c      	beq.n	8003092 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003058:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305e:	4a4a      	ldr	r2, [pc, #296]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003068:	f7fd ff82 	bl	8000f70 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7fd ff7e 	bl	8000f70 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e20c      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003082:	4b41      	ldr	r3, [pc, #260]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0ef      	beq.n	8003070 <HAL_RCC_OscConfig+0x3ec>
 8003090:	e01b      	b.n	80030ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003092:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8003094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003098:	4a3b      	ldr	r2, [pc, #236]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fd ff65 	bl	8000f70 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fd ff61 	bl	8000f70 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1ef      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030bc:	4b32      	ldr	r3, [pc, #200]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1ef      	bne.n	80030aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80a6 	beq.w	8003224 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030dc:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10d      	bne.n	8003104 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e8:	4b27      	ldr	r3, [pc, #156]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	4a26      	ldr	r2, [pc, #152]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6593      	str	r3, [r2, #88]	; 0x58
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003100:	2301      	movs	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCC_OscConfig+0x508>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d118      	bne.n	8003142 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <HAL_RCC_OscConfig+0x508>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_RCC_OscConfig+0x508>)
 8003116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311c:	f7fd ff28 	bl	8000f70 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003124:	f7fd ff24 	bl	8000f70 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e1b2      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_RCC_OscConfig+0x508>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_RCC_OscConfig+0x4d8>
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800315a:	e029      	b.n	80031b0 <HAL_RCC_OscConfig+0x52c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d115      	bne.n	8003190 <HAL_RCC_OscConfig+0x50c>
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	4a07      	ldr	r2, [pc, #28]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	4a03      	ldr	r2, [pc, #12]	; (8003188 <HAL_RCC_OscConfig+0x504>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003184:	e014      	b.n	80031b0 <HAL_RCC_OscConfig+0x52c>
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	40007000 	.word	0x40007000
 8003190:	4b9a      	ldr	r3, [pc, #616]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a99      	ldr	r2, [pc, #612]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	4a95      	ldr	r2, [pc, #596]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80031a8:	f023 0304 	bic.w	r3, r3, #4
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d016      	beq.n	80031e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fd feda 	bl	8000f70 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fd fed6 	bl	8000f70 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e162      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d6:	4b89      	ldr	r3, [pc, #548]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ed      	beq.n	80031c0 <HAL_RCC_OscConfig+0x53c>
 80031e4:	e015      	b.n	8003212 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fec3 	bl	8000f70 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd febf 	bl	8000f70 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e14b      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003204:	4b7d      	ldr	r3, [pc, #500]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1ed      	bne.n	80031ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003212:	7ffb      	ldrb	r3, [r7, #31]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003218:	4b78      	ldr	r3, [pc, #480]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a77      	ldr	r2, [pc, #476]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 800321e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d03c      	beq.n	80032aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01c      	beq.n	8003272 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003238:	4b70      	ldr	r3, [pc, #448]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 800323a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800323e:	4a6f      	ldr	r2, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fd fe92 	bl	8000f70 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003250:	f7fd fe8e 	bl	8000f70 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e11c      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003262:	4b66      	ldr	r3, [pc, #408]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ef      	beq.n	8003250 <HAL_RCC_OscConfig+0x5cc>
 8003270:	e01b      	b.n	80032aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003272:	4b62      	ldr	r3, [pc, #392]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003278:	4a60      	ldr	r2, [pc, #384]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fd fe75 	bl	8000f70 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328a:	f7fd fe71 	bl	8000f70 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0ff      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800329c:	4b57      	ldr	r3, [pc, #348]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 800329e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ef      	bne.n	800328a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80f3 	beq.w	800349a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	f040 80c9 	bne.w	8003450 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032be:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0203 	and.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d12c      	bne.n	800332c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	3b01      	subs	r3, #1
 80032de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d123      	bne.n	800332c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d11b      	bne.n	800332c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d113      	bne.n	800332c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	3b01      	subs	r3, #1
 8003312:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d109      	bne.n	800332c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	3b01      	subs	r3, #1
 8003326:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d06b      	beq.n	8003404 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d062      	beq.n	80033f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003332:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0ac      	b.n	800349c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2d      	ldr	r2, [pc, #180]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800334e:	f7fd fe0f 	bl	8000f70 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fd fe0b 	bl	8000f70 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e099      	b.n	800349c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003368:	4b24      	ldr	r3, [pc, #144]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003374:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <HAL_RCC_OscConfig+0x77c>)
 800337a:	4013      	ands	r3, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003384:	3a01      	subs	r2, #1
 8003386:	0112      	lsls	r2, r2, #4
 8003388:	4311      	orrs	r1, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800338e:	0212      	lsls	r2, r2, #8
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003396:	0852      	lsrs	r2, r2, #1
 8003398:	3a01      	subs	r2, #1
 800339a:	0552      	lsls	r2, r2, #21
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033a2:	0852      	lsrs	r2, r2, #1
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0652      	lsls	r2, r2, #25
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ae:	06d2      	lsls	r2, r2, #27
 80033b0:	430a      	orrs	r2, r1
 80033b2:	4912      	ldr	r1, [pc, #72]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033d0:	f7fd fdce 	bl	8000f70 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fdca 	bl	8000f70 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e058      	b.n	800349c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <HAL_RCC_OscConfig+0x778>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f6:	e050      	b.n	800349a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e04f      	b.n	800349c <HAL_RCC_OscConfig+0x818>
 80033fc:	40021000 	.word	0x40021000
 8003400:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003404:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d144      	bne.n	800349a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a23      	ldr	r2, [pc, #140]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 8003416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a20      	ldr	r2, [pc, #128]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003428:	f7fd fda2 	bl	8000f70 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fd fd9e 	bl	8000f70 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e02c      	b.n	800349c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x7ac>
 800344e:	e024      	b.n	800349a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d01f      	beq.n	8003496 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 800345c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fd fd85 	bl	8000f70 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fd fd81 	bl	8000f70 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e00f      	b.n	800349c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4905      	ldr	r1, [pc, #20]	; (80034a4 <HAL_RCC_OscConfig+0x820>)
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_OscConfig+0x824>)
 8003490:	4013      	ands	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
 8003494:	e001      	b.n	800349a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	feeefffc 	.word	0xfeeefffc

080034ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0e7      	b.n	8003690 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c0:	4b75      	ldr	r3, [pc, #468]	; (8003698 <HAL_RCC_ClockConfig+0x1ec>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d910      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b72      	ldr	r3, [pc, #456]	; (8003698 <HAL_RCC_ClockConfig+0x1ec>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 0207 	bic.w	r2, r3, #7
 80034d6:	4970      	ldr	r1, [pc, #448]	; (8003698 <HAL_RCC_ClockConfig+0x1ec>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b6e      	ldr	r3, [pc, #440]	; (8003698 <HAL_RCC_ClockConfig+0x1ec>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0cf      	b.n	8003690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003508:	429a      	cmp	r2, r3
 800350a:	d908      	bls.n	800351e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4960      	ldr	r1, [pc, #384]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d04c      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003532:	4b5a      	ldr	r3, [pc, #360]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d121      	bne.n	8003582 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0a6      	b.n	8003690 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354a:	4b54      	ldr	r3, [pc, #336]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d115      	bne.n	8003582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e09a      	b.n	8003690 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003562:	4b4e      	ldr	r3, [pc, #312]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e08e      	b.n	8003690 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003572:	4b4a      	ldr	r3, [pc, #296]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e086      	b.n	8003690 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b46      	ldr	r3, [pc, #280]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4943      	ldr	r1, [pc, #268]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003594:	f7fd fcec 	bl	8000f70 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fd fce8 	bl	8000f70 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e06e      	b.n	8003690 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b3a      	ldr	r3, [pc, #232]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d010      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035dc:	429a      	cmp	r2, r3
 80035de:	d208      	bcs.n	80035f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e0:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	492b      	ldr	r1, [pc, #172]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_RCC_ClockConfig+0x1ec>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d210      	bcs.n	8003622 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003600:	4b25      	ldr	r3, [pc, #148]	; (8003698 <HAL_RCC_ClockConfig+0x1ec>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 0207 	bic.w	r2, r3, #7
 8003608:	4923      	ldr	r1, [pc, #140]	; (8003698 <HAL_RCC_ClockConfig+0x1ec>)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_RCC_ClockConfig+0x1ec>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e036      	b.n	8003690 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	4918      	ldr	r1, [pc, #96]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4910      	ldr	r1, [pc, #64]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003660:	f000 f824 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	490b      	ldr	r1, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x1f4>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 800367e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1fc>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fd fc23 	bl	8000ed0 <HAL_InitTick>
 800368a:	4603      	mov	r3, r0
 800368c:	72fb      	strb	r3, [r7, #11]

  return status;
 800368e:	7afb      	ldrb	r3, [r7, #11]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40022000 	.word	0x40022000
 800369c:	40021000 	.word	0x40021000
 80036a0:	08005b38 	.word	0x08005b38
 80036a4:	20000000 	.word	0x20000000
 80036a8:	20000004 	.word	0x20000004

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	; 0x24
 80036b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x34>
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d121      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d11e      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036e0:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d107      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036ec:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e005      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036fc:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003708:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003710:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10d      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d102      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	e004      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d101      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003732:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d134      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0xa6>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d003      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0xac>
 8003750:	e005      	b.n	800375e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003754:	617b      	str	r3, [r7, #20]
      break;
 8003756:	e005      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800375a:	617b      	str	r3, [r7, #20]
      break;
 800375c:	e002      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	617b      	str	r3, [r7, #20]
      break;
 8003762:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	3301      	adds	r3, #1
 8003770:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	fb03 f202 	mul.w	r2, r3, r2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	0e5b      	lsrs	r3, r3, #25
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	3301      	adds	r3, #1
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037a4:	69bb      	ldr	r3, [r7, #24]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08005b50 	.word	0x08005b50
 80037bc:	00f42400 	.word	0x00f42400
 80037c0:	007a1200 	.word	0x007a1200

080037c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000000 	.word	0x20000000

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037e0:	f7ff fff0 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4904      	ldr	r1, [pc, #16]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	08005b48 	.word	0x08005b48

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800380c:	f7ff ffda 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0adb      	lsrs	r3, r3, #11
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4904      	ldr	r1, [pc, #16]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	08005b48 	.word	0x08005b48

08003834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003840:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800384c:	f7ff f9b6 	bl	8002bbc <HAL_PWREx_GetVoltageRange>
 8003850:	6178      	str	r0, [r7, #20]
 8003852:	e014      	b.n	800387e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	4a24      	ldr	r2, [pc, #144]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	6593      	str	r3, [r2, #88]	; 0x58
 8003860:	4b22      	ldr	r3, [pc, #136]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800386c:	f7ff f9a6 	bl	8002bbc <HAL_PWREx_GetVoltageRange>
 8003870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003884:	d10b      	bne.n	800389e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b80      	cmp	r3, #128	; 0x80
 800388a:	d919      	bls.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2ba0      	cmp	r3, #160	; 0xa0
 8003890:	d902      	bls.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003892:	2302      	movs	r3, #2
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	e013      	b.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003898:	2301      	movs	r3, #1
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	e010      	b.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d902      	bls.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038a4:	2303      	movs	r3, #3
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	e00a      	b.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d102      	bne.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b0:	2302      	movs	r3, #2
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	e004      	b.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b70      	cmp	r3, #112	; 0x70
 80038ba:	d101      	bne.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038bc:	2301      	movs	r3, #1
 80038be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 0207 	bic.w	r2, r3, #7
 80038c8:	4909      	ldr	r1, [pc, #36]	; (80038f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d001      	beq.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40022000 	.word	0x40022000

080038f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038fc:	2300      	movs	r3, #0
 80038fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003900:	2300      	movs	r3, #0
 8003902:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390c:	2b00      	cmp	r3, #0
 800390e:	d031      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003918:	d01a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800391a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800391e:	d814      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003928:	d10f      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800392a:	4b5d      	ldr	r3, [pc, #372]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4a5c      	ldr	r2, [pc, #368]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003936:	e00c      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa44 	bl	8003dcc <RCCEx_PLLSAI1_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003948:	e003      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	74fb      	strb	r3, [r7, #19]
      break;
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	494e      	ldr	r1, [pc, #312]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800396e:	e001      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 809e 	beq.w	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003986:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b40      	ldr	r3, [pc, #256]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	4a3f      	ldr	r2, [pc, #252]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6593      	str	r3, [r2, #88]	; 0x58
 80039a8:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b4:	2301      	movs	r3, #1
 80039b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b8:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c4:	f7fd fad4 	bl	8000f70 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ca:	e009      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039cc:	f7fd fad0 	bl	8000f70 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	74fb      	strb	r3, [r7, #19]
        break;
 80039de:	e005      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039e0:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ef      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d15a      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039f2:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01e      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d019      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a1a:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a3a:	4a19      	ldr	r2, [pc, #100]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d016      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fa90 	bl	8000f70 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a52:	e00b      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a54:	f7fd fa8c 	bl	8000f70 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d902      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	74fb      	strb	r3, [r7, #19]
            break;
 8003a6a:	e006      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0ec      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8e:	4904      	ldr	r1, [pc, #16]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a96:	e009      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	74bb      	strb	r3, [r7, #18]
 8003a9c:	e006      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aac:	7c7b      	ldrb	r3, [r7, #17]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d105      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab2:	4b9e      	ldr	r3, [pc, #632]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	4a9d      	ldr	r2, [pc, #628]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aca:	4b98      	ldr	r3, [pc, #608]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f023 0203 	bic.w	r2, r3, #3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4994      	ldr	r1, [pc, #592]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aec:	4b8f      	ldr	r3, [pc, #572]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 020c 	bic.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	498c      	ldr	r1, [pc, #560]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b0e:	4b87      	ldr	r3, [pc, #540]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	4983      	ldr	r1, [pc, #524]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b30:	4b7e      	ldr	r3, [pc, #504]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	497b      	ldr	r1, [pc, #492]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4972      	ldr	r1, [pc, #456]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b74:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	496a      	ldr	r1, [pc, #424]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	4961      	ldr	r1, [pc, #388]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb8:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	4959      	ldr	r1, [pc, #356]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bda:	4b54      	ldr	r3, [pc, #336]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	4950      	ldr	r1, [pc, #320]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	4948      	ldr	r1, [pc, #288]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c1e:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c24:	f023 0203 	bic.w	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	493f      	ldr	r1, [pc, #252]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d028      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4e:	4937      	ldr	r1, [pc, #220]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6a:	60d3      	str	r3, [r2, #12]
 8003c6c:	e011      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c76:	d10c      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f8a4 	bl	8003dcc <RCCEx_PLLSAI1_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c88:	7cfb      	ldrb	r3, [r7, #19]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d028      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	491f      	ldr	r1, [pc, #124]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc8:	60d3      	str	r3, [r2, #12]
 8003cca:	e011      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f875 	bl	8003dcc <RCCEx_PLLSAI1_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d02b      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	4908      	ldr	r1, [pc, #32]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a02      	ldr	r2, [pc, #8]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d26:	60d3      	str	r3, [r2, #12]
 8003d28:	e014      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f843 	bl	8003dcc <RCCEx_PLLSAI1_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01c      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	4916      	ldr	r1, [pc, #88]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	2102      	movs	r1, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f820 	bl	8003dcc <RCCEx_PLLSAI1_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db4:	4904      	ldr	r1, [pc, #16]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000

08003dcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dda:	4b74      	ldr	r3, [pc, #464]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d018      	beq.n	8003e18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003de6:	4b71      	ldr	r3, [pc, #452]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0203 	and.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10d      	bne.n	8003e12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dfe:	4b6b      	ldr	r3, [pc, #428]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d047      	beq.n	8003ea2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	e044      	b.n	8003ea2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d018      	beq.n	8003e52 <RCCEx_PLLSAI1_Config+0x86>
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d825      	bhi.n	8003e70 <RCCEx_PLLSAI1_Config+0xa4>
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d002      	beq.n	8003e2e <RCCEx_PLLSAI1_Config+0x62>
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d009      	beq.n	8003e40 <RCCEx_PLLSAI1_Config+0x74>
 8003e2c:	e020      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e2e:	4b5f      	ldr	r3, [pc, #380]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11d      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3e:	e01a      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e40:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d116      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e50:	e013      	b.n	8003e7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e52:	4b56      	ldr	r3, [pc, #344]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e5e:	4b53      	ldr	r3, [pc, #332]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e6e:	e006      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      break;
 8003e74:	e004      	b.n	8003e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10d      	bne.n	8003ea2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e86:	4b49      	ldr	r3, [pc, #292]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	4943      	ldr	r1, [pc, #268]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d17c      	bne.n	8003fa2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ea8:	4b40      	ldr	r3, [pc, #256]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3f      	ldr	r2, [pc, #252]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb4:	f7fd f85c 	bl	8000f70 <HAL_GetTick>
 8003eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eba:	e009      	b.n	8003ed0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ebc:	f7fd f858 	bl	8000f70 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d902      	bls.n	8003ed0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ece:	e005      	b.n	8003edc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ef      	bne.n	8003ebc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d15f      	bne.n	8003fa2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d110      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ef0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6892      	ldr	r2, [r2, #8]
 8003ef8:	0211      	lsls	r1, r2, #8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68d2      	ldr	r2, [r2, #12]
 8003efe:	06d2      	lsls	r2, r2, #27
 8003f00:	430a      	orrs	r2, r1
 8003f02:	492a      	ldr	r1, [pc, #168]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	610b      	str	r3, [r1, #16]
 8003f08:	e027      	b.n	8003f5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d112      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f10:	4b26      	ldr	r3, [pc, #152]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6892      	ldr	r2, [r2, #8]
 8003f20:	0211      	lsls	r1, r2, #8
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6912      	ldr	r2, [r2, #16]
 8003f26:	0852      	lsrs	r2, r2, #1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0552      	lsls	r2, r2, #21
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	491f      	ldr	r1, [pc, #124]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]
 8003f34:	e011      	b.n	8003f5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6892      	ldr	r2, [r2, #8]
 8003f46:	0211      	lsls	r1, r2, #8
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6952      	ldr	r2, [r2, #20]
 8003f4c:	0852      	lsrs	r2, r2, #1
 8003f4e:	3a01      	subs	r2, #1
 8003f50:	0652      	lsls	r2, r2, #25
 8003f52:	430a      	orrs	r2, r1
 8003f54:	4915      	ldr	r1, [pc, #84]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a13      	ldr	r2, [pc, #76]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f66:	f7fd f803 	bl	8000f70 <HAL_GetTick>
 8003f6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f6c:	e009      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f6e:	f7fc ffff 	bl	8000f70 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d902      	bls.n	8003f82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	73fb      	strb	r3, [r7, #15]
          break;
 8003f80:	e005      	b.n	8003f8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0ef      	beq.n	8003f6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4903      	ldr	r1, [pc, #12]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000

08003fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e040      	b.n	8004044 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fe50 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	; 0x24
 8003fdc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fe42 	bl	8004c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fbb9 	bl	8004774 <UART_SetConfig>
 8004002:	4603      	mov	r3, r0
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e01b      	b.n	8004044 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800401a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800402a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fec1 	bl	8004dc4 <UART_CheckIdleState>
 8004042:	4603      	mov	r3, r0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004060:	2b20      	cmp	r3, #32
 8004062:	d178      	bne.n	8004156 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_UART_Transmit+0x24>
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e071      	b.n	8004158 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2221      	movs	r2, #33	; 0x21
 8004080:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004082:	f7fc ff75 	bl	8000f70 <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a0:	d108      	bne.n	80040b4 <HAL_UART_Transmit+0x68>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d104      	bne.n	80040b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	e003      	b.n	80040bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040bc:	e030      	b.n	8004120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 ff23 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e03c      	b.n	8004158 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	881a      	ldrh	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f0:	b292      	uxth	r2, r2
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	3302      	adds	r3, #2
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e008      	b.n	800410e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	b292      	uxth	r2, r2
 8004106:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3301      	adds	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1c8      	bne.n	80040be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2200      	movs	r2, #0
 8004134:	2140      	movs	r1, #64	; 0x40
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 feec 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e005      	b.n	8004158 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b0ba      	sub	sp, #232	; 0xe8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800418a:	f640 030f 	movw	r3, #2063	; 0x80f
 800418e:	4013      	ands	r3, r2
 8004190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d115      	bne.n	80041c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00f      	beq.n	80041c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 82ae 	beq.w	800471a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
      }
      return;
 80041c6:	e2a8      	b.n	800471a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80041c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8117 	beq.w	8004400 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041e2:	4b85      	ldr	r3, [pc, #532]	; (80043f8 <HAL_UART_IRQHandler+0x298>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 810a 	beq.w	8004400 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d011      	beq.n	800421c <HAL_UART_IRQHandler+0xbc>
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d011      	beq.n	800424c <HAL_UART_IRQHandler+0xec>
 8004228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2202      	movs	r2, #2
 800423a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d011      	beq.n	800427c <HAL_UART_IRQHandler+0x11c>
 8004258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2204      	movs	r2, #4
 800426a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004272:	f043 0202 	orr.w	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d017      	beq.n	80042b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004298:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2208      	movs	r2, #8
 80042a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ae:	f043 0208 	orr.w	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <HAL_UART_IRQHandler+0x18a>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8214 	beq.w	800471e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d005      	beq.n	8004342 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800433a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800433e:	2b00      	cmp	r3, #0
 8004340:	d04f      	beq.n	80043e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fe4d 	bl	8004fe2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d141      	bne.n	80043da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3308      	adds	r3, #8
 800435c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800436c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004382:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800438e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800439a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1d9      	bne.n	8004356 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d013      	beq.n	80043d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ae:	4a13      	ldr	r2, [pc, #76]	; (80043fc <HAL_UART_IRQHandler+0x29c>)
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe f91c 	bl	80025f4 <HAL_DMA_Abort_IT>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d017      	beq.n	80043f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043cc:	4610      	mov	r0, r2
 80043ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	e00f      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9b8 	bl	8004748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	e00b      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9b4 	bl	8004748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e0:	e007      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9b0 	bl	8004748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80043f0:	e195      	b.n	800471e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f2:	bf00      	nop
    return;
 80043f4:	e193      	b.n	800471e <HAL_UART_IRQHandler+0x5be>
 80043f6:	bf00      	nop
 80043f8:	04000120 	.word	0x04000120
 80043fc:	080050ab 	.word	0x080050ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004404:	2b01      	cmp	r3, #1
 8004406:	f040 814e 	bne.w	80046a6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800440a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8147 	beq.w	80046a6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8140 	beq.w	80046a6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2210      	movs	r2, #16
 800442c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	f040 80b8 	bne.w	80045ae <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800444a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8167 	beq.w	8004722 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800445a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800445e:	429a      	cmp	r2, r3
 8004460:	f080 815f 	bcs.w	8004722 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800446a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 8086 	bne.w	800458c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800449c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1da      	bne.n	8004480 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e1      	bne.n	80044ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800452a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800452c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004530:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e3      	bne.n	8004506 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800455a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455c:	f023 0310 	bic.w	r3, r3, #16
 8004560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004570:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800457c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e4      	bne.n	800454c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd fff6 	bl	8002578 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8d8 	bl	800475c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045ac:	e0b9      	b.n	8004722 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80ab 	beq.w	8004726 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80045d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80a6 	beq.w	8004726 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045fc:	647b      	str	r3, [r7, #68]	; 0x44
 80045fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800460a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e4      	bne.n	80045da <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	623b      	str	r3, [r7, #32]
   return(result);
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004634:	633a      	str	r2, [r7, #48]	; 0x30
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800463a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e3      	bne.n	8004610 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	60fb      	str	r3, [r7, #12]
   return(result);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f023 0310 	bic.w	r3, r3, #16
 8004670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800467e:	61fb      	str	r3, [r7, #28]
 8004680:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	617b      	str	r3, [r7, #20]
   return(result);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e4      	bne.n	800465c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f85c 	bl	800475c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046a4:	e03f      	b.n	8004726 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00e      	beq.n	80046d0 <HAL_UART_IRQHandler+0x570>
 80046b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fd2e 	bl	800512a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ce:	e02d      	b.n	800472c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01c      	beq.n	800472a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
    }
    return;
 80046f8:	e017      	b.n	800472a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d012      	beq.n	800472c <HAL_UART_IRQHandler+0x5cc>
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fcdf 	bl	80050d6 <UART_EndTransmit_IT>
    return;
 8004718:	e008      	b.n	800472c <HAL_UART_IRQHandler+0x5cc>
      return;
 800471a:	bf00      	nop
 800471c:	e006      	b.n	800472c <HAL_UART_IRQHandler+0x5cc>
    return;
 800471e:	bf00      	nop
 8004720:	e004      	b.n	800472c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004722:	bf00      	nop
 8004724:	e002      	b.n	800472c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004726:	bf00      	nop
 8004728:	e000      	b.n	800472c <HAL_UART_IRQHandler+0x5cc>
    return;
 800472a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800472c:	37e8      	adds	r7, #232	; 0xe8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop

08004734 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004778:	b08a      	sub	sp, #40	; 0x28
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4ba5      	ldr	r3, [pc, #660]	; (8004a38 <UART_SetConfig+0x2c4>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a9a      	ldr	r2, [pc, #616]	; (8004a3c <UART_SetConfig+0x2c8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047dc:	4313      	orrs	r3, r2
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	430a      	orrs	r2, r1
 80047f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a91      	ldr	r2, [pc, #580]	; (8004a40 <UART_SetConfig+0x2cc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d126      	bne.n	800484c <UART_SetConfig+0xd8>
 80047fe:	4b91      	ldr	r3, [pc, #580]	; (8004a44 <UART_SetConfig+0x2d0>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	2b03      	cmp	r3, #3
 800480a:	d81b      	bhi.n	8004844 <UART_SetConfig+0xd0>
 800480c:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0xa0>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004825 	.word	0x08004825
 8004818:	08004835 	.word	0x08004835
 800481c:	0800482d 	.word	0x0800482d
 8004820:	0800483d 	.word	0x0800483d
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482a:	e0d6      	b.n	80049da <UART_SetConfig+0x266>
 800482c:	2302      	movs	r3, #2
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e0d2      	b.n	80049da <UART_SetConfig+0x266>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e0ce      	b.n	80049da <UART_SetConfig+0x266>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e0ca      	b.n	80049da <UART_SetConfig+0x266>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e0c6      	b.n	80049da <UART_SetConfig+0x266>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a7d      	ldr	r2, [pc, #500]	; (8004a48 <UART_SetConfig+0x2d4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d138      	bne.n	80048c8 <UART_SetConfig+0x154>
 8004856:	4b7b      	ldr	r3, [pc, #492]	; (8004a44 <UART_SetConfig+0x2d0>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b0c      	cmp	r3, #12
 8004862:	d82d      	bhi.n	80048c0 <UART_SetConfig+0x14c>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0xf8>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080048c1 	.word	0x080048c1
 8004874:	080048c1 	.word	0x080048c1
 8004878:	080048c1 	.word	0x080048c1
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048c1 	.word	0x080048c1
 8004884:	080048c1 	.word	0x080048c1
 8004888:	080048c1 	.word	0x080048c1
 800488c:	080048a9 	.word	0x080048a9
 8004890:	080048c1 	.word	0x080048c1
 8004894:	080048c1 	.word	0x080048c1
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048b9 	.word	0x080048b9
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e098      	b.n	80049da <UART_SetConfig+0x266>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e094      	b.n	80049da <UART_SetConfig+0x266>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e090      	b.n	80049da <UART_SetConfig+0x266>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e08c      	b.n	80049da <UART_SetConfig+0x266>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c6:	e088      	b.n	80049da <UART_SetConfig+0x266>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a5f      	ldr	r2, [pc, #380]	; (8004a4c <UART_SetConfig+0x2d8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d125      	bne.n	800491e <UART_SetConfig+0x1aa>
 80048d2:	4b5c      	ldr	r3, [pc, #368]	; (8004a44 <UART_SetConfig+0x2d0>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d016      	beq.n	800490e <UART_SetConfig+0x19a>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d818      	bhi.n	8004916 <UART_SetConfig+0x1a2>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d00a      	beq.n	80048fe <UART_SetConfig+0x18a>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d814      	bhi.n	8004916 <UART_SetConfig+0x1a2>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <UART_SetConfig+0x182>
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d008      	beq.n	8004906 <UART_SetConfig+0x192>
 80048f4:	e00f      	b.n	8004916 <UART_SetConfig+0x1a2>
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fc:	e06d      	b.n	80049da <UART_SetConfig+0x266>
 80048fe:	2302      	movs	r3, #2
 8004900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004904:	e069      	b.n	80049da <UART_SetConfig+0x266>
 8004906:	2304      	movs	r3, #4
 8004908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490c:	e065      	b.n	80049da <UART_SetConfig+0x266>
 800490e:	2308      	movs	r3, #8
 8004910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004914:	e061      	b.n	80049da <UART_SetConfig+0x266>
 8004916:	2310      	movs	r3, #16
 8004918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491c:	e05d      	b.n	80049da <UART_SetConfig+0x266>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a4b      	ldr	r2, [pc, #300]	; (8004a50 <UART_SetConfig+0x2dc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d125      	bne.n	8004974 <UART_SetConfig+0x200>
 8004928:	4b46      	ldr	r3, [pc, #280]	; (8004a44 <UART_SetConfig+0x2d0>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004932:	2bc0      	cmp	r3, #192	; 0xc0
 8004934:	d016      	beq.n	8004964 <UART_SetConfig+0x1f0>
 8004936:	2bc0      	cmp	r3, #192	; 0xc0
 8004938:	d818      	bhi.n	800496c <UART_SetConfig+0x1f8>
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d00a      	beq.n	8004954 <UART_SetConfig+0x1e0>
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d814      	bhi.n	800496c <UART_SetConfig+0x1f8>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <UART_SetConfig+0x1d8>
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d008      	beq.n	800495c <UART_SetConfig+0x1e8>
 800494a:	e00f      	b.n	800496c <UART_SetConfig+0x1f8>
 800494c:	2300      	movs	r3, #0
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004952:	e042      	b.n	80049da <UART_SetConfig+0x266>
 8004954:	2302      	movs	r3, #2
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495a:	e03e      	b.n	80049da <UART_SetConfig+0x266>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004962:	e03a      	b.n	80049da <UART_SetConfig+0x266>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496a:	e036      	b.n	80049da <UART_SetConfig+0x266>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e032      	b.n	80049da <UART_SetConfig+0x266>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a30      	ldr	r2, [pc, #192]	; (8004a3c <UART_SetConfig+0x2c8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d12a      	bne.n	80049d4 <UART_SetConfig+0x260>
 800497e:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <UART_SetConfig+0x2d0>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004988:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800498c:	d01a      	beq.n	80049c4 <UART_SetConfig+0x250>
 800498e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004992:	d81b      	bhi.n	80049cc <UART_SetConfig+0x258>
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d00c      	beq.n	80049b4 <UART_SetConfig+0x240>
 800499a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499e:	d815      	bhi.n	80049cc <UART_SetConfig+0x258>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <UART_SetConfig+0x238>
 80049a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a8:	d008      	beq.n	80049bc <UART_SetConfig+0x248>
 80049aa:	e00f      	b.n	80049cc <UART_SetConfig+0x258>
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b2:	e012      	b.n	80049da <UART_SetConfig+0x266>
 80049b4:	2302      	movs	r3, #2
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ba:	e00e      	b.n	80049da <UART_SetConfig+0x266>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c2:	e00a      	b.n	80049da <UART_SetConfig+0x266>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ca:	e006      	b.n	80049da <UART_SetConfig+0x266>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d2:	e002      	b.n	80049da <UART_SetConfig+0x266>
 80049d4:	2310      	movs	r3, #16
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <UART_SetConfig+0x2c8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	f040 808b 	bne.w	8004afc <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d834      	bhi.n	8004a58 <UART_SetConfig+0x2e4>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0x280>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a59 	.word	0x08004a59
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a59 	.word	0x08004a59
 8004a04:	08004a27 	.word	0x08004a27
 8004a08:	08004a59 	.word	0x08004a59
 8004a0c:	08004a59 	.word	0x08004a59
 8004a10:	08004a59 	.word	0x08004a59
 8004a14:	08004a2f 	.word	0x08004a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7fe fee0 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8004a1c:	61f8      	str	r0, [r7, #28]
        break;
 8004a1e:	e021      	b.n	8004a64 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <UART_SetConfig+0x2e0>)
 8004a22:	61fb      	str	r3, [r7, #28]
        break;
 8004a24:	e01e      	b.n	8004a64 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a26:	f7fe fe41 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8004a2a:	61f8      	str	r0, [r7, #28]
        break;
 8004a2c:	e01a      	b.n	8004a64 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a32:	61fb      	str	r3, [r7, #28]
        break;
 8004a34:	e016      	b.n	8004a64 <UART_SetConfig+0x2f0>
 8004a36:	bf00      	nop
 8004a38:	efff69f3 	.word	0xefff69f3
 8004a3c:	40008000 	.word	0x40008000
 8004a40:	40013800 	.word	0x40013800
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40004400 	.word	0x40004400
 8004a4c:	40004800 	.word	0x40004800
 8004a50:	40004c00 	.word	0x40004c00
 8004a54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80fa 	beq.w	8004c60 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d305      	bcc.n	8004a88 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d903      	bls.n	8004a90 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a8e:	e0e7      	b.n	8004c60 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2200      	movs	r2, #0
 8004a94:	461c      	mov	r4, r3
 8004a96:	4615      	mov	r5, r2
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	022b      	lsls	r3, r5, #8
 8004aa2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004aa6:	0222      	lsls	r2, r4, #8
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	6849      	ldr	r1, [r1, #4]
 8004aac:	0849      	lsrs	r1, r1, #1
 8004aae:	2000      	movs	r0, #0
 8004ab0:	4688      	mov	r8, r1
 8004ab2:	4681      	mov	r9, r0
 8004ab4:	eb12 0a08 	adds.w	sl, r2, r8
 8004ab8:	eb43 0b09 	adc.w	fp, r3, r9
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aca:	4650      	mov	r0, sl
 8004acc:	4659      	mov	r1, fp
 8004ace:	f7fb fbd7 	bl	8000280 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae0:	d308      	bcc.n	8004af4 <UART_SetConfig+0x380>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae8:	d204      	bcs.n	8004af4 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e0b5      	b.n	8004c60 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004afa:	e0b1      	b.n	8004c60 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b04:	d15d      	bne.n	8004bc2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d827      	bhi.n	8004b5e <UART_SetConfig+0x3ea>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0x3a0>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	08004b5f 	.word	0x08004b5f
 8004b24:	08004b4f 	.word	0x08004b4f
 8004b28:	08004b5f 	.word	0x08004b5f
 8004b2c:	08004b5f 	.word	0x08004b5f
 8004b30:	08004b5f 	.word	0x08004b5f
 8004b34:	08004b57 	.word	0x08004b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fe fe50 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8004b3c:	61f8      	str	r0, [r7, #28]
        break;
 8004b3e:	e014      	b.n	8004b6a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fe62 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8004b44:	61f8      	str	r0, [r7, #28]
        break;
 8004b46:	e010      	b.n	8004b6a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b4c      	ldr	r3, [pc, #304]	; (8004c7c <UART_SetConfig+0x508>)
 8004b4a:	61fb      	str	r3, [r7, #28]
        break;
 8004b4c:	e00d      	b.n	8004b6a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fe fdad 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8004b52:	61f8      	str	r0, [r7, #28]
        break;
 8004b54:	e009      	b.n	8004b6a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e005      	b.n	8004b6a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d077      	beq.n	8004c60 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	005a      	lsls	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	441a      	add	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b0f      	cmp	r3, #15
 8004b8a:	d916      	bls.n	8004bba <UART_SetConfig+0x446>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b92:	d212      	bcs.n	8004bba <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f023 030f 	bic.w	r3, r3, #15
 8004b9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	8afb      	ldrh	r3, [r7, #22]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	8afa      	ldrh	r2, [r7, #22]
 8004bb6:	60da      	str	r2, [r3, #12]
 8004bb8:	e052      	b.n	8004c60 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bc0:	e04e      	b.n	8004c60 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d827      	bhi.n	8004c1a <UART_SetConfig+0x4a6>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0x45c>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004c05 	.word	0x08004c05
 8004bdc:	08004c1b 	.word	0x08004c1b
 8004be0:	08004c0b 	.word	0x08004c0b
 8004be4:	08004c1b 	.word	0x08004c1b
 8004be8:	08004c1b 	.word	0x08004c1b
 8004bec:	08004c1b 	.word	0x08004c1b
 8004bf0:	08004c13 	.word	0x08004c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7fe fdf2 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8004bf8:	61f8      	str	r0, [r7, #28]
        break;
 8004bfa:	e014      	b.n	8004c26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bfc:	f7fe fe04 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8004c00:	61f8      	str	r0, [r7, #28]
        break;
 8004c02:	e010      	b.n	8004c26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <UART_SetConfig+0x508>)
 8004c06:	61fb      	str	r3, [r7, #28]
        break;
 8004c08:	e00d      	b.n	8004c26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0a:	f7fe fd4f 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8004c0e:	61f8      	str	r0, [r7, #28]
        break;
 8004c10:	e009      	b.n	8004c26 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c16:	61fb      	str	r3, [r7, #28]
        break;
 8004c18:	e005      	b.n	8004c26 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c24:	bf00      	nop
    }

    if (pclk != 0U)
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d019      	beq.n	8004c60 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	085a      	lsrs	r2, r3, #1
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	441a      	add	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b0f      	cmp	r3, #15
 8004c44:	d909      	bls.n	8004c5a <UART_SetConfig+0x4e6>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d205      	bcs.n	8004c5a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60da      	str	r2, [r3, #12]
 8004c58:	e002      	b.n	8004c60 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	; 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7a:	bf00      	nop
 8004c7c:	00f42400 	.word	0x00f42400

08004c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7e:	d10a      	bne.n	8004d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b098      	sub	sp, #96	; 0x60
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd4:	f7fc f8cc 	bl	8000f70 <HAL_GetTick>
 8004dd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d12e      	bne.n	8004e46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f88c 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d021      	beq.n	8004e46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e16:	653b      	str	r3, [r7, #80]	; 0x50
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
 8004e22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e062      	b.n	8004f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d149      	bne.n	8004ee8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f856 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d03c      	beq.n	8004ee8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ec0:	61fa      	str	r2, [r7, #28]
 8004ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	69b9      	ldr	r1, [r7, #24]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e011      	b.n	8004f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3758      	adds	r7, #88	; 0x58
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	e049      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f2c:	d045      	beq.n	8004fba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fc f81f 	bl	8000f70 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e048      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d031      	beq.n	8004fba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d110      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f838 	bl	8004fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2208      	movs	r2, #8
 8004f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e029      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f94:	d111      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f81e 	bl	8004fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e00f      	b.n	8004fda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d0a6      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b095      	sub	sp, #84	; 0x54
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
 800500a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800500e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e6      	bne.n	8004fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3308      	adds	r3, #8
 8005022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	61fb      	str	r3, [r7, #28]
   return(result);
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	64bb      	str	r3, [r7, #72]	; 0x48
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800503c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005054:	2b01      	cmp	r3, #1
 8005056:	d118      	bne.n	800508a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	60bb      	str	r3, [r7, #8]
   return(result);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	613b      	str	r3, [r7, #16]
   return(result);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800509e:	bf00      	nop
 80050a0:	3754      	adds	r7, #84	; 0x54
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fb3d 	bl	8004748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b088      	sub	sp, #32
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6979      	ldr	r1, [r7, #20]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	613b      	str	r3, [r7, #16]
   return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff fb09 	bl	8004734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005122:	bf00      	nop
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <malloc>:
 8005140:	4b02      	ldr	r3, [pc, #8]	; (800514c <malloc+0xc>)
 8005142:	4601      	mov	r1, r0
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	f000 b823 	b.w	8005190 <_malloc_r>
 800514a:	bf00      	nop
 800514c:	20000058 	.word	0x20000058

08005150 <sbrk_aligned>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4e0e      	ldr	r6, [pc, #56]	; (800518c <sbrk_aligned+0x3c>)
 8005154:	460c      	mov	r4, r1
 8005156:	6831      	ldr	r1, [r6, #0]
 8005158:	4605      	mov	r5, r0
 800515a:	b911      	cbnz	r1, 8005162 <sbrk_aligned+0x12>
 800515c:	f000 f8cc 	bl	80052f8 <_sbrk_r>
 8005160:	6030      	str	r0, [r6, #0]
 8005162:	4621      	mov	r1, r4
 8005164:	4628      	mov	r0, r5
 8005166:	f000 f8c7 	bl	80052f8 <_sbrk_r>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	d00a      	beq.n	8005184 <sbrk_aligned+0x34>
 800516e:	1cc4      	adds	r4, r0, #3
 8005170:	f024 0403 	bic.w	r4, r4, #3
 8005174:	42a0      	cmp	r0, r4
 8005176:	d007      	beq.n	8005188 <sbrk_aligned+0x38>
 8005178:	1a21      	subs	r1, r4, r0
 800517a:	4628      	mov	r0, r5
 800517c:	f000 f8bc 	bl	80052f8 <_sbrk_r>
 8005180:	3001      	adds	r0, #1
 8005182:	d101      	bne.n	8005188 <sbrk_aligned+0x38>
 8005184:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005188:	4620      	mov	r0, r4
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	200001d4 	.word	0x200001d4

08005190 <_malloc_r>:
 8005190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005194:	1ccd      	adds	r5, r1, #3
 8005196:	f025 0503 	bic.w	r5, r5, #3
 800519a:	3508      	adds	r5, #8
 800519c:	2d0c      	cmp	r5, #12
 800519e:	bf38      	it	cc
 80051a0:	250c      	movcc	r5, #12
 80051a2:	2d00      	cmp	r5, #0
 80051a4:	4607      	mov	r7, r0
 80051a6:	db01      	blt.n	80051ac <_malloc_r+0x1c>
 80051a8:	42a9      	cmp	r1, r5
 80051aa:	d905      	bls.n	80051b8 <_malloc_r+0x28>
 80051ac:	230c      	movs	r3, #12
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	2600      	movs	r6, #0
 80051b2:	4630      	mov	r0, r6
 80051b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800528c <_malloc_r+0xfc>
 80051bc:	f000 f868 	bl	8005290 <__malloc_lock>
 80051c0:	f8d8 3000 	ldr.w	r3, [r8]
 80051c4:	461c      	mov	r4, r3
 80051c6:	bb5c      	cbnz	r4, 8005220 <_malloc_r+0x90>
 80051c8:	4629      	mov	r1, r5
 80051ca:	4638      	mov	r0, r7
 80051cc:	f7ff ffc0 	bl	8005150 <sbrk_aligned>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	4604      	mov	r4, r0
 80051d4:	d155      	bne.n	8005282 <_malloc_r+0xf2>
 80051d6:	f8d8 4000 	ldr.w	r4, [r8]
 80051da:	4626      	mov	r6, r4
 80051dc:	2e00      	cmp	r6, #0
 80051de:	d145      	bne.n	800526c <_malloc_r+0xdc>
 80051e0:	2c00      	cmp	r4, #0
 80051e2:	d048      	beq.n	8005276 <_malloc_r+0xe6>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	4631      	mov	r1, r6
 80051e8:	4638      	mov	r0, r7
 80051ea:	eb04 0903 	add.w	r9, r4, r3
 80051ee:	f000 f883 	bl	80052f8 <_sbrk_r>
 80051f2:	4581      	cmp	r9, r0
 80051f4:	d13f      	bne.n	8005276 <_malloc_r+0xe6>
 80051f6:	6821      	ldr	r1, [r4, #0]
 80051f8:	1a6d      	subs	r5, r5, r1
 80051fa:	4629      	mov	r1, r5
 80051fc:	4638      	mov	r0, r7
 80051fe:	f7ff ffa7 	bl	8005150 <sbrk_aligned>
 8005202:	3001      	adds	r0, #1
 8005204:	d037      	beq.n	8005276 <_malloc_r+0xe6>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	442b      	add	r3, r5
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	f8d8 3000 	ldr.w	r3, [r8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d038      	beq.n	8005286 <_malloc_r+0xf6>
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	42a2      	cmp	r2, r4
 8005218:	d12b      	bne.n	8005272 <_malloc_r+0xe2>
 800521a:	2200      	movs	r2, #0
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	e00f      	b.n	8005240 <_malloc_r+0xb0>
 8005220:	6822      	ldr	r2, [r4, #0]
 8005222:	1b52      	subs	r2, r2, r5
 8005224:	d41f      	bmi.n	8005266 <_malloc_r+0xd6>
 8005226:	2a0b      	cmp	r2, #11
 8005228:	d917      	bls.n	800525a <_malloc_r+0xca>
 800522a:	1961      	adds	r1, r4, r5
 800522c:	42a3      	cmp	r3, r4
 800522e:	6025      	str	r5, [r4, #0]
 8005230:	bf18      	it	ne
 8005232:	6059      	strne	r1, [r3, #4]
 8005234:	6863      	ldr	r3, [r4, #4]
 8005236:	bf08      	it	eq
 8005238:	f8c8 1000 	streq.w	r1, [r8]
 800523c:	5162      	str	r2, [r4, r5]
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	4638      	mov	r0, r7
 8005242:	f104 060b 	add.w	r6, r4, #11
 8005246:	f000 f829 	bl	800529c <__malloc_unlock>
 800524a:	f026 0607 	bic.w	r6, r6, #7
 800524e:	1d23      	adds	r3, r4, #4
 8005250:	1af2      	subs	r2, r6, r3
 8005252:	d0ae      	beq.n	80051b2 <_malloc_r+0x22>
 8005254:	1b9b      	subs	r3, r3, r6
 8005256:	50a3      	str	r3, [r4, r2]
 8005258:	e7ab      	b.n	80051b2 <_malloc_r+0x22>
 800525a:	42a3      	cmp	r3, r4
 800525c:	6862      	ldr	r2, [r4, #4]
 800525e:	d1dd      	bne.n	800521c <_malloc_r+0x8c>
 8005260:	f8c8 2000 	str.w	r2, [r8]
 8005264:	e7ec      	b.n	8005240 <_malloc_r+0xb0>
 8005266:	4623      	mov	r3, r4
 8005268:	6864      	ldr	r4, [r4, #4]
 800526a:	e7ac      	b.n	80051c6 <_malloc_r+0x36>
 800526c:	4634      	mov	r4, r6
 800526e:	6876      	ldr	r6, [r6, #4]
 8005270:	e7b4      	b.n	80051dc <_malloc_r+0x4c>
 8005272:	4613      	mov	r3, r2
 8005274:	e7cc      	b.n	8005210 <_malloc_r+0x80>
 8005276:	230c      	movs	r3, #12
 8005278:	603b      	str	r3, [r7, #0]
 800527a:	4638      	mov	r0, r7
 800527c:	f000 f80e 	bl	800529c <__malloc_unlock>
 8005280:	e797      	b.n	80051b2 <_malloc_r+0x22>
 8005282:	6025      	str	r5, [r4, #0]
 8005284:	e7dc      	b.n	8005240 <_malloc_r+0xb0>
 8005286:	605b      	str	r3, [r3, #4]
 8005288:	deff      	udf	#255	; 0xff
 800528a:	bf00      	nop
 800528c:	200001d0 	.word	0x200001d0

08005290 <__malloc_lock>:
 8005290:	4801      	ldr	r0, [pc, #4]	; (8005298 <__malloc_lock+0x8>)
 8005292:	f000 b86b 	b.w	800536c <__retarget_lock_acquire_recursive>
 8005296:	bf00      	nop
 8005298:	20000314 	.word	0x20000314

0800529c <__malloc_unlock>:
 800529c:	4801      	ldr	r0, [pc, #4]	; (80052a4 <__malloc_unlock+0x8>)
 800529e:	f000 b866 	b.w	800536e <__retarget_lock_release_recursive>
 80052a2:	bf00      	nop
 80052a4:	20000314 	.word	0x20000314

080052a8 <siprintf>:
 80052a8:	b40e      	push	{r1, r2, r3}
 80052aa:	b500      	push	{lr}
 80052ac:	b09c      	sub	sp, #112	; 0x70
 80052ae:	ab1d      	add	r3, sp, #116	; 0x74
 80052b0:	9002      	str	r0, [sp, #8]
 80052b2:	9006      	str	r0, [sp, #24]
 80052b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052b8:	4809      	ldr	r0, [pc, #36]	; (80052e0 <siprintf+0x38>)
 80052ba:	9107      	str	r1, [sp, #28]
 80052bc:	9104      	str	r1, [sp, #16]
 80052be:	4909      	ldr	r1, [pc, #36]	; (80052e4 <siprintf+0x3c>)
 80052c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052c4:	9105      	str	r1, [sp, #20]
 80052c6:	6800      	ldr	r0, [r0, #0]
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	a902      	add	r1, sp, #8
 80052cc:	f000 f8f6 	bl	80054bc <_svfiprintf_r>
 80052d0:	9b02      	ldr	r3, [sp, #8]
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	b01c      	add	sp, #112	; 0x70
 80052d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052dc:	b003      	add	sp, #12
 80052de:	4770      	bx	lr
 80052e0:	20000058 	.word	0x20000058
 80052e4:	ffff0208 	.word	0xffff0208

080052e8 <memset>:
 80052e8:	4402      	add	r2, r0
 80052ea:	4603      	mov	r3, r0
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d100      	bne.n	80052f2 <memset+0xa>
 80052f0:	4770      	bx	lr
 80052f2:	f803 1b01 	strb.w	r1, [r3], #1
 80052f6:	e7f9      	b.n	80052ec <memset+0x4>

080052f8 <_sbrk_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	; (8005314 <_sbrk_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fb fd5a 	bl	8000dbc <_sbrk>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_sbrk_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_sbrk_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	20000310 	.word	0x20000310

08005318 <__errno>:
 8005318:	4b01      	ldr	r3, [pc, #4]	; (8005320 <__errno+0x8>)
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000058 	.word	0x20000058

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4d0d      	ldr	r5, [pc, #52]	; (800535c <__libc_init_array+0x38>)
 8005328:	4c0d      	ldr	r4, [pc, #52]	; (8005360 <__libc_init_array+0x3c>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	2600      	movs	r6, #0
 8005330:	42a6      	cmp	r6, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	4d0b      	ldr	r5, [pc, #44]	; (8005364 <__libc_init_array+0x40>)
 8005336:	4c0c      	ldr	r4, [pc, #48]	; (8005368 <__libc_init_array+0x44>)
 8005338:	f000 fbae 	bl	8005a98 <_init>
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	2600      	movs	r6, #0
 8005342:	42a6      	cmp	r6, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f855 3b04 	ldr.w	r3, [r5], #4
 800534c:	4798      	blx	r3
 800534e:	3601      	adds	r6, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	f855 3b04 	ldr.w	r3, [r5], #4
 8005356:	4798      	blx	r3
 8005358:	3601      	adds	r6, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	08005bbc 	.word	0x08005bbc
 8005360:	08005bbc 	.word	0x08005bbc
 8005364:	08005bbc 	.word	0x08005bbc
 8005368:	08005bc0 	.word	0x08005bc0

0800536c <__retarget_lock_acquire_recursive>:
 800536c:	4770      	bx	lr

0800536e <__retarget_lock_release_recursive>:
 800536e:	4770      	bx	lr

08005370 <_free_r>:
 8005370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005372:	2900      	cmp	r1, #0
 8005374:	d044      	beq.n	8005400 <_free_r+0x90>
 8005376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537a:	9001      	str	r0, [sp, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f1a1 0404 	sub.w	r4, r1, #4
 8005382:	bfb8      	it	lt
 8005384:	18e4      	addlt	r4, r4, r3
 8005386:	f7ff ff83 	bl	8005290 <__malloc_lock>
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <_free_r+0x94>)
 800538c:	9801      	ldr	r0, [sp, #4]
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	b933      	cbnz	r3, 80053a0 <_free_r+0x30>
 8005392:	6063      	str	r3, [r4, #4]
 8005394:	6014      	str	r4, [r2, #0]
 8005396:	b003      	add	sp, #12
 8005398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800539c:	f7ff bf7e 	b.w	800529c <__malloc_unlock>
 80053a0:	42a3      	cmp	r3, r4
 80053a2:	d908      	bls.n	80053b6 <_free_r+0x46>
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	1961      	adds	r1, r4, r5
 80053a8:	428b      	cmp	r3, r1
 80053aa:	bf01      	itttt	eq
 80053ac:	6819      	ldreq	r1, [r3, #0]
 80053ae:	685b      	ldreq	r3, [r3, #4]
 80053b0:	1949      	addeq	r1, r1, r5
 80053b2:	6021      	streq	r1, [r4, #0]
 80053b4:	e7ed      	b.n	8005392 <_free_r+0x22>
 80053b6:	461a      	mov	r2, r3
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	b10b      	cbz	r3, 80053c0 <_free_r+0x50>
 80053bc:	42a3      	cmp	r3, r4
 80053be:	d9fa      	bls.n	80053b6 <_free_r+0x46>
 80053c0:	6811      	ldr	r1, [r2, #0]
 80053c2:	1855      	adds	r5, r2, r1
 80053c4:	42a5      	cmp	r5, r4
 80053c6:	d10b      	bne.n	80053e0 <_free_r+0x70>
 80053c8:	6824      	ldr	r4, [r4, #0]
 80053ca:	4421      	add	r1, r4
 80053cc:	1854      	adds	r4, r2, r1
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	6011      	str	r1, [r2, #0]
 80053d2:	d1e0      	bne.n	8005396 <_free_r+0x26>
 80053d4:	681c      	ldr	r4, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	6053      	str	r3, [r2, #4]
 80053da:	440c      	add	r4, r1
 80053dc:	6014      	str	r4, [r2, #0]
 80053de:	e7da      	b.n	8005396 <_free_r+0x26>
 80053e0:	d902      	bls.n	80053e8 <_free_r+0x78>
 80053e2:	230c      	movs	r3, #12
 80053e4:	6003      	str	r3, [r0, #0]
 80053e6:	e7d6      	b.n	8005396 <_free_r+0x26>
 80053e8:	6825      	ldr	r5, [r4, #0]
 80053ea:	1961      	adds	r1, r4, r5
 80053ec:	428b      	cmp	r3, r1
 80053ee:	bf04      	itt	eq
 80053f0:	6819      	ldreq	r1, [r3, #0]
 80053f2:	685b      	ldreq	r3, [r3, #4]
 80053f4:	6063      	str	r3, [r4, #4]
 80053f6:	bf04      	itt	eq
 80053f8:	1949      	addeq	r1, r1, r5
 80053fa:	6021      	streq	r1, [r4, #0]
 80053fc:	6054      	str	r4, [r2, #4]
 80053fe:	e7ca      	b.n	8005396 <_free_r+0x26>
 8005400:	b003      	add	sp, #12
 8005402:	bd30      	pop	{r4, r5, pc}
 8005404:	200001d0 	.word	0x200001d0

08005408 <__ssputs_r>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	688e      	ldr	r6, [r1, #8]
 800540e:	461f      	mov	r7, r3
 8005410:	42be      	cmp	r6, r7
 8005412:	680b      	ldr	r3, [r1, #0]
 8005414:	4682      	mov	sl, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4690      	mov	r8, r2
 800541a:	d82c      	bhi.n	8005476 <__ssputs_r+0x6e>
 800541c:	898a      	ldrh	r2, [r1, #12]
 800541e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005422:	d026      	beq.n	8005472 <__ssputs_r+0x6a>
 8005424:	6965      	ldr	r5, [r4, #20]
 8005426:	6909      	ldr	r1, [r1, #16]
 8005428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800542c:	eba3 0901 	sub.w	r9, r3, r1
 8005430:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005434:	1c7b      	adds	r3, r7, #1
 8005436:	444b      	add	r3, r9
 8005438:	106d      	asrs	r5, r5, #1
 800543a:	429d      	cmp	r5, r3
 800543c:	bf38      	it	cc
 800543e:	461d      	movcc	r5, r3
 8005440:	0553      	lsls	r3, r2, #21
 8005442:	d527      	bpl.n	8005494 <__ssputs_r+0x8c>
 8005444:	4629      	mov	r1, r5
 8005446:	f7ff fea3 	bl	8005190 <_malloc_r>
 800544a:	4606      	mov	r6, r0
 800544c:	b360      	cbz	r0, 80054a8 <__ssputs_r+0xa0>
 800544e:	6921      	ldr	r1, [r4, #16]
 8005450:	464a      	mov	r2, r9
 8005452:	f000 fadb 	bl	8005a0c <memcpy>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	6126      	str	r6, [r4, #16]
 8005464:	6165      	str	r5, [r4, #20]
 8005466:	444e      	add	r6, r9
 8005468:	eba5 0509 	sub.w	r5, r5, r9
 800546c:	6026      	str	r6, [r4, #0]
 800546e:	60a5      	str	r5, [r4, #8]
 8005470:	463e      	mov	r6, r7
 8005472:	42be      	cmp	r6, r7
 8005474:	d900      	bls.n	8005478 <__ssputs_r+0x70>
 8005476:	463e      	mov	r6, r7
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	4632      	mov	r2, r6
 800547c:	4641      	mov	r1, r8
 800547e:	f000 faab 	bl	80059d8 <memmove>
 8005482:	68a3      	ldr	r3, [r4, #8]
 8005484:	1b9b      	subs	r3, r3, r6
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	4433      	add	r3, r6
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	2000      	movs	r0, #0
 8005490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005494:	462a      	mov	r2, r5
 8005496:	f000 fac7 	bl	8005a28 <_realloc_r>
 800549a:	4606      	mov	r6, r0
 800549c:	2800      	cmp	r0, #0
 800549e:	d1e0      	bne.n	8005462 <__ssputs_r+0x5a>
 80054a0:	6921      	ldr	r1, [r4, #16]
 80054a2:	4650      	mov	r0, sl
 80054a4:	f7ff ff64 	bl	8005370 <_free_r>
 80054a8:	230c      	movs	r3, #12
 80054aa:	f8ca 3000 	str.w	r3, [sl]
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ba:	e7e9      	b.n	8005490 <__ssputs_r+0x88>

080054bc <_svfiprintf_r>:
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	4698      	mov	r8, r3
 80054c2:	898b      	ldrh	r3, [r1, #12]
 80054c4:	061b      	lsls	r3, r3, #24
 80054c6:	b09d      	sub	sp, #116	; 0x74
 80054c8:	4607      	mov	r7, r0
 80054ca:	460d      	mov	r5, r1
 80054cc:	4614      	mov	r4, r2
 80054ce:	d50e      	bpl.n	80054ee <_svfiprintf_r+0x32>
 80054d0:	690b      	ldr	r3, [r1, #16]
 80054d2:	b963      	cbnz	r3, 80054ee <_svfiprintf_r+0x32>
 80054d4:	2140      	movs	r1, #64	; 0x40
 80054d6:	f7ff fe5b 	bl	8005190 <_malloc_r>
 80054da:	6028      	str	r0, [r5, #0]
 80054dc:	6128      	str	r0, [r5, #16]
 80054de:	b920      	cbnz	r0, 80054ea <_svfiprintf_r+0x2e>
 80054e0:	230c      	movs	r3, #12
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054e8:	e0d0      	b.n	800568c <_svfiprintf_r+0x1d0>
 80054ea:	2340      	movs	r3, #64	; 0x40
 80054ec:	616b      	str	r3, [r5, #20]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9309      	str	r3, [sp, #36]	; 0x24
 80054f2:	2320      	movs	r3, #32
 80054f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054fc:	2330      	movs	r3, #48	; 0x30
 80054fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056a4 <_svfiprintf_r+0x1e8>
 8005502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005506:	f04f 0901 	mov.w	r9, #1
 800550a:	4623      	mov	r3, r4
 800550c:	469a      	mov	sl, r3
 800550e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005512:	b10a      	cbz	r2, 8005518 <_svfiprintf_r+0x5c>
 8005514:	2a25      	cmp	r2, #37	; 0x25
 8005516:	d1f9      	bne.n	800550c <_svfiprintf_r+0x50>
 8005518:	ebba 0b04 	subs.w	fp, sl, r4
 800551c:	d00b      	beq.n	8005536 <_svfiprintf_r+0x7a>
 800551e:	465b      	mov	r3, fp
 8005520:	4622      	mov	r2, r4
 8005522:	4629      	mov	r1, r5
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ff6f 	bl	8005408 <__ssputs_r>
 800552a:	3001      	adds	r0, #1
 800552c:	f000 80a9 	beq.w	8005682 <_svfiprintf_r+0x1c6>
 8005530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005532:	445a      	add	r2, fp
 8005534:	9209      	str	r2, [sp, #36]	; 0x24
 8005536:	f89a 3000 	ldrb.w	r3, [sl]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80a1 	beq.w	8005682 <_svfiprintf_r+0x1c6>
 8005540:	2300      	movs	r3, #0
 8005542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554a:	f10a 0a01 	add.w	sl, sl, #1
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	9307      	str	r3, [sp, #28]
 8005552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005556:	931a      	str	r3, [sp, #104]	; 0x68
 8005558:	4654      	mov	r4, sl
 800555a:	2205      	movs	r2, #5
 800555c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005560:	4850      	ldr	r0, [pc, #320]	; (80056a4 <_svfiprintf_r+0x1e8>)
 8005562:	f7fa fe3d 	bl	80001e0 <memchr>
 8005566:	9a04      	ldr	r2, [sp, #16]
 8005568:	b9d8      	cbnz	r0, 80055a2 <_svfiprintf_r+0xe6>
 800556a:	06d0      	lsls	r0, r2, #27
 800556c:	bf44      	itt	mi
 800556e:	2320      	movmi	r3, #32
 8005570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005574:	0711      	lsls	r1, r2, #28
 8005576:	bf44      	itt	mi
 8005578:	232b      	movmi	r3, #43	; 0x2b
 800557a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800557e:	f89a 3000 	ldrb.w	r3, [sl]
 8005582:	2b2a      	cmp	r3, #42	; 0x2a
 8005584:	d015      	beq.n	80055b2 <_svfiprintf_r+0xf6>
 8005586:	9a07      	ldr	r2, [sp, #28]
 8005588:	4654      	mov	r4, sl
 800558a:	2000      	movs	r0, #0
 800558c:	f04f 0c0a 	mov.w	ip, #10
 8005590:	4621      	mov	r1, r4
 8005592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005596:	3b30      	subs	r3, #48	; 0x30
 8005598:	2b09      	cmp	r3, #9
 800559a:	d94d      	bls.n	8005638 <_svfiprintf_r+0x17c>
 800559c:	b1b0      	cbz	r0, 80055cc <_svfiprintf_r+0x110>
 800559e:	9207      	str	r2, [sp, #28]
 80055a0:	e014      	b.n	80055cc <_svfiprintf_r+0x110>
 80055a2:	eba0 0308 	sub.w	r3, r0, r8
 80055a6:	fa09 f303 	lsl.w	r3, r9, r3
 80055aa:	4313      	orrs	r3, r2
 80055ac:	9304      	str	r3, [sp, #16]
 80055ae:	46a2      	mov	sl, r4
 80055b0:	e7d2      	b.n	8005558 <_svfiprintf_r+0x9c>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	1d19      	adds	r1, r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	9103      	str	r1, [sp, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfbb      	ittet	lt
 80055be:	425b      	neglt	r3, r3
 80055c0:	f042 0202 	orrlt.w	r2, r2, #2
 80055c4:	9307      	strge	r3, [sp, #28]
 80055c6:	9307      	strlt	r3, [sp, #28]
 80055c8:	bfb8      	it	lt
 80055ca:	9204      	strlt	r2, [sp, #16]
 80055cc:	7823      	ldrb	r3, [r4, #0]
 80055ce:	2b2e      	cmp	r3, #46	; 0x2e
 80055d0:	d10c      	bne.n	80055ec <_svfiprintf_r+0x130>
 80055d2:	7863      	ldrb	r3, [r4, #1]
 80055d4:	2b2a      	cmp	r3, #42	; 0x2a
 80055d6:	d134      	bne.n	8005642 <_svfiprintf_r+0x186>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	1d1a      	adds	r2, r3, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	9203      	str	r2, [sp, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bfb8      	it	lt
 80055e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80055e8:	3402      	adds	r4, #2
 80055ea:	9305      	str	r3, [sp, #20]
 80055ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056b4 <_svfiprintf_r+0x1f8>
 80055f0:	7821      	ldrb	r1, [r4, #0]
 80055f2:	2203      	movs	r2, #3
 80055f4:	4650      	mov	r0, sl
 80055f6:	f7fa fdf3 	bl	80001e0 <memchr>
 80055fa:	b138      	cbz	r0, 800560c <_svfiprintf_r+0x150>
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	eba0 000a 	sub.w	r0, r0, sl
 8005602:	2240      	movs	r2, #64	; 0x40
 8005604:	4082      	lsls	r2, r0
 8005606:	4313      	orrs	r3, r2
 8005608:	3401      	adds	r4, #1
 800560a:	9304      	str	r3, [sp, #16]
 800560c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005610:	4825      	ldr	r0, [pc, #148]	; (80056a8 <_svfiprintf_r+0x1ec>)
 8005612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005616:	2206      	movs	r2, #6
 8005618:	f7fa fde2 	bl	80001e0 <memchr>
 800561c:	2800      	cmp	r0, #0
 800561e:	d038      	beq.n	8005692 <_svfiprintf_r+0x1d6>
 8005620:	4b22      	ldr	r3, [pc, #136]	; (80056ac <_svfiprintf_r+0x1f0>)
 8005622:	bb1b      	cbnz	r3, 800566c <_svfiprintf_r+0x1b0>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	3307      	adds	r3, #7
 8005628:	f023 0307 	bic.w	r3, r3, #7
 800562c:	3308      	adds	r3, #8
 800562e:	9303      	str	r3, [sp, #12]
 8005630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005632:	4433      	add	r3, r6
 8005634:	9309      	str	r3, [sp, #36]	; 0x24
 8005636:	e768      	b.n	800550a <_svfiprintf_r+0x4e>
 8005638:	fb0c 3202 	mla	r2, ip, r2, r3
 800563c:	460c      	mov	r4, r1
 800563e:	2001      	movs	r0, #1
 8005640:	e7a6      	b.n	8005590 <_svfiprintf_r+0xd4>
 8005642:	2300      	movs	r3, #0
 8005644:	3401      	adds	r4, #1
 8005646:	9305      	str	r3, [sp, #20]
 8005648:	4619      	mov	r1, r3
 800564a:	f04f 0c0a 	mov.w	ip, #10
 800564e:	4620      	mov	r0, r4
 8005650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005654:	3a30      	subs	r2, #48	; 0x30
 8005656:	2a09      	cmp	r2, #9
 8005658:	d903      	bls.n	8005662 <_svfiprintf_r+0x1a6>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0c6      	beq.n	80055ec <_svfiprintf_r+0x130>
 800565e:	9105      	str	r1, [sp, #20]
 8005660:	e7c4      	b.n	80055ec <_svfiprintf_r+0x130>
 8005662:	fb0c 2101 	mla	r1, ip, r1, r2
 8005666:	4604      	mov	r4, r0
 8005668:	2301      	movs	r3, #1
 800566a:	e7f0      	b.n	800564e <_svfiprintf_r+0x192>
 800566c:	ab03      	add	r3, sp, #12
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	462a      	mov	r2, r5
 8005672:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <_svfiprintf_r+0x1f4>)
 8005674:	a904      	add	r1, sp, #16
 8005676:	4638      	mov	r0, r7
 8005678:	f3af 8000 	nop.w
 800567c:	1c42      	adds	r2, r0, #1
 800567e:	4606      	mov	r6, r0
 8005680:	d1d6      	bne.n	8005630 <_svfiprintf_r+0x174>
 8005682:	89ab      	ldrh	r3, [r5, #12]
 8005684:	065b      	lsls	r3, r3, #25
 8005686:	f53f af2d 	bmi.w	80054e4 <_svfiprintf_r+0x28>
 800568a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800568c:	b01d      	add	sp, #116	; 0x74
 800568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005692:	ab03      	add	r3, sp, #12
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	462a      	mov	r2, r5
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <_svfiprintf_r+0x1f4>)
 800569a:	a904      	add	r1, sp, #16
 800569c:	4638      	mov	r0, r7
 800569e:	f000 f879 	bl	8005794 <_printf_i>
 80056a2:	e7eb      	b.n	800567c <_svfiprintf_r+0x1c0>
 80056a4:	08005b80 	.word	0x08005b80
 80056a8:	08005b8a 	.word	0x08005b8a
 80056ac:	00000000 	.word	0x00000000
 80056b0:	08005409 	.word	0x08005409
 80056b4:	08005b86 	.word	0x08005b86

080056b8 <_printf_common>:
 80056b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	4616      	mov	r6, r2
 80056be:	4699      	mov	r9, r3
 80056c0:	688a      	ldr	r2, [r1, #8]
 80056c2:	690b      	ldr	r3, [r1, #16]
 80056c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	bfb8      	it	lt
 80056cc:	4613      	movlt	r3, r2
 80056ce:	6033      	str	r3, [r6, #0]
 80056d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056d4:	4607      	mov	r7, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	b10a      	cbz	r2, 80056de <_printf_common+0x26>
 80056da:	3301      	adds	r3, #1
 80056dc:	6033      	str	r3, [r6, #0]
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	0699      	lsls	r1, r3, #26
 80056e2:	bf42      	ittt	mi
 80056e4:	6833      	ldrmi	r3, [r6, #0]
 80056e6:	3302      	addmi	r3, #2
 80056e8:	6033      	strmi	r3, [r6, #0]
 80056ea:	6825      	ldr	r5, [r4, #0]
 80056ec:	f015 0506 	ands.w	r5, r5, #6
 80056f0:	d106      	bne.n	8005700 <_printf_common+0x48>
 80056f2:	f104 0a19 	add.w	sl, r4, #25
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	6832      	ldr	r2, [r6, #0]
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	42ab      	cmp	r3, r5
 80056fe:	dc26      	bgt.n	800574e <_printf_common+0x96>
 8005700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005704:	1e13      	subs	r3, r2, #0
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	bf18      	it	ne
 800570a:	2301      	movne	r3, #1
 800570c:	0692      	lsls	r2, r2, #26
 800570e:	d42b      	bmi.n	8005768 <_printf_common+0xb0>
 8005710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005714:	4649      	mov	r1, r9
 8005716:	4638      	mov	r0, r7
 8005718:	47c0      	blx	r8
 800571a:	3001      	adds	r0, #1
 800571c:	d01e      	beq.n	800575c <_printf_common+0xa4>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	6922      	ldr	r2, [r4, #16]
 8005722:	f003 0306 	and.w	r3, r3, #6
 8005726:	2b04      	cmp	r3, #4
 8005728:	bf02      	ittt	eq
 800572a:	68e5      	ldreq	r5, [r4, #12]
 800572c:	6833      	ldreq	r3, [r6, #0]
 800572e:	1aed      	subeq	r5, r5, r3
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	bf0c      	ite	eq
 8005734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005738:	2500      	movne	r5, #0
 800573a:	4293      	cmp	r3, r2
 800573c:	bfc4      	itt	gt
 800573e:	1a9b      	subgt	r3, r3, r2
 8005740:	18ed      	addgt	r5, r5, r3
 8005742:	2600      	movs	r6, #0
 8005744:	341a      	adds	r4, #26
 8005746:	42b5      	cmp	r5, r6
 8005748:	d11a      	bne.n	8005780 <_printf_common+0xc8>
 800574a:	2000      	movs	r0, #0
 800574c:	e008      	b.n	8005760 <_printf_common+0xa8>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4649      	mov	r1, r9
 8005754:	4638      	mov	r0, r7
 8005756:	47c0      	blx	r8
 8005758:	3001      	adds	r0, #1
 800575a:	d103      	bne.n	8005764 <_printf_common+0xac>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005764:	3501      	adds	r5, #1
 8005766:	e7c6      	b.n	80056f6 <_printf_common+0x3e>
 8005768:	18e1      	adds	r1, r4, r3
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	2030      	movs	r0, #48	; 0x30
 800576e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005772:	4422      	add	r2, r4
 8005774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800577c:	3302      	adds	r3, #2
 800577e:	e7c7      	b.n	8005710 <_printf_common+0x58>
 8005780:	2301      	movs	r3, #1
 8005782:	4622      	mov	r2, r4
 8005784:	4649      	mov	r1, r9
 8005786:	4638      	mov	r0, r7
 8005788:	47c0      	blx	r8
 800578a:	3001      	adds	r0, #1
 800578c:	d0e6      	beq.n	800575c <_printf_common+0xa4>
 800578e:	3601      	adds	r6, #1
 8005790:	e7d9      	b.n	8005746 <_printf_common+0x8e>
	...

08005794 <_printf_i>:
 8005794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	7e0f      	ldrb	r7, [r1, #24]
 800579a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800579c:	2f78      	cmp	r7, #120	; 0x78
 800579e:	4691      	mov	r9, r2
 80057a0:	4680      	mov	r8, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	469a      	mov	sl, r3
 80057a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057aa:	d807      	bhi.n	80057bc <_printf_i+0x28>
 80057ac:	2f62      	cmp	r7, #98	; 0x62
 80057ae:	d80a      	bhi.n	80057c6 <_printf_i+0x32>
 80057b0:	2f00      	cmp	r7, #0
 80057b2:	f000 80d4 	beq.w	800595e <_printf_i+0x1ca>
 80057b6:	2f58      	cmp	r7, #88	; 0x58
 80057b8:	f000 80c0 	beq.w	800593c <_printf_i+0x1a8>
 80057bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057c4:	e03a      	b.n	800583c <_printf_i+0xa8>
 80057c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ca:	2b15      	cmp	r3, #21
 80057cc:	d8f6      	bhi.n	80057bc <_printf_i+0x28>
 80057ce:	a101      	add	r1, pc, #4	; (adr r1, 80057d4 <_printf_i+0x40>)
 80057d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d4:	0800582d 	.word	0x0800582d
 80057d8:	08005841 	.word	0x08005841
 80057dc:	080057bd 	.word	0x080057bd
 80057e0:	080057bd 	.word	0x080057bd
 80057e4:	080057bd 	.word	0x080057bd
 80057e8:	080057bd 	.word	0x080057bd
 80057ec:	08005841 	.word	0x08005841
 80057f0:	080057bd 	.word	0x080057bd
 80057f4:	080057bd 	.word	0x080057bd
 80057f8:	080057bd 	.word	0x080057bd
 80057fc:	080057bd 	.word	0x080057bd
 8005800:	08005945 	.word	0x08005945
 8005804:	0800586d 	.word	0x0800586d
 8005808:	080058ff 	.word	0x080058ff
 800580c:	080057bd 	.word	0x080057bd
 8005810:	080057bd 	.word	0x080057bd
 8005814:	08005967 	.word	0x08005967
 8005818:	080057bd 	.word	0x080057bd
 800581c:	0800586d 	.word	0x0800586d
 8005820:	080057bd 	.word	0x080057bd
 8005824:	080057bd 	.word	0x080057bd
 8005828:	08005907 	.word	0x08005907
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	1d1a      	adds	r2, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	602a      	str	r2, [r5, #0]
 8005834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800583c:	2301      	movs	r3, #1
 800583e:	e09f      	b.n	8005980 <_printf_i+0x1ec>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	0607      	lsls	r7, r0, #24
 8005846:	f103 0104 	add.w	r1, r3, #4
 800584a:	6029      	str	r1, [r5, #0]
 800584c:	d501      	bpl.n	8005852 <_printf_i+0xbe>
 800584e:	681e      	ldr	r6, [r3, #0]
 8005850:	e003      	b.n	800585a <_printf_i+0xc6>
 8005852:	0646      	lsls	r6, r0, #25
 8005854:	d5fb      	bpl.n	800584e <_printf_i+0xba>
 8005856:	f9b3 6000 	ldrsh.w	r6, [r3]
 800585a:	2e00      	cmp	r6, #0
 800585c:	da03      	bge.n	8005866 <_printf_i+0xd2>
 800585e:	232d      	movs	r3, #45	; 0x2d
 8005860:	4276      	negs	r6, r6
 8005862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005866:	485a      	ldr	r0, [pc, #360]	; (80059d0 <_printf_i+0x23c>)
 8005868:	230a      	movs	r3, #10
 800586a:	e012      	b.n	8005892 <_printf_i+0xfe>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	6820      	ldr	r0, [r4, #0]
 8005870:	1d19      	adds	r1, r3, #4
 8005872:	6029      	str	r1, [r5, #0]
 8005874:	0605      	lsls	r5, r0, #24
 8005876:	d501      	bpl.n	800587c <_printf_i+0xe8>
 8005878:	681e      	ldr	r6, [r3, #0]
 800587a:	e002      	b.n	8005882 <_printf_i+0xee>
 800587c:	0641      	lsls	r1, r0, #25
 800587e:	d5fb      	bpl.n	8005878 <_printf_i+0xe4>
 8005880:	881e      	ldrh	r6, [r3, #0]
 8005882:	4853      	ldr	r0, [pc, #332]	; (80059d0 <_printf_i+0x23c>)
 8005884:	2f6f      	cmp	r7, #111	; 0x6f
 8005886:	bf0c      	ite	eq
 8005888:	2308      	moveq	r3, #8
 800588a:	230a      	movne	r3, #10
 800588c:	2100      	movs	r1, #0
 800588e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005892:	6865      	ldr	r5, [r4, #4]
 8005894:	60a5      	str	r5, [r4, #8]
 8005896:	2d00      	cmp	r5, #0
 8005898:	bfa2      	ittt	ge
 800589a:	6821      	ldrge	r1, [r4, #0]
 800589c:	f021 0104 	bicge.w	r1, r1, #4
 80058a0:	6021      	strge	r1, [r4, #0]
 80058a2:	b90e      	cbnz	r6, 80058a8 <_printf_i+0x114>
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	d04b      	beq.n	8005940 <_printf_i+0x1ac>
 80058a8:	4615      	mov	r5, r2
 80058aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ae:	fb03 6711 	mls	r7, r3, r1, r6
 80058b2:	5dc7      	ldrb	r7, [r0, r7]
 80058b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058b8:	4637      	mov	r7, r6
 80058ba:	42bb      	cmp	r3, r7
 80058bc:	460e      	mov	r6, r1
 80058be:	d9f4      	bls.n	80058aa <_printf_i+0x116>
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d10b      	bne.n	80058dc <_printf_i+0x148>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	07de      	lsls	r6, r3, #31
 80058c8:	d508      	bpl.n	80058dc <_printf_i+0x148>
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	6861      	ldr	r1, [r4, #4]
 80058ce:	4299      	cmp	r1, r3
 80058d0:	bfde      	ittt	le
 80058d2:	2330      	movle	r3, #48	; 0x30
 80058d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058dc:	1b52      	subs	r2, r2, r5
 80058de:	6122      	str	r2, [r4, #16]
 80058e0:	f8cd a000 	str.w	sl, [sp]
 80058e4:	464b      	mov	r3, r9
 80058e6:	aa03      	add	r2, sp, #12
 80058e8:	4621      	mov	r1, r4
 80058ea:	4640      	mov	r0, r8
 80058ec:	f7ff fee4 	bl	80056b8 <_printf_common>
 80058f0:	3001      	adds	r0, #1
 80058f2:	d14a      	bne.n	800598a <_printf_i+0x1f6>
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f8:	b004      	add	sp, #16
 80058fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	f043 0320 	orr.w	r3, r3, #32
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	4833      	ldr	r0, [pc, #204]	; (80059d4 <_printf_i+0x240>)
 8005908:	2778      	movs	r7, #120	; 0x78
 800590a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	6829      	ldr	r1, [r5, #0]
 8005912:	061f      	lsls	r7, r3, #24
 8005914:	f851 6b04 	ldr.w	r6, [r1], #4
 8005918:	d402      	bmi.n	8005920 <_printf_i+0x18c>
 800591a:	065f      	lsls	r7, r3, #25
 800591c:	bf48      	it	mi
 800591e:	b2b6      	uxthmi	r6, r6
 8005920:	07df      	lsls	r7, r3, #31
 8005922:	bf48      	it	mi
 8005924:	f043 0320 	orrmi.w	r3, r3, #32
 8005928:	6029      	str	r1, [r5, #0]
 800592a:	bf48      	it	mi
 800592c:	6023      	strmi	r3, [r4, #0]
 800592e:	b91e      	cbnz	r6, 8005938 <_printf_i+0x1a4>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	f023 0320 	bic.w	r3, r3, #32
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	2310      	movs	r3, #16
 800593a:	e7a7      	b.n	800588c <_printf_i+0xf8>
 800593c:	4824      	ldr	r0, [pc, #144]	; (80059d0 <_printf_i+0x23c>)
 800593e:	e7e4      	b.n	800590a <_printf_i+0x176>
 8005940:	4615      	mov	r5, r2
 8005942:	e7bd      	b.n	80058c0 <_printf_i+0x12c>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	6826      	ldr	r6, [r4, #0]
 8005948:	6961      	ldr	r1, [r4, #20]
 800594a:	1d18      	adds	r0, r3, #4
 800594c:	6028      	str	r0, [r5, #0]
 800594e:	0635      	lsls	r5, r6, #24
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	d501      	bpl.n	8005958 <_printf_i+0x1c4>
 8005954:	6019      	str	r1, [r3, #0]
 8005956:	e002      	b.n	800595e <_printf_i+0x1ca>
 8005958:	0670      	lsls	r0, r6, #25
 800595a:	d5fb      	bpl.n	8005954 <_printf_i+0x1c0>
 800595c:	8019      	strh	r1, [r3, #0]
 800595e:	2300      	movs	r3, #0
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	4615      	mov	r5, r2
 8005964:	e7bc      	b.n	80058e0 <_printf_i+0x14c>
 8005966:	682b      	ldr	r3, [r5, #0]
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	681d      	ldr	r5, [r3, #0]
 800596e:	6862      	ldr	r2, [r4, #4]
 8005970:	2100      	movs	r1, #0
 8005972:	4628      	mov	r0, r5
 8005974:	f7fa fc34 	bl	80001e0 <memchr>
 8005978:	b108      	cbz	r0, 800597e <_printf_i+0x1ea>
 800597a:	1b40      	subs	r0, r0, r5
 800597c:	6060      	str	r0, [r4, #4]
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	2300      	movs	r3, #0
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005988:	e7aa      	b.n	80058e0 <_printf_i+0x14c>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	462a      	mov	r2, r5
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d0ad      	beq.n	80058f4 <_printf_i+0x160>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	079b      	lsls	r3, r3, #30
 800599c:	d413      	bmi.n	80059c6 <_printf_i+0x232>
 800599e:	68e0      	ldr	r0, [r4, #12]
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	4298      	cmp	r0, r3
 80059a4:	bfb8      	it	lt
 80059a6:	4618      	movlt	r0, r3
 80059a8:	e7a6      	b.n	80058f8 <_printf_i+0x164>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4632      	mov	r2, r6
 80059ae:	4649      	mov	r1, r9
 80059b0:	4640      	mov	r0, r8
 80059b2:	47d0      	blx	sl
 80059b4:	3001      	adds	r0, #1
 80059b6:	d09d      	beq.n	80058f4 <_printf_i+0x160>
 80059b8:	3501      	adds	r5, #1
 80059ba:	68e3      	ldr	r3, [r4, #12]
 80059bc:	9903      	ldr	r1, [sp, #12]
 80059be:	1a5b      	subs	r3, r3, r1
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	dcf2      	bgt.n	80059aa <_printf_i+0x216>
 80059c4:	e7eb      	b.n	800599e <_printf_i+0x20a>
 80059c6:	2500      	movs	r5, #0
 80059c8:	f104 0619 	add.w	r6, r4, #25
 80059cc:	e7f5      	b.n	80059ba <_printf_i+0x226>
 80059ce:	bf00      	nop
 80059d0:	08005b91 	.word	0x08005b91
 80059d4:	08005ba2 	.word	0x08005ba2

080059d8 <memmove>:
 80059d8:	4288      	cmp	r0, r1
 80059da:	b510      	push	{r4, lr}
 80059dc:	eb01 0402 	add.w	r4, r1, r2
 80059e0:	d902      	bls.n	80059e8 <memmove+0x10>
 80059e2:	4284      	cmp	r4, r0
 80059e4:	4623      	mov	r3, r4
 80059e6:	d807      	bhi.n	80059f8 <memmove+0x20>
 80059e8:	1e43      	subs	r3, r0, #1
 80059ea:	42a1      	cmp	r1, r4
 80059ec:	d008      	beq.n	8005a00 <memmove+0x28>
 80059ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059f6:	e7f8      	b.n	80059ea <memmove+0x12>
 80059f8:	4402      	add	r2, r0
 80059fa:	4601      	mov	r1, r0
 80059fc:	428a      	cmp	r2, r1
 80059fe:	d100      	bne.n	8005a02 <memmove+0x2a>
 8005a00:	bd10      	pop	{r4, pc}
 8005a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a0a:	e7f7      	b.n	80059fc <memmove+0x24>

08005a0c <memcpy>:
 8005a0c:	440a      	add	r2, r1
 8005a0e:	4291      	cmp	r1, r2
 8005a10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a14:	d100      	bne.n	8005a18 <memcpy+0xc>
 8005a16:	4770      	bx	lr
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a22:	4291      	cmp	r1, r2
 8005a24:	d1f9      	bne.n	8005a1a <memcpy+0xe>
 8005a26:	bd10      	pop	{r4, pc}

08005a28 <_realloc_r>:
 8005a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4614      	mov	r4, r2
 8005a30:	460e      	mov	r6, r1
 8005a32:	b921      	cbnz	r1, 8005a3e <_realloc_r+0x16>
 8005a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	4611      	mov	r1, r2
 8005a3a:	f7ff bba9 	b.w	8005190 <_malloc_r>
 8005a3e:	b92a      	cbnz	r2, 8005a4c <_realloc_r+0x24>
 8005a40:	f7ff fc96 	bl	8005370 <_free_r>
 8005a44:	4625      	mov	r5, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a4c:	f000 f81b 	bl	8005a86 <_malloc_usable_size_r>
 8005a50:	4284      	cmp	r4, r0
 8005a52:	4607      	mov	r7, r0
 8005a54:	d802      	bhi.n	8005a5c <_realloc_r+0x34>
 8005a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a5a:	d812      	bhi.n	8005a82 <_realloc_r+0x5a>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4640      	mov	r0, r8
 8005a60:	f7ff fb96 	bl	8005190 <_malloc_r>
 8005a64:	4605      	mov	r5, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0ed      	beq.n	8005a46 <_realloc_r+0x1e>
 8005a6a:	42bc      	cmp	r4, r7
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	4631      	mov	r1, r6
 8005a70:	bf28      	it	cs
 8005a72:	463a      	movcs	r2, r7
 8005a74:	f7ff ffca 	bl	8005a0c <memcpy>
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	f7ff fc78 	bl	8005370 <_free_r>
 8005a80:	e7e1      	b.n	8005a46 <_realloc_r+0x1e>
 8005a82:	4635      	mov	r5, r6
 8005a84:	e7df      	b.n	8005a46 <_realloc_r+0x1e>

08005a86 <_malloc_usable_size_r>:
 8005a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8a:	1f18      	subs	r0, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bfbc      	itt	lt
 8005a90:	580b      	ldrlt	r3, [r1, r0]
 8005a92:	18c0      	addlt	r0, r0, r3
 8005a94:	4770      	bx	lr
	...

08005a98 <_init>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr

08005aa4 <_fini>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr
