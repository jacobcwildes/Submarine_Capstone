
controller_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff8  08005ff8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006000  08006000  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  08006070  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006070  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000edda  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002269  00000000  00000000  0002eeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00031120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a3  00000000  00000000  00031dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024485  00000000  00000000  00032763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3d5  00000000  00000000  00056be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e006d  00000000  00000000  00064fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b4c  00000000  00000000  0014502c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00148b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ee0 	.word	0x08005ee0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005ee0 	.word	0x08005ee0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <configure_channel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void configure_channel(uint16_t channel, uint16_t rank)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	4613      	mov	r3, r2
 800058a:	80bb      	strh	r3, [r7, #4]
	//Configure the ADC channel and rank for single sample conversion
	ADC_ChannelConfTypeDef sConfig = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	615a      	str	r2, [r3, #20]
	sConfig.Channel = channel;
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = rank;
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	4619      	mov	r1, r3
 80005b0:	4806      	ldr	r0, [pc, #24]	; (80005cc <configure_channel+0x50>)
 80005b2:	f001 f9bd 	bl	8001930 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <configure_channel+0x46>
	{
		printf("Failed to configure channel \n\r");
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <configure_channel+0x54>)
 80005be:	f004 fe1b 	bl	80051f8 <iprintf>
	}
}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000084 	.word	0x20000084
 80005d0:	08005ef8 	.word	0x08005ef8

080005d4 <adc_fetch_sample>:

uint8_t adc_fetch_sample(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	//Start the ADC, poll for conversion, and then return the result
	uint8_t result;

	if(HAL_ADC_Start(&hadc1) !=HAL_OK)
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <adc_fetch_sample+0x54>)
 80005dc:	f001 f876 	bl	80016cc <HAL_ADC_Start>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <adc_fetch_sample+0x18>
	{
		printf("Failed to start ADC for single sample \n\r");
 80005e6:	4811      	ldr	r0, [pc, #68]	; (800062c <adc_fetch_sample+0x58>)
 80005e8:	f004 fe06 	bl	80051f8 <iprintf>
	}

	if(HAL_ADC_PollForConversion(&hadc1, 100u) != HAL_OK)
 80005ec:	2164      	movs	r1, #100	; 0x64
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <adc_fetch_sample+0x54>)
 80005f0:	f001 f902 	bl	80017f8 <HAL_ADC_PollForConversion>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <adc_fetch_sample+0x2c>
	{
		printf("ADC conversion incomplete \n\r");
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <adc_fetch_sample+0x5c>)
 80005fc:	f004 fdfc 	bl	80051f8 <iprintf>
	}

	result = HAL_ADC_GetValue(&hadc1);
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <adc_fetch_sample+0x54>)
 8000602:	f001 f988 	bl	8001916 <HAL_ADC_GetValue>
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]

	if(HAL_ADC_Stop(&hadc1) != HAL_OK)
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <adc_fetch_sample+0x54>)
 800060c:	f001 f8c1 	bl	8001792 <HAL_ADC_Stop>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <adc_fetch_sample+0x48>
	{
		printf("Failed to stop ADC \n\r");
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <adc_fetch_sample+0x60>)
 8000618:	f004 fdee 	bl	80051f8 <iprintf>
	}

	return result;
 800061c:	79fb      	ldrb	r3, [r7, #7]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000084 	.word	0x20000084
 800062c:	08005f18 	.word	0x08005f18
 8000630:	08005f44 	.word	0x08005f44
 8000634:	08005f64 	.word	0x08005f64

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
	};

	struct data transmissionData;

	//Initialize structure variables to nothing
	transmissionData.leftToggleUD = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	733b      	strb	r3, [r7, #12]
	transmissionData.leftToggleLR = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	737b      	strb	r3, [r7, #13]
	transmissionData.rightToggleUD = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	73bb      	strb	r3, [r7, #14]
	transmissionData.rightToggleLR = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
	transmissionData.subDown = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	743b      	strb	r3, [r7, #16]
	transmissionData.subUp = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	747b      	strb	r3, [r7, #17]
	transmissionData.screenshot = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	74bb      	strb	r3, [r7, #18]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fc54 	bl	8000f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f889 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f9a3 	bl	80009ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000666:	f000 f8d7 	bl	8000818 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800066a:	f000 f96f 	bl	800094c <MX_USART2_UART_Init>
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_4);

  //Turn on Power LED

  //Increments during while loop to set channel
  uint8_t channel = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	75fb      	strb	r3, [r7, #23]
  //ADC channel with high priority
  uint8_t rank = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	75bb      	strb	r3, [r7, #22]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Poll data from GPIO pins and ADC channels 1-4
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) transmissionData.subUp = 1;
 8000676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f002 f9ff 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	d101      	bne.n	800068c <main+0x54>
 8000688:	2301      	movs	r3, #1
 800068a:	747b      	strb	r3, [r7, #17]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET) transmissionData.subDown = 1;
 800068c:	2120      	movs	r1, #32
 800068e:	4837      	ldr	r0, [pc, #220]	; (800076c <main+0x134>)
 8000690:	f002 f9f6 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d101      	bne.n	800069e <main+0x66>
 800069a:	2301      	movs	r3, #1
 800069c:	743b      	strb	r3, [r7, #16]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET) transmissionData.screenshot = 1;
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	4832      	ldr	r0, [pc, #200]	; (800076c <main+0x134>)
 80006a2:	f002 f9ed 	bl	8002a80 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d101      	bne.n	80006b0 <main+0x78>
 80006ac:	2301      	movs	r3, #1
 80006ae:	74bb      	strb	r3, [r7, #18]
		//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
		configure_channel(channel, rank);
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	7dba      	ldrb	r2, [r7, #22]
 80006b6:	b292      	uxth	r2, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff5e 	bl	800057c <configure_channel>
		transmissionData.leftToggleUD = adc_fetch_sample();
 80006c0:	f7ff ff88 	bl	80005d4 <adc_fetch_sample>
 80006c4:	4603      	mov	r3, r0
 80006c6:	733b      	strb	r3, [r7, #12]
		configure_channel(channel+1, rank);
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	3301      	adds	r3, #1
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	7dba      	ldrb	r2, [r7, #22]
 80006d2:	b292      	uxth	r2, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff50 	bl	800057c <configure_channel>
		transmissionData.leftToggleLR = adc_fetch_sample();
 80006dc:	f7ff ff7a 	bl	80005d4 <adc_fetch_sample>
 80006e0:	4603      	mov	r3, r0
 80006e2:	737b      	strb	r3, [r7, #13]
		configure_channel(channel+2, rank);
 80006e4:	7dfb      	ldrb	r3, [r7, #23]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	3302      	adds	r3, #2
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	7dba      	ldrb	r2, [r7, #22]
 80006ee:	b292      	uxth	r2, r2
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff42 	bl	800057c <configure_channel>
		transmissionData.rightToggleUD = adc_fetch_sample();
 80006f8:	f7ff ff6c 	bl	80005d4 <adc_fetch_sample>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73bb      	strb	r3, [r7, #14]
		configure_channel(channel+3, rank);
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	b29b      	uxth	r3, r3
 8000704:	3303      	adds	r3, #3
 8000706:	b29b      	uxth	r3, r3
 8000708:	7dba      	ldrb	r2, [r7, #22]
 800070a:	b292      	uxth	r2, r2
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff34 	bl	800057c <configure_channel>
		transmissionData.rightToggleLR = adc_fetch_sample();
 8000714:	f7ff ff5e 	bl	80005d4 <adc_fetch_sample>
 8000718:	4603      	mov	r3, r0
 800071a:	73fb      	strb	r3, [r7, #15]

		//Copy data from struct to buffer
		memcpy(buffer, &transmissionData, sizeof(transmissionData));
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	f107 020c 	add.w	r2, r7, #12
 8000722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000726:	6018      	str	r0, [r3, #0]
 8000728:	3304      	adds	r3, #4
 800072a:	8019      	strh	r1, [r3, #0]
 800072c:	3302      	adds	r3, #2
 800072e:	0c0a      	lsrs	r2, r1, #16
 8000730:	701a      	strb	r2, [r3, #0]

		//test
		//uint8_t test[27] = "Wobby \n\r";
		//Transmit Data
		if(HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 10) != HAL_OK)
 8000732:	1d39      	adds	r1, r7, #4
 8000734:	230a      	movs	r3, #10
 8000736:	2207      	movs	r2, #7
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <main+0x138>)
 800073a:	f003 fc33 	bl	8003fa4 <HAL_UART_Transmit>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d003      	beq.n	800074c <main+0x114>
		{
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <main+0x134>)
 8000748:	f002 f9ca 	bl	8002ae0 <HAL_GPIO_TogglePin>

		}
		//Reset everything to 0 once data is transmitted
		transmissionData.subUp = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	747b      	strb	r3, [r7, #17]
		transmissionData.subDown = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	743b      	strb	r3, [r7, #16]
		transmissionData.screenshot = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	74bb      	strb	r3, [r7, #18]
		transmissionData.leftToggleLR = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	737b      	strb	r3, [r7, #13]
		transmissionData.leftToggleUD = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	733b      	strb	r3, [r7, #12]
		transmissionData.rightToggleLR = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
		transmissionData.rightToggleUD = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	73bb      	strb	r3, [r7, #14]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) transmissionData.subUp = 1;
 8000768:	e785      	b.n	8000676 <main+0x3e>
 800076a:	bf00      	nop
 800076c:	48000400 	.word	0x48000400
 8000770:	200000ec 	.word	0x200000ec

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b096      	sub	sp, #88	; 0x58
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2244      	movs	r2, #68	; 0x44
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fd8d 	bl	80052a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f002 f9c9 	bl	8002b30 <HAL_PWREx_ControlVoltageScaling>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a4:	f000 f9a6 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ba:	2302      	movs	r3, #2
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007c2:	230a      	movs	r3, #10
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007c6:	2307      	movs	r3, #7
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 fa00 	bl	8002bdc <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007e2:	f000 f987 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2303      	movs	r3, #3
 80007ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	2104      	movs	r1, #4
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fe00 	bl	8003404 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800080a:	f000 f973 	bl	8000af4 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3758      	adds	r7, #88	; 0x58
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000830:	4a41      	ldr	r2, [pc, #260]	; (8000938 <MX_ADC1_Init+0x120>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <MX_ADC1_Init+0x11c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000840:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000846:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000848:	2201      	movs	r2, #1
 800084a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084c:	4b39      	ldr	r3, [pc, #228]	; (8000934 <MX_ADC1_Init+0x11c>)
 800084e:	2204      	movs	r2, #4
 8000850:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000854:	2200      	movs	r2, #0
 8000856:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000858:	4b36      	ldr	r3, [pc, #216]	; (8000934 <MX_ADC1_Init+0x11c>)
 800085a:	2201      	movs	r2, #1
 800085c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800085e:	4b35      	ldr	r3, [pc, #212]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000860:	2204      	movs	r2, #4
 8000862:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <MX_ADC1_Init+0x11c>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000874:	2200      	movs	r2, #0
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <MX_ADC1_Init+0x11c>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000882:	2200      	movs	r2, #0
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800088e:	4829      	ldr	r0, [pc, #164]	; (8000934 <MX_ADC1_Init+0x11c>)
 8000890:	f000 fdd6 	bl	8001440 <HAL_ADC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800089a:	f000 f92b 	bl	8000af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800089e:	4b27      	ldr	r3, [pc, #156]	; (800093c <MX_ADC1_Init+0x124>)
 80008a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a2:	2306      	movs	r3, #6
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008aa:	237f      	movs	r3, #127	; 0x7f
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ae:	2304      	movs	r3, #4
 80008b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	481e      	ldr	r0, [pc, #120]	; (8000934 <MX_ADC1_Init+0x11c>)
 80008bc:	f001 f838 	bl	8001930 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008c6:	f000 f915 	bl	8000af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ADC1_Init+0x128>)
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ce:	230c      	movs	r3, #12
 80008d0:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4816      	ldr	r0, [pc, #88]	; (8000934 <MX_ADC1_Init+0x11c>)
 80008dc:	f001 f828 	bl	8001930 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80008e6:	f000 f905 	bl	8000af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_ADC1_Init+0x12c>)
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008ee:	2312      	movs	r3, #18
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 3;
 80008f2:	2303      	movs	r3, #3
 80008f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <MX_ADC1_Init+0x11c>)
 80008fc:	f001 f818 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000906:	f000 f8f5 	bl	8000af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_ADC1_Init+0x130>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800090e:	2318      	movs	r3, #24
 8000910:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 4;
 8000912:	2304      	movs	r3, #4
 8000914:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_ADC1_Init+0x11c>)
 800091c:	f001 f808 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000926:	f000 f8e5 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000084 	.word	0x20000084
 8000938:	50040000 	.word	0x50040000
 800093c:	04300002 	.word	0x04300002
 8000940:	08600004 	.word	0x08600004
 8000944:	0c900008 	.word	0x0c900008
 8000948:	10c00010 	.word	0x10c00010

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <MX_USART2_UART_Init+0x5c>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART2_UART_Init+0x58>)
 8000990:	f003 faba 	bl	8003f08 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 f8ab 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000ec 	.word	0x200000ec
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b49      	ldr	r3, [pc, #292]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a48      	ldr	r2, [pc, #288]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a42      	ldr	r2, [pc, #264]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a3c      	ldr	r2, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b37      	ldr	r3, [pc, #220]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a36      	ldr	r2, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	21b0      	movs	r1, #176	; 0xb0
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f002 f841 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Power_LED_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <MX_GPIO_Init+0x140>)
 8000a36:	f002 f83b 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4827      	ldr	r0, [pc, #156]	; (8000af0 <MX_GPIO_Init+0x144>)
 8000a52:	f001 fe9b 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a56:	23b0      	movs	r3, #176	; 0xb0
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f001 fe8c 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f001 fe7f 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Power_LED_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Power_LED_Pin;
 8000a8e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4811      	ldr	r0, [pc, #68]	; (8000aec <MX_GPIO_Init+0x140>)
 8000aa8:	f001 fe70 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : Sub_Up_Pin */
  GPIO_InitStruct.Pin = Sub_Up_Pin;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sub_Up_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f001 fe62 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : Sub_Down_Pin Screenshot_Pin */
  GPIO_InitStruct.Pin = Sub_Down_Pin|Screenshot_Pin;
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_GPIO_Init+0x140>)
 8000adc:	f001 fe56 	bl	800278c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48000800 	.word	0x48000800

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_MspInit+0x44>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6613      	str	r3, [r2, #96]	; 0x60
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x44>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0a4      	sub	sp, #144	; 0x90
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2268      	movs	r2, #104	; 0x68
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fb9a 	bl	80052a2 <memset>
  if(hadc->Instance==ADC1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <HAL_ADC_MspInit+0xc4>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d144      	bne.n	8000c02 <HAL_ADC_MspInit+0xba>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b82:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b90:	2307      	movs	r3, #7
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fe50 	bl	800384c <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000bb2:	f7ff ff9f 	bl	8000af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_ADC_MspInit+0xc8>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0xc8>)
 8000bbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0xc8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_ADC_MspInit+0xc8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_ADC_MspInit+0xc8>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_ADC_MspInit+0xc8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Left_Toggle_UD_Pin|Left_Toggle_LR_Pin|Right_Toggle_UD_Pin|Right_Toggle_LR_Pin;
 8000be6:	230f      	movs	r3, #15
 8000be8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bea:	230b      	movs	r3, #11
 8000bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_ADC_MspInit+0xcc>)
 8000bfe:	f001 fdc5 	bl	800278c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3790      	adds	r7, #144	; 0x90
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	50040000 	.word	0x50040000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000800 	.word	0x48000800

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0a4      	sub	sp, #144	; 0x90
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2268      	movs	r2, #104	; 0x68
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fb32 	bl	80052a2 <memset>
  if(huart->Instance==USART2)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_UART_MspInit+0xc0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d142      	bne.n	8000cce <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fdf9 	bl	800384c <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c60:	f7ff ff48 	bl	8000af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c94:	230c      	movs	r3, #12
 8000c96:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000caa:	2307      	movs	r3, #7
 8000cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f001 fd67 	bl	800278c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2026      	movs	r0, #38	; 0x26
 8000cc4:	f001 fcad 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc8:	2026      	movs	r0, #38	; 0x26
 8000cca:	f001 fcc6 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3790      	adds	r7, #144	; 0x90
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 f940 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <USART2_IRQHandler+0x10>)
 8000d3a:	f003 f9bd 	bl	80040b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000ec 	.word	0x200000ec

08000d48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
  }

  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e009      	b.n	8000da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf1      	blt.n	8000d94 <_write+0x12>
  }
  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de2:	605a      	str	r2, [r3, #4]
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_isatty>:

int _isatty(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f004 fa74 	bl	8005340 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20028000 	.word	0x20028000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000174 	.word	0x20000174
 8000e8c:	200002c8 	.word	0x200002c8

08000e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f004 fa33 	bl	800534c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff fba7 	bl	8000638 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eec:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ef8:	08006008 	.word	0x08006008
  ldr r2, =_sbss
 8000efc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f00:	200002c8 	.word	0x200002c8

08000f04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_IRQHandler>

08000f06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f001 fb7b 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f80e 	bl	8000f38 <HAL_InitTick>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	e001      	b.n	8000f2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f28:	f7ff fdea 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_InitTick+0x6c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d023      	beq.n	8000f94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_InitTick+0x70>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_InitTick+0x6c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fb87 	bl	8002676 <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10f      	bne.n	8000f8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d809      	bhi.n	8000f88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	f001 fb51 	bl	8002622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_InitTick+0x74>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e007      	b.n	8000f98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e004      	b.n	8000f98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e001      	b.n	8000f98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000178 	.word	0x20000178

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000178 	.word	0x20000178

08000ff0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	609a      	str	r2, [r3, #8]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3360      	adds	r3, #96	; 0x60
 800106a:	461a      	mov	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <LL_ADC_SetOffset+0x44>)
 800107a:	4013      	ands	r3, r2
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	4313      	orrs	r3, r2
 8001088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001090:	bf00      	nop
 8001092:	371c      	adds	r7, #28
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	03fff000 	.word	0x03fff000

080010a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3360      	adds	r3, #96	; 0x60
 80010ae:	461a      	mov	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3360      	adds	r3, #96	; 0x60
 80010dc:	461a      	mov	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	615a      	str	r2, [r3, #20]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800114e:	b480      	push	{r7}
 8001150:	b087      	sub	sp, #28
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3330      	adds	r3, #48	; 0x30
 800115e:	461a      	mov	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	4413      	add	r3, r2
 800116c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	211f      	movs	r1, #31
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	401a      	ands	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	0e9b      	lsrs	r3, r3, #26
 8001186:	f003 011f 	and.w	r1, r3, #31
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b087      	sub	sp, #28
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3314      	adds	r3, #20
 80011b6:	461a      	mov	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	0e5b      	lsrs	r3, r3, #25
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	0d1b      	lsrs	r3, r3, #20
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	2107      	movs	r1, #7
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	0d1b      	lsrs	r3, r3, #20
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001214:	43db      	mvns	r3, r3
 8001216:	401a      	ands	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0318 	and.w	r3, r3, #24
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001220:	40d9      	lsrs	r1, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	400b      	ands	r3, r1
 8001226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800122a:	431a      	orrs	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	0007ffff 	.word	0x0007ffff

08001244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6093      	str	r3, [r2, #8]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800127c:	d101      	bne.n	8001282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f4:	f043 0201 	orr.w	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800131c:	f043 0202 	orr.w	r2, r3, #2
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <LL_ADC_IsEnabled+0x18>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <LL_ADC_IsEnabled+0x1a>
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b02      	cmp	r3, #2
 8001368:	d101      	bne.n	800136e <LL_ADC_IsDisableOngoing+0x18>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsDisableOngoing+0x1a>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001390:	f043 0204 	orr.w	r2, r3, #4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b8:	f043 0210 	orr.w	r2, r3, #16
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d101      	bne.n	80013e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001402:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001406:	f043 0220 	orr.w	r2, r3, #32
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b08      	cmp	r3, #8
 800142c:	d101      	bne.n	8001432 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e129      	b.n	80016ae <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fb6d 	bl	8000b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fef1 	bl	8001268 <LL_ADC_IsDeepPowerDownEnabled>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fed7 	bl	8001244 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff0c 	bl	80012b8 <LL_ADC_IsInternalRegulatorEnabled>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d115      	bne.n	80014d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fef0 	bl	8001290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014b0:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_ADC_Init+0x278>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	4a81      	ldr	r2, [pc, #516]	; (80016bc <HAL_ADC_Init+0x27c>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	3301      	adds	r3, #1
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff feee 	bl	80012b8 <LL_ADC_IsInternalRegulatorEnabled>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	f043 0210 	orr.w	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff62 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 8001508:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 80c2 	bne.w	800169c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 80be 	bne.w	800169c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001528:	f043 0202 	orr.w	r2, r3, #2
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fefb 	bl	8001330 <LL_ADC_IsEnabled>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10b      	bne.n	8001558 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001540:	485f      	ldr	r0, [pc, #380]	; (80016c0 <HAL_ADC_Init+0x280>)
 8001542:	f7ff fef5 	bl	8001330 <LL_ADC_IsEnabled>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4619      	mov	r1, r3
 8001552:	485c      	ldr	r0, [pc, #368]	; (80016c4 <HAL_ADC_Init+0x284>)
 8001554:	f7ff fd4c 	bl	8000ff0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7e5b      	ldrb	r3, [r3, #25]
 800155c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001562:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001568:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800156e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001576:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d106      	bne.n	8001594 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	3b01      	subs	r3, #1
 800158c:	045b      	lsls	r3, r3, #17
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	2b00      	cmp	r3, #0
 800159a:	d009      	beq.n	80015b0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <HAL_ADC_Init+0x288>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	69b9      	ldr	r1, [r7, #24]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff26 	bl	800141a <LL_ADC_INJ_IsConversionOngoing>
 80015ce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d140      	bne.n	8001658 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d13d      	bne.n	8001658 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e1b      	ldrb	r3, [r3, #24]
 80015e4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015e6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015fe:	f023 0306 	bic.w	r3, r3, #6
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	430b      	orrs	r3, r1
 800160a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001612:	2b01      	cmp	r3, #1
 8001614:	d118      	bne.n	8001648 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800162c:	4311      	orrs	r1, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001632:	4311      	orrs	r1, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001638:	430a      	orrs	r2, r1
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0201 	orr.w	r2, r2, #1
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	e007      	b.n	8001658 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10c      	bne.n	800167a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f023 010f 	bic.w	r1, r3, #15
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	1e5a      	subs	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
 8001678:	e007      	b.n	800168a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 020f 	bic.w	r2, r2, #15
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	659a      	str	r2, [r3, #88]	; 0x58
 800169a:	e007      	b.n	80016ac <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f043 0210 	orr.w	r2, r3, #16
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	053e2d63 	.word	0x053e2d63
 80016c0:	50040000 	.word	0x50040000
 80016c4:	50040300 	.word	0x50040300
 80016c8:	fff0c007 	.word	0xfff0c007

080016cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe77 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d14f      	bne.n	8001784 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_Start+0x26>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e04b      	b.n	800178a <HAL_ADC_Start+0xbe>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fdd0 	bl	80022a0 <ADC_Enable>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d137      	bne.n	800177a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172a:	d106      	bne.n	800173a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	f023 0206 	bic.w	r2, r3, #6
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	65da      	str	r2, [r3, #92]	; 0x5c
 8001738:	e002      	b.n	8001740 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	221c      	movs	r2, #28
 8001746:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001766:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe02 	bl	800137c <LL_ADC_REG_StartConversion>
 8001778:	e006      	b.n	8001788 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001782:	e001      	b.n	8001788 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001784:	2302      	movs	r3, #2
 8001786:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_Stop+0x16>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e023      	b.n	80017f0 <HAL_ADC_Stop+0x5e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80017b0:	2103      	movs	r1, #3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fcb8 	bl	8002128 <ADC_ConversionStop>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d111      	bne.n	80017e6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fdf2 	bl	80023ac <ADC_Disable>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d102      	bne.n	8001810 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800180a:	2308      	movs	r3, #8
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e010      	b.n	8001832 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	f043 0220 	orr.w	r2, r3, #32
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06f      	b.n	800190e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800182e:	2304      	movs	r3, #4
 8001830:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001832:	f7ff fbd1 	bl	8000fd8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001838:	e021      	b.n	800187e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001840:	d01d      	beq.n	800187e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001842:	f7ff fbc9 	bl	8000fd8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d302      	bcc.n	8001858 <HAL_ADC_PollForConversion+0x60>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d112      	bne.n	800187e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10b      	bne.n	800187e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	f043 0204 	orr.w	r2, r3, #4
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e047      	b.n	800190e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0d6      	beq.n	800183a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fc43 	bl	8001128 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01c      	beq.n	80018e2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7e5b      	ldrb	r3, [r3, #25]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d118      	bne.n	80018e2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d111      	bne.n	80018e2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f043 0201 	orr.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d104      	bne.n	80018fa <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2208      	movs	r2, #8
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e008      	b.n	800190c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	220c      	movs	r2, #12
 800190a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0b6      	sub	sp, #216	; 0xd8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x22>
 800194e:	2302      	movs	r3, #2
 8001950:	e3d5      	b.n	80020fe <HAL_ADC_ConfigChannel+0x7ce>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fd34 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 83ba 	bne.w	80020e0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d824      	bhi.n	80019c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	3b02      	subs	r3, #2
 8001982:	2b03      	cmp	r3, #3
 8001984:	d81b      	bhi.n	80019be <HAL_ADC_ConfigChannel+0x8e>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_ADC_ConfigChannel+0x5c>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019a5 	.word	0x080019a5
 8001994:	080019ad 	.word	0x080019ad
 8001998:	080019b5 	.word	0x080019b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800199c:	230c      	movs	r3, #12
 800199e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019a2:	e010      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80019a4:	2312      	movs	r3, #18
 80019a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019aa:	e00c      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80019ac:	2318      	movs	r3, #24
 80019ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019b2:	e008      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80019b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019bc:	e003      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80019be:	2306      	movs	r3, #6
 80019c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80019d4:	f7ff fbbb 	bl	800114e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fcf5 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 80019e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd15 	bl	800141a <LL_ADC_INJ_IsConversionOngoing>
 80019f0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 81bf 	bne.w	8001d7c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 81ba 	bne.w	8001d7c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a10:	d10f      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff fbc2 	bl	80011a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fb69 	bl	8001102 <LL_ADC_SetSamplingTimeCommonConfig>
 8001a30:	e00e      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6819      	ldr	r1, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f7ff fbb1 	bl	80011a6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fb59 	bl	8001102 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d00a      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a82:	f7ff fae9 	bl	8001058 <LL_ADC_SetOffset>
 8001a86:	e179      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fb06 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x184>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fafb 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	0e9b      	lsrs	r3, r3, #26
 8001aae:	f003 021f 	and.w	r2, r3, #31
 8001ab2:	e01e      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x1c2>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff faf0 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ad2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e004      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001ae6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x1da>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0e9b      	lsrs	r3, r3, #26
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	e018      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x20c>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001b26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001b2e:	2320      	movs	r3, #32
 8001b30:	e004      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001b32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d106      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fabf 	bl	80010cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2101      	movs	r1, #1
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff faa3 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10a      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x24a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fa98 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	0e9b      	lsrs	r3, r3, #26
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	e01e      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x288>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fa8d 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001ba0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e004      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001bac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x2a0>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0e9b      	lsrs	r3, r3, #26
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	e018      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x2d2>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e004      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fa5c 	bl	80010cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2102      	movs	r1, #2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fa40 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x310>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fa35 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	f003 021f 	and.w	r2, r3, #31
 8001c3e:	e01e      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x34e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2102      	movs	r1, #2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fa2a 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e004      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d105      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x366>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0e9b      	lsrs	r3, r3, #26
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	e014      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x390>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ca6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	e004      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d106      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2102      	movs	r1, #2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f9fd 	bl	80010cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f9e1 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x3ce>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2103      	movs	r1, #3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f9d6 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	0e9b      	lsrs	r3, r3, #26
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	e017      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x3fe>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2103      	movs	r1, #3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff f9cb 	bl	80010a0 <LL_ADC_GetOffsetChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d18:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001d20:	2320      	movs	r3, #32
 8001d22:	e003      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x416>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	e011      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x43a>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d56:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	e003      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d106      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	2103      	movs	r1, #3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f9a8 	bl	80010cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fad5 	bl	8001330 <LL_ADC_IsEnabled>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 813f 	bne.w	800200c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f7ff fa2e 	bl	80011fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a8e      	ldr	r2, [pc, #568]	; (8001fe0 <HAL_ADC_ConfigChannel+0x6b0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f040 8130 	bne.w	800200c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10b      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x4a4>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	2b09      	cmp	r3, #9
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	e019      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x4d8>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	e003      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2b09      	cmp	r3, #9
 8001e00:	bf94      	ite	ls
 8001e02:	2301      	movls	r3, #1
 8001e04:	2300      	movhi	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d079      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x4f8>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e9b      	lsrs	r3, r3, #26
 8001e1e:	3301      	adds	r3, #1
 8001e20:	069b      	lsls	r3, r3, #26
 8001e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e26:	e015      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x524>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e38:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e003      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	069b      	lsls	r3, r3, #26
 8001e50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x544>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0e9b      	lsrs	r3, r3, #26
 8001e66:	3301      	adds	r3, #1
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	e017      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x574>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e003      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	ea42 0103 	orr.w	r1, r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x59a>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0e9b      	lsrs	r3, r3, #26
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	051b      	lsls	r3, r3, #20
 8001ec8:	e018      	b.n	8001efc <HAL_ADC_ConfigChannel+0x5cc>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e003      	b.n	8001eee <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001efc:	430b      	orrs	r3, r1
 8001efe:	e080      	b.n	8002002 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x5ec>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0e9b      	lsrs	r3, r3, #26
 8001f12:	3301      	adds	r3, #1
 8001f14:	069b      	lsls	r3, r3, #26
 8001f16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1a:	e015      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x618>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e003      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	069b      	lsls	r3, r3, #26
 8001f44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x638>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	e017      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x668>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	61bb      	str	r3, [r7, #24]
  return result;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e003      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	ea42 0103 	orr.w	r1, r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x694>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b1e      	subs	r3, #30
 8001fbc:	051b      	lsls	r3, r3, #20
 8001fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	e01d      	b.n	8002000 <HAL_ADC_ConfigChannel+0x6d0>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	60fb      	str	r3, [r7, #12]
  return result;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e005      	b.n	8001fec <HAL_ADC_ConfigChannel+0x6bc>
 8001fe0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f003 021f 	and.w	r2, r3, #31
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b1e      	subs	r3, #30
 8001ffa:	051b      	lsls	r3, r3, #20
 8001ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002000:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002006:	4619      	mov	r1, r3
 8002008:	f7ff f8cd 	bl	80011a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_ADC_ConfigChannel+0x7d8>)
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d06c      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002018:	483c      	ldr	r0, [pc, #240]	; (800210c <HAL_ADC_ConfigChannel+0x7dc>)
 800201a:	f7ff f80f 	bl	800103c <LL_ADC_GetCommonPathInternalCh>
 800201e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <HAL_ADC_ConfigChannel+0x7e0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d127      	bne.n	800207c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800202c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d121      	bne.n	800207c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a35      	ldr	r2, [pc, #212]	; (8002114 <HAL_ADC_ConfigChannel+0x7e4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d157      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002046:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800204a:	4619      	mov	r1, r3
 800204c:	482f      	ldr	r0, [pc, #188]	; (800210c <HAL_ADC_ConfigChannel+0x7dc>)
 800204e:	f7fe ffe2 	bl	8001016 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_ADC_ConfigChannel+0x7e8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	099b      	lsrs	r3, r3, #6
 8002058:	4a30      	ldr	r2, [pc, #192]	; (800211c <HAL_ADC_ConfigChannel+0x7ec>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	099b      	lsrs	r3, r3, #6
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800206c:	e002      	b.n	8002074 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3b01      	subs	r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f9      	bne.n	800206e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800207a:	e03a      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a27      	ldr	r2, [pc, #156]	; (8002120 <HAL_ADC_ConfigChannel+0x7f0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d113      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002086:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800208a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10d      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_ADC_ConfigChannel+0x7e4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d12a      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800209c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a4:	4619      	mov	r1, r3
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <HAL_ADC_ConfigChannel+0x7dc>)
 80020a8:	f7fe ffb5 	bl	8001016 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020ac:	e021      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_ADC_ConfigChannel+0x7f4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d11c      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d116      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_ADC_ConfigChannel+0x7e4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d111      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020d6:	4619      	mov	r1, r3
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <HAL_ADC_ConfigChannel+0x7dc>)
 80020da:	f7fe ff9c 	bl	8001016 <LL_ADC_SetCommonPathInternalCh>
 80020de:	e008      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80020fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	37d8      	adds	r7, #216	; 0xd8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	80080000 	.word	0x80080000
 800210c:	50040300 	.word	0x50040300
 8002110:	c7520000 	.word	0xc7520000
 8002114:	50040000 	.word	0x50040000
 8002118:	20000000 	.word	0x20000000
 800211c:	053e2d63 	.word	0x053e2d63
 8002120:	cb840000 	.word	0xcb840000
 8002124:	80000001 	.word	0x80000001

08002128 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f944 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 8002144:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f965 	bl	800141a <LL_ADC_INJ_IsConversionOngoing>
 8002150:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d103      	bne.n	8002160 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8098 	beq.w	8002290 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d02a      	beq.n	80021c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7e5b      	ldrb	r3, [r3, #25]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d126      	bne.n	80021c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7e1b      	ldrb	r3, [r3, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d122      	bne.n	80021c4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800217e:	2301      	movs	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002182:	e014      	b.n	80021ae <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4a45      	ldr	r2, [pc, #276]	; (800229c <ADC_ConversionStop+0x174>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d90d      	bls.n	80021a8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f043 0210 	orr.w	r2, r3, #16
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e074      	b.n	8002292 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d1e3      	bne.n	8002184 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2240      	movs	r2, #64	; 0x40
 80021c2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d014      	beq.n	80021f4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f8fc 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f8b9 	bl	8001356 <LL_ADC_IsDisableOngoing>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d104      	bne.n	80021f4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f8d8 	bl	80013a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d014      	beq.n	8002224 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f90b 	bl	800141a <LL_ADC_INJ_IsConversionOngoing>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00c      	beq.n	8002224 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f8a1 	bl	8001356 <LL_ADC_IsDisableOngoing>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d104      	bne.n	8002224 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f8e7 	bl	80013f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d005      	beq.n	8002236 <ADC_ConversionStop+0x10e>
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d105      	bne.n	800223c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002230:	230c      	movs	r3, #12
 8002232:	617b      	str	r3, [r7, #20]
        break;
 8002234:	e005      	b.n	8002242 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002236:	2308      	movs	r3, #8
 8002238:	617b      	str	r3, [r7, #20]
        break;
 800223a:	e002      	b.n	8002242 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800223c:	2304      	movs	r3, #4
 800223e:	617b      	str	r3, [r7, #20]
        break;
 8002240:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002242:	f7fe fec9 	bl	8000fd8 <HAL_GetTick>
 8002246:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002248:	e01b      	b.n	8002282 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800224a:	f7fe fec5 	bl	8000fd8 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b05      	cmp	r3, #5
 8002256:	d914      	bls.n	8002282 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e007      	b.n	8002292 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1dc      	bne.n	800224a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	a33fffff 	.word	0xa33fffff

080022a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff f83d 	bl	8001330 <LL_ADC_IsEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d169      	bne.n	8002390 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	4b36      	ldr	r3, [pc, #216]	; (800239c <ADC_Enable+0xfc>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e055      	b.n	8002392 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fff8 	bl	80012e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022f0:	482b      	ldr	r0, [pc, #172]	; (80023a0 <ADC_Enable+0x100>)
 80022f2:	f7fe fea3 	bl	800103c <LL_ADC_GetCommonPathInternalCh>
 80022f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80022f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <ADC_Enable+0x104>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <ADC_Enable+0x108>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	099b      	lsrs	r3, r3, #6
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800231a:	e002      	b.n	8002322 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	3b01      	subs	r3, #1
 8002320:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f9      	bne.n	800231c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002328:	f7fe fe56 	bl	8000fd8 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800232e:	e028      	b.n	8002382 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fffb 	bl	8001330 <LL_ADC_IsEnabled>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe ffcb 	bl	80012e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800234a:	f7fe fe45 	bl	8000fd8 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d914      	bls.n	8002382 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d00d      	beq.n	8002382 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f043 0210 	orr.w	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e007      	b.n	8002392 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d1cf      	bne.n	8002330 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	8000003f 	.word	0x8000003f
 80023a0:	50040300 	.word	0x50040300
 80023a4:	20000000 	.word	0x20000000
 80023a8:	053e2d63 	.word	0x053e2d63

080023ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe ffcc 	bl	8001356 <LL_ADC_IsDisableOngoing>
 80023be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe ffb3 	bl	8001330 <LL_ADC_IsEnabled>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d047      	beq.n	8002460 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d144      	bne.n	8002460 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030d 	and.w	r3, r3, #13
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10c      	bne.n	80023fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff8d 	bl	8001308 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2203      	movs	r2, #3
 80023f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023f6:	f7fe fdef 	bl	8000fd8 <HAL_GetTick>
 80023fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023fc:	e029      	b.n	8002452 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e023      	b.n	8002462 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800241a:	f7fe fddd 	bl	8000fd8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d914      	bls.n	8002452 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e007      	b.n	8002462 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1dc      	bne.n	800241a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d008      	beq.n	80026b8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2204      	movs	r2, #4
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e022      	b.n	80026fe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 020e 	bic.w	r2, r2, #14
 80026c6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	f003 021c 	and.w	r2, r3, #28
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d005      	beq.n	800272e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2204      	movs	r2, #4
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e029      	b.n	8002782 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 020e 	bic.w	r2, r2, #14
 800273c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f003 021c 	and.w	r2, r3, #28
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
    }
  }
  return status;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279a:	e154      	b.n	8002a46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2101      	movs	r1, #1
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8146 	beq.w	8002a40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d005      	beq.n	80027cc <HAL_GPIO_Init+0x40>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d130      	bne.n	800282e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002802:	2201      	movs	r2, #1
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	f003 0201 	and.w	r2, r3, #1
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b03      	cmp	r3, #3
 8002838:	d017      	beq.n	800286a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d123      	bne.n	80028be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	08da      	lsrs	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3208      	adds	r2, #8
 800287e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	220f      	movs	r2, #15
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	08da      	lsrs	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3208      	adds	r2, #8
 80028b8:	6939      	ldr	r1, [r7, #16]
 80028ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0203 	and.w	r2, r3, #3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80a0 	beq.w	8002a40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002900:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <HAL_GPIO_Init+0x2d8>)
 8002902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002904:	4a57      	ldr	r2, [pc, #348]	; (8002a64 <HAL_GPIO_Init+0x2d8>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6613      	str	r3, [r2, #96]	; 0x60
 800290c:	4b55      	ldr	r3, [pc, #340]	; (8002a64 <HAL_GPIO_Init+0x2d8>)
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002918:	4a53      	ldr	r2, [pc, #332]	; (8002a68 <HAL_GPIO_Init+0x2dc>)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002942:	d019      	beq.n	8002978 <HAL_GPIO_Init+0x1ec>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a49      	ldr	r2, [pc, #292]	; (8002a6c <HAL_GPIO_Init+0x2e0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_GPIO_Init+0x1e8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a48      	ldr	r2, [pc, #288]	; (8002a70 <HAL_GPIO_Init+0x2e4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00d      	beq.n	8002970 <HAL_GPIO_Init+0x1e4>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a47      	ldr	r2, [pc, #284]	; (8002a74 <HAL_GPIO_Init+0x2e8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <HAL_GPIO_Init+0x1e0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a46      	ldr	r2, [pc, #280]	; (8002a78 <HAL_GPIO_Init+0x2ec>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_GPIO_Init+0x1dc>
 8002964:	2304      	movs	r3, #4
 8002966:	e008      	b.n	800297a <HAL_GPIO_Init+0x1ee>
 8002968:	2307      	movs	r3, #7
 800296a:	e006      	b.n	800297a <HAL_GPIO_Init+0x1ee>
 800296c:	2303      	movs	r3, #3
 800296e:	e004      	b.n	800297a <HAL_GPIO_Init+0x1ee>
 8002970:	2302      	movs	r3, #2
 8002972:	e002      	b.n	800297a <HAL_GPIO_Init+0x1ee>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_GPIO_Init+0x1ee>
 8002978:	2300      	movs	r3, #0
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	f002 0203 	and.w	r2, r2, #3
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	4093      	lsls	r3, r2
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800298a:	4937      	ldr	r1, [pc, #220]	; (8002a68 <HAL_GPIO_Init+0x2dc>)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002998:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029bc:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029e6:	4a25      	ldr	r2, [pc, #148]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029ec:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a10:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f aea3 	bne.w	800279c <HAL_GPIO_Init+0x10>
  }
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	48000400 	.word	0x48000400
 8002a70:	48000800 	.word	0x48000800
 8002a74:	48000c00 	.word	0x48000c00
 8002a78:	48001000 	.word	0x48001000
 8002a7c:	40010400 	.word	0x40010400

08002a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e001      	b.n	8002aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	43d9      	mvns	r1, r3
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	400b      	ands	r3, r1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40007000 	.word	0x40007000

08002b30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3e:	d130      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d038      	beq.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2232      	movs	r2, #50	; 0x32
 8002b64:	fb02 f303 	mul.w	r3, r2, r3
 8002b68:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9b      	lsrs	r3, r3, #18
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b74:	e002      	b.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b88:	d102      	bne.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f2      	bne.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	d110      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e00f      	b.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d007      	beq.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bb8:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	431bde83 	.word	0x431bde83

08002bdc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f000 bc02 	b.w	80033f4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf0:	4b96      	ldr	r3, [pc, #600]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bfa:	4b94      	ldr	r3, [pc, #592]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80e4 	beq.w	8002dda <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4c>
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	f040 808b 	bne.w	8002d36 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	f040 8087 	bne.w	8002d36 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c28:	4b88      	ldr	r3, [pc, #544]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_OscConfig+0x64>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e3d9      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <HAL_RCC_OscConfig+0x7e>
 8002c50:	4b7e      	ldr	r3, [pc, #504]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c58:	e005      	b.n	8002c66 <HAL_RCC_OscConfig+0x8a>
 8002c5a:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d223      	bcs.n	8002cb2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fd8c 	bl	800378c <RCC_SetFlashLatencyFromMSIRange>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e3ba      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7e:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a72      	ldr	r2, [pc, #456]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b70      	ldr	r3, [pc, #448]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	496d      	ldr	r1, [pc, #436]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	4968      	ldr	r1, [pc, #416]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	e025      	b.n	8002cfe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cb2:	4b66      	ldr	r3, [pc, #408]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a65      	ldr	r2, [pc, #404]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cb8:	f043 0308 	orr.w	r3, r3, #8
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4960      	ldr	r1, [pc, #384]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cd0:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	495b      	ldr	r1, [pc, #364]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fd4c 	bl	800378c <RCC_SetFlashLatencyFromMSIRange>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e37a      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cfe:	f000 fc81 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b51      	ldr	r3, [pc, #324]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	4950      	ldr	r1, [pc, #320]	; (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d10:	5ccb      	ldrb	r3, [r1, r3]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a4e      	ldr	r2, [pc, #312]	; (8002e54 <HAL_RCC_OscConfig+0x278>)
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f908 	bl	8000f38 <HAL_InitTick>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d052      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	e35e      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d032      	beq.n	8002da4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d3e:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f945 	bl	8000fd8 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d52:	f7fe f941 	bl	8000fd8 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e347      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d64:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a35      	ldr	r2, [pc, #212]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b33      	ldr	r3, [pc, #204]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4930      	ldr	r1, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	492b      	ldr	r1, [pc, #172]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
 8002da2:	e01a      	b.n	8002dda <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a28      	ldr	r2, [pc, #160]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002db0:	f7fe f912 	bl	8000fd8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002db8:	f7fe f90e 	bl	8000fd8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e314      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x1dc>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d073      	beq.n	8002ece <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_OscConfig+0x21c>
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d10e      	bne.n	8002e10 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d10b      	bne.n	8002e10 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d063      	beq.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d15f      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e2f1      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e18:	d106      	bne.n	8002e28 <HAL_RCC_OscConfig+0x24c>
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e025      	b.n	8002e74 <HAL_RCC_OscConfig+0x298>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e30:	d114      	bne.n	8002e5c <HAL_RCC_OscConfig+0x280>
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a02      	ldr	r2, [pc, #8]	; (8002e4c <HAL_RCC_OscConfig+0x270>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e013      	b.n	8002e74 <HAL_RCC_OscConfig+0x298>
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08005f7c 	.word	0x08005f7c
 8002e54:	20000000 	.word	0x20000000
 8002e58:	20000004 	.word	0x20000004
 8002e5c:	4ba0      	ldr	r3, [pc, #640]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a9f      	ldr	r2, [pc, #636]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b9d      	ldr	r3, [pc, #628]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a9c      	ldr	r2, [pc, #624]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe f8ac 	bl	8000fd8 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7fe f8a8 	bl	8000fd8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e2ae      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e96:	4b92      	ldr	r3, [pc, #584]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x2a8>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f898 	bl	8000fd8 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe f894 	bl	8000fd8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e29a      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ebe:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x2d0>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d060      	beq.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x310>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d119      	bne.n	8002f1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d116      	bne.n	8002f1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eec:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_OscConfig+0x328>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e277      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	4973      	ldr	r1, [pc, #460]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	e040      	b.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d023      	beq.n	8002f6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f22:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe f853 	bl	8000fd8 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fe f84f 	bl	8000fd8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e255      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f48:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f54:	4b62      	ldr	r3, [pc, #392]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	495f      	ldr	r1, [pc, #380]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e018      	b.n	8002f9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5c      	ldr	r2, [pc, #368]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fe f82f 	bl	8000fd8 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7e:	f7fe f82b 	bl	8000fd8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e231      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d03c      	beq.n	8003022 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01c      	beq.n	8002fea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb6:	4a4a      	ldr	r2, [pc, #296]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fe f80a 	bl	8000fd8 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7fe f806 	bl	8000fd8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e20c      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ef      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3ec>
 8002fe8:	e01b      	b.n	8003022 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff0:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7fd ffed 	bl	8000fd8 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003002:	f7fd ffe9 	bl	8000fd8 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1ef      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003014:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ef      	bne.n	8003002 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80a6 	beq.w	800317c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	4a26      	ldr	r2, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 8003046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304a:	6593      	str	r3, [r2, #88]	; 0x58
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003058:	2301      	movs	r3, #1
 800305a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCC_OscConfig+0x508>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d118      	bne.n	800309a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_OscConfig+0x508>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_RCC_OscConfig+0x508>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003074:	f7fd ffb0 	bl	8000fd8 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307c:	f7fd ffac 	bl	8000fd8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e1b2      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x508>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d108      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4d8>
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	4a0d      	ldr	r2, [pc, #52]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b2:	e029      	b.n	8003108 <HAL_RCC_OscConfig+0x52c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d115      	bne.n	80030e8 <HAL_RCC_OscConfig+0x50c>
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <HAL_RCC_OscConfig+0x504>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030dc:	e014      	b.n	8003108 <HAL_RCC_OscConfig+0x52c>
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	4b9a      	ldr	r3, [pc, #616]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	4a99      	ldr	r2, [pc, #612]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f8:	4b96      	ldr	r3, [pc, #600]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a95      	ldr	r2, [pc, #596]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fd ff62 	bl	8000fd8 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fd ff5e 	bl	8000fd8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e162      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	4b89      	ldr	r3, [pc, #548]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ed      	beq.n	8003118 <HAL_RCC_OscConfig+0x53c>
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fd ff4b 	bl	8000fd8 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fd ff47 	bl	8000fd8 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e14b      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800315c:	4b7d      	ldr	r3, [pc, #500]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ed      	bne.n	8003146 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003170:	4b78      	ldr	r3, [pc, #480]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	4a77      	ldr	r2, [pc, #476]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03c      	beq.n	8003202 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01c      	beq.n	80031ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003190:	4b70      	ldr	r3, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003196:	4a6f      	ldr	r2, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fd ff1a 	bl	8000fd8 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031a8:	f7fd ff16 	bl	8000fd8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e11c      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ba:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80031bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ef      	beq.n	80031a8 <HAL_RCC_OscConfig+0x5cc>
 80031c8:	e01b      	b.n	8003202 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031ca:	4b62      	ldr	r3, [pc, #392]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80031cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d0:	4a60      	ldr	r2, [pc, #384]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fd fefd 	bl	8000fd8 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e2:	f7fd fef9 	bl	8000fd8 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0ff      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031f4:	4b57      	ldr	r3, [pc, #348]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80031f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ef      	bne.n	80031e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80f3 	beq.w	80033f2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	2b02      	cmp	r3, #2
 8003212:	f040 80c9 	bne.w	80033a8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003216:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	429a      	cmp	r2, r3
 8003228:	d12c      	bne.n	8003284 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	3b01      	subs	r3, #1
 8003236:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d123      	bne.n	8003284 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d11b      	bne.n	8003284 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d113      	bne.n	8003284 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	3b01      	subs	r3, #1
 800326a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d109      	bne.n	8003284 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d06b      	beq.n	800335c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d062      	beq.n	8003350 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0ac      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80032a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032a6:	f7fd fe97 	bl	8000fd8 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fd fe93 	bl	8000fd8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e099      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b21      	ldr	r3, [pc, #132]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032dc:	3a01      	subs	r2, #1
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	4311      	orrs	r1, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032e6:	0212      	lsls	r2, r2, #8
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ee:	0852      	lsrs	r2, r2, #1
 80032f0:	3a01      	subs	r2, #1
 80032f2:	0552      	lsls	r2, r2, #21
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032fa:	0852      	lsrs	r2, r2, #1
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0652      	lsls	r2, r2, #25
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003306:	06d2      	lsls	r2, r2, #27
 8003308:	430a      	orrs	r2, r1
 800330a:	4912      	ldr	r1, [pc, #72]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 800330c:	4313      	orrs	r3, r2
 800330e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a0c      	ldr	r2, [pc, #48]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003328:	f7fd fe56 	bl	8000fd8 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fe52 	bl	8000fd8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e058      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_RCC_OscConfig+0x778>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800334e:	e050      	b.n	80033f2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e04f      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
 8003354:	40021000 	.word	0x40021000
 8003358:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d144      	bne.n	80033f2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003368:	4b24      	ldr	r3, [pc, #144]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003372:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003374:	4b21      	ldr	r3, [pc, #132]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003380:	f7fd fe2a 	bl	8000fd8 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fd fe26 	bl	8000fd8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e02c      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x7ac>
 80033a6:	e024      	b.n	80033f2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d01f      	beq.n	80033ee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 80033b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fd fe0d 	bl	8000fd8 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fd fe09 	bl	8000fd8 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e00f      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f0      	bne.n	80033c2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	4905      	ldr	r1, [pc, #20]	; (80033fc <HAL_RCC_OscConfig+0x820>)
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_RCC_OscConfig+0x824>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	60cb      	str	r3, [r1, #12]
 80033ec:	e001      	b.n	80033f2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	feeefffc 	.word	0xfeeefffc

08003404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0e7      	b.n	80035e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b75      	ldr	r3, [pc, #468]	; (80035f0 <HAL_RCC_ClockConfig+0x1ec>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d910      	bls.n	8003448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b72      	ldr	r3, [pc, #456]	; (80035f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 0207 	bic.w	r2, r3, #7
 800342e:	4970      	ldr	r1, [pc, #448]	; (80035f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0cf      	b.n	80035e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003460:	429a      	cmp	r2, r3
 8003462:	d908      	bls.n	8003476 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4960      	ldr	r1, [pc, #384]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d04c      	beq.n	800351c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	4b5a      	ldr	r3, [pc, #360]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d121      	bne.n	80034da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0a6      	b.n	80035e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a2:	4b54      	ldr	r3, [pc, #336]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d115      	bne.n	80034da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e09a      	b.n	80035e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ba:	4b4e      	ldr	r3, [pc, #312]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e08e      	b.n	80035e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ca:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e086      	b.n	80035e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034da:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4943      	ldr	r1, [pc, #268]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ec:	f7fd fd74 	bl	8000fd8 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7fd fd70 	bl	8000fd8 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e06e      	b.n	80035e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 020c 	and.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	429a      	cmp	r2, r3
 800351a:	d1eb      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003534:	429a      	cmp	r2, r3
 8003536:	d208      	bcs.n	800354a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	492b      	ldr	r1, [pc, #172]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800354a:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_ClockConfig+0x1ec>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d210      	bcs.n	800357a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCC_ClockConfig+0x1ec>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 0207 	bic.w	r2, r3, #7
 8003560:	4923      	ldr	r1, [pc, #140]	; (80035f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_RCC_ClockConfig+0x1ec>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d001      	beq.n	800357a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e036      	b.n	80035e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	4918      	ldr	r1, [pc, #96]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	4313      	orrs	r3, r2
 8003596:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d009      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4910      	ldr	r1, [pc, #64]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035b8:	f000 f824 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	490b      	ldr	r1, [pc, #44]	; (80035f8 <HAL_RCC_ClockConfig+0x1f4>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
 80035d4:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1f8>)
 80035d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1fc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fcab 	bl	8000f38 <HAL_InitTick>
 80035e2:	4603      	mov	r3, r0
 80035e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80035e6:	7afb      	ldrb	r3, [r7, #11]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40022000 	.word	0x40022000
 80035f4:	40021000 	.word	0x40021000
 80035f8:	08005f7c 	.word	0x08005f7c
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800361c:	4b3b      	ldr	r3, [pc, #236]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x34>
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d121      	bne.n	8003676 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d11e      	bne.n	8003676 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003638:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003644:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 8003646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	e005      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003654:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003660:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003668:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10d      	bne.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003674:	e00a      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d102      	bne.n	8003682 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_GetSysClockFreq+0x110>)
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	e004      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d101      	bne.n	800368c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003688:	4b23      	ldr	r3, [pc, #140]	; (8003718 <HAL_RCC_GetSysClockFreq+0x114>)
 800368a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d134      	bne.n	80036fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003692:	4b1e      	ldr	r3, [pc, #120]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0xa6>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d003      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0xac>
 80036a8:	e005      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_RCC_GetSysClockFreq+0x110>)
 80036ac:	617b      	str	r3, [r7, #20]
      break;
 80036ae:	e005      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_GetSysClockFreq+0x114>)
 80036b2:	617b      	str	r3, [r7, #20]
      break;
 80036b4:	e002      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	617b      	str	r3, [r7, #20]
      break;
 80036ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	3301      	adds	r3, #1
 80036c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	fb03 f202 	mul.w	r2, r3, r2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_RCC_GetSysClockFreq+0x108>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	0e5b      	lsrs	r3, r3, #25
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	3301      	adds	r3, #1
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036fc:	69bb      	ldr	r3, [r7, #24]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	08005f94 	.word	0x08005f94
 8003714:	00f42400 	.word	0x00f42400
 8003718:	007a1200 	.word	0x007a1200

0800371c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCC_GetHCLKFreq+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000000 	.word	0x20000000

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003738:	f7ff fff0 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4904      	ldr	r1, [pc, #16]	; (800375c <HAL_RCC_GetPCLK1Freq+0x28>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	08005f8c 	.word	0x08005f8c

08003760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003764:	f7ff ffda 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x24>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0adb      	lsrs	r3, r3, #11
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4904      	ldr	r1, [pc, #16]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	08005f8c 	.word	0x08005f8c

0800378c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003794:	2300      	movs	r3, #0
 8003796:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037a4:	f7ff f9b6 	bl	8002b14 <HAL_PWREx_GetVoltageRange>
 80037a8:	6178      	str	r0, [r7, #20]
 80037aa:	e014      	b.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	4a24      	ldr	r2, [pc, #144]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6593      	str	r3, [r2, #88]	; 0x58
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037c4:	f7ff f9a6 	bl	8002b14 <HAL_PWREx_GetVoltageRange>
 80037c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d10b      	bne.n	80037f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b80      	cmp	r3, #128	; 0x80
 80037e2:	d919      	bls.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2ba0      	cmp	r3, #160	; 0xa0
 80037e8:	d902      	bls.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037ea:	2302      	movs	r3, #2
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e013      	b.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037f0:	2301      	movs	r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	e010      	b.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d902      	bls.n	8003802 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037fc:	2303      	movs	r3, #3
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e00a      	b.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d102      	bne.n	800380e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003808:	2302      	movs	r3, #2
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	e004      	b.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b70      	cmp	r3, #112	; 0x70
 8003812:	d101      	bne.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003814:	2301      	movs	r3, #1
 8003816:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 0207 	bic.w	r2, r3, #7
 8003820:	4909      	ldr	r1, [pc, #36]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	40022000 	.word	0x40022000

0800384c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003854:	2300      	movs	r3, #0
 8003856:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003858:	2300      	movs	r3, #0
 800385a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003864:	2b00      	cmp	r3, #0
 8003866:	d031      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003870:	d01a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003872:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003876:	d814      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800387c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003880:	d10f      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003882:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4a5c      	ldr	r2, [pc, #368]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800388e:	e00c      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fa44 	bl	8003d24 <RCCEx_PLLSAI1_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038a0:	e003      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	74fb      	strb	r3, [r7, #19]
      break;
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10b      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b0:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	494e      	ldr	r1, [pc, #312]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038c6:	e001      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 809e 	beq.w	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b40      	ldr	r3, [pc, #256]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	4a3f      	ldr	r2, [pc, #252]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003900:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390c:	2301      	movs	r3, #1
 800390e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003910:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a39      	ldr	r2, [pc, #228]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800391c:	f7fd fb5c 	bl	8000fd8 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003922:	e009      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003924:	f7fd fb58 	bl	8000fd8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	74fb      	strb	r3, [r7, #19]
        break;
 8003936:	e005      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ef      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d15a      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800394a:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003954:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01e      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	429a      	cmp	r2, r3
 8003964:	d019      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003970:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003972:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800398a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003992:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d016      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fd fb18 	bl	8000fd8 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039aa:	e00b      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fd fb14 	bl	8000fd8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d902      	bls.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	74fb      	strb	r3, [r7, #19]
            break;
 80039c2:	e006      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ec      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e6:	4904      	ldr	r1, [pc, #16]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039ee:	e009      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	74bb      	strb	r3, [r7, #18]
 80039f4:	e006      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a04:	7c7b      	ldrb	r3, [r7, #17]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0a:	4b9e      	ldr	r3, [pc, #632]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	4a9d      	ldr	r2, [pc, #628]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a22:	4b98      	ldr	r3, [pc, #608]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f023 0203 	bic.w	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4994      	ldr	r1, [pc, #592]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a44:	4b8f      	ldr	r3, [pc, #572]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f023 020c 	bic.w	r2, r3, #12
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	498c      	ldr	r1, [pc, #560]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a66:	4b87      	ldr	r3, [pc, #540]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	4983      	ldr	r1, [pc, #524]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a88:	4b7e      	ldr	r3, [pc, #504]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	497b      	ldr	r1, [pc, #492]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aaa:	4b76      	ldr	r3, [pc, #472]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4972      	ldr	r1, [pc, #456]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003acc:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	496a      	ldr	r1, [pc, #424]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aee:	4b65      	ldr	r3, [pc, #404]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	4961      	ldr	r1, [pc, #388]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b10:	4b5c      	ldr	r3, [pc, #368]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	4959      	ldr	r1, [pc, #356]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b32:	4b54      	ldr	r3, [pc, #336]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	4950      	ldr	r1, [pc, #320]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b54:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	4948      	ldr	r1, [pc, #288]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b76:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b7c:	f023 0203 	bic.w	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	493f      	ldr	r1, [pc, #252]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d028      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b98:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	4937      	ldr	r1, [pc, #220]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb8:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a31      	ldr	r2, [pc, #196]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc2:	60d3      	str	r3, [r2, #12]
 8003bc4:	e011      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bce:	d10c      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f8a4 	bl	8003d24 <RCCEx_PLLSAI1_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d028      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bf6:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	491f      	ldr	r1, [pc, #124]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c20:	60d3      	str	r3, [r2, #12]
 8003c22:	e011      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2101      	movs	r1, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 f875 	bl	8003d24 <RCCEx_PLLSAI1_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02b      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	4908      	ldr	r1, [pc, #32]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c72:	d109      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a02      	ldr	r2, [pc, #8]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7e:	60d3      	str	r3, [r2, #12]
 8003c80:	e014      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3304      	adds	r3, #4
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f843 	bl	8003d24 <RCCEx_PLLSAI1_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01c      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	4916      	ldr	r1, [pc, #88]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f820 	bl	8003d24 <RCCEx_PLLSAI1_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	4904      	ldr	r1, [pc, #16]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000

08003d24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d32:	4b74      	ldr	r3, [pc, #464]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d3e:	4b71      	ldr	r3, [pc, #452]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0203 	and.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d10d      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
       ||
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d56:	4b6b      	ldr	r3, [pc, #428]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
       ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d047      	beq.n	8003dfa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
 8003d6e:	e044      	b.n	8003dfa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d018      	beq.n	8003daa <RCCEx_PLLSAI1_Config+0x86>
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d825      	bhi.n	8003dc8 <RCCEx_PLLSAI1_Config+0xa4>
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d002      	beq.n	8003d86 <RCCEx_PLLSAI1_Config+0x62>
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d009      	beq.n	8003d98 <RCCEx_PLLSAI1_Config+0x74>
 8003d84:	e020      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d86:	4b5f      	ldr	r3, [pc, #380]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d11d      	bne.n	8003dce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d96:	e01a      	b.n	8003dce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d98:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d116      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da8:	e013      	b.n	8003dd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003daa:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10f      	bne.n	8003dd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003db6:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dc6:	e006      	b.n	8003dd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e004      	b.n	8003dd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10d      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dde:	4b49      	ldr	r3, [pc, #292]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	430b      	orrs	r3, r1
 8003df4:	4943      	ldr	r1, [pc, #268]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d17c      	bne.n	8003efa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e00:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0c:	f7fd f8e4 	bl	8000fd8 <HAL_GetTick>
 8003e10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e12:	e009      	b.n	8003e28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e14:	f7fd f8e0 	bl	8000fd8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d902      	bls.n	8003e28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73fb      	strb	r3, [r7, #15]
        break;
 8003e26:	e005      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e28:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ef      	bne.n	8003e14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d15f      	bne.n	8003efa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d110      	bne.n	8003e62 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e40:	4b30      	ldr	r3, [pc, #192]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6892      	ldr	r2, [r2, #8]
 8003e50:	0211      	lsls	r1, r2, #8
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68d2      	ldr	r2, [r2, #12]
 8003e56:	06d2      	lsls	r2, r2, #27
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	492a      	ldr	r1, [pc, #168]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	610b      	str	r3, [r1, #16]
 8003e60:	e027      	b.n	8003eb2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d112      	bne.n	8003e8e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e68:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6892      	ldr	r2, [r2, #8]
 8003e78:	0211      	lsls	r1, r2, #8
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6912      	ldr	r2, [r2, #16]
 8003e7e:	0852      	lsrs	r2, r2, #1
 8003e80:	3a01      	subs	r2, #1
 8003e82:	0552      	lsls	r2, r2, #21
 8003e84:	430a      	orrs	r2, r1
 8003e86:	491f      	ldr	r1, [pc, #124]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	610b      	str	r3, [r1, #16]
 8003e8c:	e011      	b.n	8003eb2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6892      	ldr	r2, [r2, #8]
 8003e9e:	0211      	lsls	r1, r2, #8
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6952      	ldr	r2, [r2, #20]
 8003ea4:	0852      	lsrs	r2, r2, #1
 8003ea6:	3a01      	subs	r2, #1
 8003ea8:	0652      	lsls	r2, r2, #25
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	4915      	ldr	r1, [pc, #84]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eb2:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ebc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fd f88b 	bl	8000fd8 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ec4:	e009      	b.n	8003eda <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ec6:	f7fd f887 	bl	8000fd8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d902      	bls.n	8003eda <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ed8:	e005      	b.n	8003ee6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ef      	beq.n	8003ec6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000

08003f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e040      	b.n	8003f9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fc fe74 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	; 0x24
 8003f34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fe42 	bl	8004bd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fbb9 	bl	80046cc <UART_SetConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e01b      	b.n	8003f9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fec1 	bl	8004d1c <UART_CheckIdleState>
 8003f9a:	4603      	mov	r3, r0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d178      	bne.n	80040ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Transmit+0x24>
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e071      	b.n	80040b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2221      	movs	r2, #33	; 0x21
 8003fd8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fda:	f7fc fffd 	bl	8000fd8 <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d108      	bne.n	800400c <HAL_UART_Transmit+0x68>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e003      	b.n	8004014 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004014:	e030      	b.n	8004078 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 ff23 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e03c      	b.n	80040b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	881a      	ldrh	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004048:	b292      	uxth	r2, r2
 800404a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	3302      	adds	r3, #2
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e008      	b.n	8004066 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b292      	uxth	r2, r2
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	3301      	adds	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1c8      	bne.n	8004016 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2200      	movs	r2, #0
 800408c:	2140      	movs	r1, #64	; 0x40
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 feec 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d004      	beq.n	80040a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e005      	b.n	80040b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b0ba      	sub	sp, #232	; 0xe8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80040e6:	4013      	ands	r3, r2
 80040e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80040ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d115      	bne.n	8004120 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00f      	beq.n	8004120 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 82ae 	beq.w	8004672 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4798      	blx	r3
      }
      return;
 800411e:	e2a8      	b.n	8004672 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8117 	beq.w	8004358 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004136:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800413a:	4b85      	ldr	r3, [pc, #532]	; (8004350 <HAL_UART_IRQHandler+0x298>)
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 810a 	beq.w	8004358 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d011      	beq.n	8004174 <HAL_UART_IRQHandler+0xbc>
 8004150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2201      	movs	r2, #1
 8004162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d011      	beq.n	80041a4 <HAL_UART_IRQHandler+0xec>
 8004180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2202      	movs	r2, #2
 8004192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419a:	f043 0204 	orr.w	r2, r3, #4
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d011      	beq.n	80041d4 <HAL_UART_IRQHandler+0x11c>
 80041b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2204      	movs	r2, #4
 80041c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ca:	f043 0202 	orr.w	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d105      	bne.n	80041f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2208      	movs	r2, #8
 80041fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004206:	f043 0208 	orr.w	r2, r3, #8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <HAL_UART_IRQHandler+0x18a>
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004238:	f043 0220 	orr.w	r2, r3, #32
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8214 	beq.w	8004676 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00d      	beq.n	8004276 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800428e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04f      	beq.n	800433a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fe4d 	bl	8004f3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d141      	bne.n	8004332 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3308      	adds	r3, #8
 80042b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1d9      	bne.n	80042ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d013      	beq.n	800432a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004306:	4a13      	ldr	r2, [pc, #76]	; (8004354 <HAL_UART_IRQHandler+0x29c>)
 8004308:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe f9fb 	bl	800270a <HAL_DMA_Abort_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d017      	beq.n	800434a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004324:	4610      	mov	r0, r2
 8004326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	e00f      	b.n	800434a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f9b8 	bl	80046a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	e00b      	b.n	800434a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9b4 	bl	80046a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e007      	b.n	800434a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9b0 	bl	80046a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004348:	e195      	b.n	8004676 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434a:	bf00      	nop
    return;
 800434c:	e193      	b.n	8004676 <HAL_UART_IRQHandler+0x5be>
 800434e:	bf00      	nop
 8004350:	04000120 	.word	0x04000120
 8004354:	08005003 	.word	0x08005003

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435c:	2b01      	cmp	r3, #1
 800435e:	f040 814e 	bne.w	80045fe <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8147 	beq.w	80045fe <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8140 	beq.w	80045fe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2210      	movs	r2, #16
 8004384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	f040 80b8 	bne.w	8004506 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8167 	beq.w	800467a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043b6:	429a      	cmp	r2, r3
 80043b8:	f080 815f 	bcs.w	800467a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 8086 	bne.w	80044e4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004406:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800440e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800441a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1da      	bne.n	80043d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004446:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800444a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800444e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e1      	bne.n	8004422 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800446e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3308      	adds	r3, #8
 800447e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004488:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e3      	bne.n	800445e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b4:	f023 0310 	bic.w	r3, r3, #16
 80044b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80044c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e4      	bne.n	80044a4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe f8d5 	bl	800268e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8d8 	bl	80046b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004504:	e0b9      	b.n	800467a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004512:	b29b      	uxth	r3, r3
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80ab 	beq.w	800467e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a6 	beq.w	800467e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
 8004556:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800455a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e4      	bne.n	8004532 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	623b      	str	r3, [r7, #32]
   return(result);
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3308      	adds	r3, #8
 8004588:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800458c:	633a      	str	r2, [r7, #48]	; 0x30
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e3      	bne.n	8004568 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 0310 	bic.w	r3, r3, #16
 80045c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	69b9      	ldr	r1, [r7, #24]
 80045dc:	69fa      	ldr	r2, [r7, #28]
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	617b      	str	r3, [r7, #20]
   return(result);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e4      	bne.n	80045b4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f85c 	bl	80046b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045fc:	e03f      	b.n	800467e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00e      	beq.n	8004628 <HAL_UART_IRQHandler+0x570>
 800460a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800461e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fd2e 	bl	8005082 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004626:	e02d      	b.n	8004684 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00e      	beq.n	8004652 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01c      	beq.n	8004682 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
    }
    return;
 8004650:	e017      	b.n	8004682 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d012      	beq.n	8004684 <HAL_UART_IRQHandler+0x5cc>
 800465e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fcdf 	bl	800502e <UART_EndTransmit_IT>
    return;
 8004670:	e008      	b.n	8004684 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004672:	bf00      	nop
 8004674:	e006      	b.n	8004684 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004676:	bf00      	nop
 8004678:	e004      	b.n	8004684 <HAL_UART_IRQHandler+0x5cc>
      return;
 800467a:	bf00      	nop
 800467c:	e002      	b.n	8004684 <HAL_UART_IRQHandler+0x5cc>
      return;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004682:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004684:	37e8      	adds	r7, #232	; 0xe8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop

0800468c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d0:	b08a      	sub	sp, #40	; 0x28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4ba5      	ldr	r3, [pc, #660]	; (8004990 <UART_SetConfig+0x2c4>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004704:	430b      	orrs	r3, r1
 8004706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a9a      	ldr	r2, [pc, #616]	; (8004994 <UART_SetConfig+0x2c8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d004      	beq.n	8004738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004734:	4313      	orrs	r3, r2
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a91      	ldr	r2, [pc, #580]	; (8004998 <UART_SetConfig+0x2cc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d126      	bne.n	80047a4 <UART_SetConfig+0xd8>
 8004756:	4b91      	ldr	r3, [pc, #580]	; (800499c <UART_SetConfig+0x2d0>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	2b03      	cmp	r3, #3
 8004762:	d81b      	bhi.n	800479c <UART_SetConfig+0xd0>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <UART_SetConfig+0xa0>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	0800477d 	.word	0x0800477d
 8004770:	0800478d 	.word	0x0800478d
 8004774:	08004785 	.word	0x08004785
 8004778:	08004795 	.word	0x08004795
 800477c:	2301      	movs	r3, #1
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e0d6      	b.n	8004932 <UART_SetConfig+0x266>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e0d2      	b.n	8004932 <UART_SetConfig+0x266>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e0ce      	b.n	8004932 <UART_SetConfig+0x266>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e0ca      	b.n	8004932 <UART_SetConfig+0x266>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e0c6      	b.n	8004932 <UART_SetConfig+0x266>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7d      	ldr	r2, [pc, #500]	; (80049a0 <UART_SetConfig+0x2d4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d138      	bne.n	8004820 <UART_SetConfig+0x154>
 80047ae:	4b7b      	ldr	r3, [pc, #492]	; (800499c <UART_SetConfig+0x2d0>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	d82d      	bhi.n	8004818 <UART_SetConfig+0x14c>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0xf8>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047f9 	.word	0x080047f9
 80047c8:	08004819 	.word	0x08004819
 80047cc:	08004819 	.word	0x08004819
 80047d0:	08004819 	.word	0x08004819
 80047d4:	08004809 	.word	0x08004809
 80047d8:	08004819 	.word	0x08004819
 80047dc:	08004819 	.word	0x08004819
 80047e0:	08004819 	.word	0x08004819
 80047e4:	08004801 	.word	0x08004801
 80047e8:	08004819 	.word	0x08004819
 80047ec:	08004819 	.word	0x08004819
 80047f0:	08004819 	.word	0x08004819
 80047f4:	08004811 	.word	0x08004811
 80047f8:	2300      	movs	r3, #0
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e098      	b.n	8004932 <UART_SetConfig+0x266>
 8004800:	2302      	movs	r3, #2
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e094      	b.n	8004932 <UART_SetConfig+0x266>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e090      	b.n	8004932 <UART_SetConfig+0x266>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e08c      	b.n	8004932 <UART_SetConfig+0x266>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481e:	e088      	b.n	8004932 <UART_SetConfig+0x266>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a5f      	ldr	r2, [pc, #380]	; (80049a4 <UART_SetConfig+0x2d8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d125      	bne.n	8004876 <UART_SetConfig+0x1aa>
 800482a:	4b5c      	ldr	r3, [pc, #368]	; (800499c <UART_SetConfig+0x2d0>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004834:	2b30      	cmp	r3, #48	; 0x30
 8004836:	d016      	beq.n	8004866 <UART_SetConfig+0x19a>
 8004838:	2b30      	cmp	r3, #48	; 0x30
 800483a:	d818      	bhi.n	800486e <UART_SetConfig+0x1a2>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d00a      	beq.n	8004856 <UART_SetConfig+0x18a>
 8004840:	2b20      	cmp	r3, #32
 8004842:	d814      	bhi.n	800486e <UART_SetConfig+0x1a2>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <UART_SetConfig+0x182>
 8004848:	2b10      	cmp	r3, #16
 800484a:	d008      	beq.n	800485e <UART_SetConfig+0x192>
 800484c:	e00f      	b.n	800486e <UART_SetConfig+0x1a2>
 800484e:	2300      	movs	r3, #0
 8004850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004854:	e06d      	b.n	8004932 <UART_SetConfig+0x266>
 8004856:	2302      	movs	r3, #2
 8004858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485c:	e069      	b.n	8004932 <UART_SetConfig+0x266>
 800485e:	2304      	movs	r3, #4
 8004860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004864:	e065      	b.n	8004932 <UART_SetConfig+0x266>
 8004866:	2308      	movs	r3, #8
 8004868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486c:	e061      	b.n	8004932 <UART_SetConfig+0x266>
 800486e:	2310      	movs	r3, #16
 8004870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004874:	e05d      	b.n	8004932 <UART_SetConfig+0x266>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a4b      	ldr	r2, [pc, #300]	; (80049a8 <UART_SetConfig+0x2dc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d125      	bne.n	80048cc <UART_SetConfig+0x200>
 8004880:	4b46      	ldr	r3, [pc, #280]	; (800499c <UART_SetConfig+0x2d0>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800488a:	2bc0      	cmp	r3, #192	; 0xc0
 800488c:	d016      	beq.n	80048bc <UART_SetConfig+0x1f0>
 800488e:	2bc0      	cmp	r3, #192	; 0xc0
 8004890:	d818      	bhi.n	80048c4 <UART_SetConfig+0x1f8>
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d00a      	beq.n	80048ac <UART_SetConfig+0x1e0>
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d814      	bhi.n	80048c4 <UART_SetConfig+0x1f8>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <UART_SetConfig+0x1d8>
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d008      	beq.n	80048b4 <UART_SetConfig+0x1e8>
 80048a2:	e00f      	b.n	80048c4 <UART_SetConfig+0x1f8>
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e042      	b.n	8004932 <UART_SetConfig+0x266>
 80048ac:	2302      	movs	r3, #2
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b2:	e03e      	b.n	8004932 <UART_SetConfig+0x266>
 80048b4:	2304      	movs	r3, #4
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ba:	e03a      	b.n	8004932 <UART_SetConfig+0x266>
 80048bc:	2308      	movs	r3, #8
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e036      	b.n	8004932 <UART_SetConfig+0x266>
 80048c4:	2310      	movs	r3, #16
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ca:	e032      	b.n	8004932 <UART_SetConfig+0x266>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a30      	ldr	r2, [pc, #192]	; (8004994 <UART_SetConfig+0x2c8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d12a      	bne.n	800492c <UART_SetConfig+0x260>
 80048d6:	4b31      	ldr	r3, [pc, #196]	; (800499c <UART_SetConfig+0x2d0>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048e4:	d01a      	beq.n	800491c <UART_SetConfig+0x250>
 80048e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048ea:	d81b      	bhi.n	8004924 <UART_SetConfig+0x258>
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f0:	d00c      	beq.n	800490c <UART_SetConfig+0x240>
 80048f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f6:	d815      	bhi.n	8004924 <UART_SetConfig+0x258>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <UART_SetConfig+0x238>
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004900:	d008      	beq.n	8004914 <UART_SetConfig+0x248>
 8004902:	e00f      	b.n	8004924 <UART_SetConfig+0x258>
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e012      	b.n	8004932 <UART_SetConfig+0x266>
 800490c:	2302      	movs	r3, #2
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004912:	e00e      	b.n	8004932 <UART_SetConfig+0x266>
 8004914:	2304      	movs	r3, #4
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491a:	e00a      	b.n	8004932 <UART_SetConfig+0x266>
 800491c:	2308      	movs	r3, #8
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004922:	e006      	b.n	8004932 <UART_SetConfig+0x266>
 8004924:	2310      	movs	r3, #16
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492a:	e002      	b.n	8004932 <UART_SetConfig+0x266>
 800492c:	2310      	movs	r3, #16
 800492e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a17      	ldr	r2, [pc, #92]	; (8004994 <UART_SetConfig+0x2c8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	f040 808b 	bne.w	8004a54 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800493e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004942:	2b08      	cmp	r3, #8
 8004944:	d834      	bhi.n	80049b0 <UART_SetConfig+0x2e4>
 8004946:	a201      	add	r2, pc, #4	; (adr r2, 800494c <UART_SetConfig+0x280>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	08004971 	.word	0x08004971
 8004950:	080049b1 	.word	0x080049b1
 8004954:	08004979 	.word	0x08004979
 8004958:	080049b1 	.word	0x080049b1
 800495c:	0800497f 	.word	0x0800497f
 8004960:	080049b1 	.word	0x080049b1
 8004964:	080049b1 	.word	0x080049b1
 8004968:	080049b1 	.word	0x080049b1
 800496c:	08004987 	.word	0x08004987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004970:	f7fe fee0 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8004974:	61f8      	str	r0, [r7, #28]
        break;
 8004976:	e021      	b.n	80049bc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <UART_SetConfig+0x2e0>)
 800497a:	61fb      	str	r3, [r7, #28]
        break;
 800497c:	e01e      	b.n	80049bc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe fe41 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8004982:	61f8      	str	r0, [r7, #28]
        break;
 8004984:	e01a      	b.n	80049bc <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498a:	61fb      	str	r3, [r7, #28]
        break;
 800498c:	e016      	b.n	80049bc <UART_SetConfig+0x2f0>
 800498e:	bf00      	nop
 8004990:	efff69f3 	.word	0xefff69f3
 8004994:	40008000 	.word	0x40008000
 8004998:	40013800 	.word	0x40013800
 800499c:	40021000 	.word	0x40021000
 80049a0:	40004400 	.word	0x40004400
 80049a4:	40004800 	.word	0x40004800
 80049a8:	40004c00 	.word	0x40004c00
 80049ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80fa 	beq.w	8004bb8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d305      	bcc.n	80049e0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049e6:	e0e7      	b.n	8004bb8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2200      	movs	r2, #0
 80049ec:	461c      	mov	r4, r3
 80049ee:	4615      	mov	r5, r2
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	022b      	lsls	r3, r5, #8
 80049fa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049fe:	0222      	lsls	r2, r4, #8
 8004a00:	68f9      	ldr	r1, [r7, #12]
 8004a02:	6849      	ldr	r1, [r1, #4]
 8004a04:	0849      	lsrs	r1, r1, #1
 8004a06:	2000      	movs	r0, #0
 8004a08:	4688      	mov	r8, r1
 8004a0a:	4681      	mov	r9, r0
 8004a0c:	eb12 0a08 	adds.w	sl, r2, r8
 8004a10:	eb43 0b09 	adc.w	fp, r3, r9
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a22:	4650      	mov	r0, sl
 8004a24:	4659      	mov	r1, fp
 8004a26:	f7fb fc2b 	bl	8000280 <__aeabi_uldivmod>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4613      	mov	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a38:	d308      	bcc.n	8004a4c <UART_SetConfig+0x380>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a40:	d204      	bcs.n	8004a4c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e0b5      	b.n	8004bb8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a52:	e0b1      	b.n	8004bb8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	d15d      	bne.n	8004b1a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d827      	bhi.n	8004ab6 <UART_SetConfig+0x3ea>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <UART_SetConfig+0x3a0>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004a99 	.word	0x08004a99
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004ab7 	.word	0x08004ab7
 8004a7c:	08004aa7 	.word	0x08004aa7
 8004a80:	08004ab7 	.word	0x08004ab7
 8004a84:	08004ab7 	.word	0x08004ab7
 8004a88:	08004ab7 	.word	0x08004ab7
 8004a8c:	08004aaf 	.word	0x08004aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a90:	f7fe fe50 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8004a94:	61f8      	str	r0, [r7, #28]
        break;
 8004a96:	e014      	b.n	8004ac2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe fe62 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	61f8      	str	r0, [r7, #28]
        break;
 8004a9e:	e010      	b.n	8004ac2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa0:	4b4c      	ldr	r3, [pc, #304]	; (8004bd4 <UART_SetConfig+0x508>)
 8004aa2:	61fb      	str	r3, [r7, #28]
        break;
 8004aa4:	e00d      	b.n	8004ac2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa6:	f7fe fdad 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8004aaa:	61f8      	str	r0, [r7, #28]
        break;
 8004aac:	e009      	b.n	8004ac2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab2:	61fb      	str	r3, [r7, #28]
        break;
 8004ab4:	e005      	b.n	8004ac2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d077      	beq.n	8004bb8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	005a      	lsls	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b0f      	cmp	r3, #15
 8004ae2:	d916      	bls.n	8004b12 <UART_SetConfig+0x446>
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aea:	d212      	bcs.n	8004b12 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f023 030f 	bic.w	r3, r3, #15
 8004af4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	085b      	lsrs	r3, r3, #1
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	8afa      	ldrh	r2, [r7, #22]
 8004b0e:	60da      	str	r2, [r3, #12]
 8004b10:	e052      	b.n	8004bb8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b18:	e04e      	b.n	8004bb8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d827      	bhi.n	8004b72 <UART_SetConfig+0x4a6>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <UART_SetConfig+0x45c>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b5d 	.word	0x08004b5d
 8004b34:	08004b73 	.word	0x08004b73
 8004b38:	08004b63 	.word	0x08004b63
 8004b3c:	08004b73 	.word	0x08004b73
 8004b40:	08004b73 	.word	0x08004b73
 8004b44:	08004b73 	.word	0x08004b73
 8004b48:	08004b6b 	.word	0x08004b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f7fe fdf2 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8004b50:	61f8      	str	r0, [r7, #28]
        break;
 8004b52:	e014      	b.n	8004b7e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b54:	f7fe fe04 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 8004b58:	61f8      	str	r0, [r7, #28]
        break;
 8004b5a:	e010      	b.n	8004b7e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <UART_SetConfig+0x508>)
 8004b5e:	61fb      	str	r3, [r7, #28]
        break;
 8004b60:	e00d      	b.n	8004b7e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b62:	f7fe fd4f 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 8004b66:	61f8      	str	r0, [r7, #28]
        break;
 8004b68:	e009      	b.n	8004b7e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6e:	61fb      	str	r3, [r7, #28]
        break;
 8004b70:	e005      	b.n	8004b7e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b7c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d019      	beq.n	8004bb8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	085a      	lsrs	r2, r3, #1
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	441a      	add	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b0f      	cmp	r3, #15
 8004b9c:	d909      	bls.n	8004bb2 <UART_SetConfig+0x4e6>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d205      	bcs.n	8004bb2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
 8004bb0:	e002      	b.n	8004bb8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3728      	adds	r7, #40	; 0x28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd2:	bf00      	nop
 8004bd4:	00f42400 	.word	0x00f42400

08004bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01a      	beq.n	8004cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd6:	d10a      	bne.n	8004cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b098      	sub	sp, #96	; 0x60
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d2c:	f7fc f954 	bl	8000fd8 <HAL_GetTick>
 8004d30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d12e      	bne.n	8004d9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f88c 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d021      	beq.n	8004d9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d78:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e062      	b.n	8004e64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d149      	bne.n	8004e40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f856 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d03c      	beq.n	8004e40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de4:	633b      	str	r3, [r7, #48]	; 0x30
 8004de6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e18:	61fa      	str	r2, [r7, #28]
 8004e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	69b9      	ldr	r1, [r7, #24]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	617b      	str	r3, [r7, #20]
   return(result);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e011      	b.n	8004e64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3758      	adds	r7, #88	; 0x58
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	e049      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e84:	d045      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fc f8a7 	bl	8000fd8 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e048      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d031      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d110      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f838 	bl	8004f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e029      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eec:	d111      	bne.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f81e 	bl	8004f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e00f      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d0a6      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b095      	sub	sp, #84	; 0x54
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f60:	643b      	str	r3, [r7, #64]	; 0x40
 8004f62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d118      	bne.n	8004fe2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0310 	bic.w	r3, r3, #16
 8004fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	613b      	str	r3, [r7, #16]
   return(result);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e6      	bne.n	8004fb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ff6:	bf00      	nop
 8004ff8:	3754      	adds	r7, #84	; 0x54
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff fb3d 	bl	80046a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b088      	sub	sp, #32
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	60bb      	str	r3, [r7, #8]
   return(result);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6979      	ldr	r1, [r7, #20]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	613b      	str	r3, [r7, #16]
   return(result);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e6      	bne.n	8005036 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fb09 	bl	800468c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507a:	bf00      	nop
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <std>:
 8005098:	2300      	movs	r3, #0
 800509a:	b510      	push	{r4, lr}
 800509c:	4604      	mov	r4, r0
 800509e:	e9c0 3300 	strd	r3, r3, [r0]
 80050a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050a6:	6083      	str	r3, [r0, #8]
 80050a8:	8181      	strh	r1, [r0, #12]
 80050aa:	6643      	str	r3, [r0, #100]	; 0x64
 80050ac:	81c2      	strh	r2, [r0, #14]
 80050ae:	6183      	str	r3, [r0, #24]
 80050b0:	4619      	mov	r1, r3
 80050b2:	2208      	movs	r2, #8
 80050b4:	305c      	adds	r0, #92	; 0x5c
 80050b6:	f000 f8f4 	bl	80052a2 <memset>
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <std+0x38>)
 80050bc:	6263      	str	r3, [r4, #36]	; 0x24
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <std+0x3c>)
 80050c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <std+0x40>)
 80050c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <std+0x44>)
 80050c8:	6224      	str	r4, [r4, #32]
 80050ca:	6323      	str	r3, [r4, #48]	; 0x30
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	bf00      	nop
 80050d0:	0800521d 	.word	0x0800521d
 80050d4:	0800523f 	.word	0x0800523f
 80050d8:	08005277 	.word	0x08005277
 80050dc:	0800529b 	.word	0x0800529b

080050e0 <stdio_exit_handler>:
 80050e0:	4a02      	ldr	r2, [pc, #8]	; (80050ec <stdio_exit_handler+0xc>)
 80050e2:	4903      	ldr	r1, [pc, #12]	; (80050f0 <stdio_exit_handler+0x10>)
 80050e4:	4803      	ldr	r0, [pc, #12]	; (80050f4 <stdio_exit_handler+0x14>)
 80050e6:	f000 b869 	b.w	80051bc <_fwalk_sglue>
 80050ea:	bf00      	nop
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	08005c3d 	.word	0x08005c3d
 80050f4:	20000018 	.word	0x20000018

080050f8 <cleanup_stdio>:
 80050f8:	6841      	ldr	r1, [r0, #4]
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <cleanup_stdio+0x34>)
 80050fc:	4299      	cmp	r1, r3
 80050fe:	b510      	push	{r4, lr}
 8005100:	4604      	mov	r4, r0
 8005102:	d001      	beq.n	8005108 <cleanup_stdio+0x10>
 8005104:	f000 fd9a 	bl	8005c3c <_fflush_r>
 8005108:	68a1      	ldr	r1, [r4, #8]
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <cleanup_stdio+0x38>)
 800510c:	4299      	cmp	r1, r3
 800510e:	d002      	beq.n	8005116 <cleanup_stdio+0x1e>
 8005110:	4620      	mov	r0, r4
 8005112:	f000 fd93 	bl	8005c3c <_fflush_r>
 8005116:	68e1      	ldr	r1, [r4, #12]
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <cleanup_stdio+0x3c>)
 800511a:	4299      	cmp	r1, r3
 800511c:	d004      	beq.n	8005128 <cleanup_stdio+0x30>
 800511e:	4620      	mov	r0, r4
 8005120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005124:	f000 bd8a 	b.w	8005c3c <_fflush_r>
 8005128:	bd10      	pop	{r4, pc}
 800512a:	bf00      	nop
 800512c:	2000017c 	.word	0x2000017c
 8005130:	200001e4 	.word	0x200001e4
 8005134:	2000024c 	.word	0x2000024c

08005138 <global_stdio_init.part.0>:
 8005138:	b510      	push	{r4, lr}
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <global_stdio_init.part.0+0x30>)
 800513c:	4c0b      	ldr	r4, [pc, #44]	; (800516c <global_stdio_init.part.0+0x34>)
 800513e:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <global_stdio_init.part.0+0x38>)
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	4620      	mov	r0, r4
 8005144:	2200      	movs	r2, #0
 8005146:	2104      	movs	r1, #4
 8005148:	f7ff ffa6 	bl	8005098 <std>
 800514c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005150:	2201      	movs	r2, #1
 8005152:	2109      	movs	r1, #9
 8005154:	f7ff ffa0 	bl	8005098 <std>
 8005158:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800515c:	2202      	movs	r2, #2
 800515e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005162:	2112      	movs	r1, #18
 8005164:	f7ff bf98 	b.w	8005098 <std>
 8005168:	200002b4 	.word	0x200002b4
 800516c:	2000017c 	.word	0x2000017c
 8005170:	080050e1 	.word	0x080050e1

08005174 <__sfp_lock_acquire>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__sfp_lock_acquire+0x8>)
 8005176:	f000 b90d 	b.w	8005394 <__retarget_lock_acquire_recursive>
 800517a:	bf00      	nop
 800517c:	200002bd 	.word	0x200002bd

08005180 <__sfp_lock_release>:
 8005180:	4801      	ldr	r0, [pc, #4]	; (8005188 <__sfp_lock_release+0x8>)
 8005182:	f000 b908 	b.w	8005396 <__retarget_lock_release_recursive>
 8005186:	bf00      	nop
 8005188:	200002bd 	.word	0x200002bd

0800518c <__sinit>:
 800518c:	b510      	push	{r4, lr}
 800518e:	4604      	mov	r4, r0
 8005190:	f7ff fff0 	bl	8005174 <__sfp_lock_acquire>
 8005194:	6a23      	ldr	r3, [r4, #32]
 8005196:	b11b      	cbz	r3, 80051a0 <__sinit+0x14>
 8005198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800519c:	f7ff bff0 	b.w	8005180 <__sfp_lock_release>
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <__sinit+0x28>)
 80051a2:	6223      	str	r3, [r4, #32]
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <__sinit+0x2c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f5      	bne.n	8005198 <__sinit+0xc>
 80051ac:	f7ff ffc4 	bl	8005138 <global_stdio_init.part.0>
 80051b0:	e7f2      	b.n	8005198 <__sinit+0xc>
 80051b2:	bf00      	nop
 80051b4:	080050f9 	.word	0x080050f9
 80051b8:	200002b4 	.word	0x200002b4

080051bc <_fwalk_sglue>:
 80051bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c0:	4607      	mov	r7, r0
 80051c2:	4688      	mov	r8, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	2600      	movs	r6, #0
 80051c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051cc:	f1b9 0901 	subs.w	r9, r9, #1
 80051d0:	d505      	bpl.n	80051de <_fwalk_sglue+0x22>
 80051d2:	6824      	ldr	r4, [r4, #0]
 80051d4:	2c00      	cmp	r4, #0
 80051d6:	d1f7      	bne.n	80051c8 <_fwalk_sglue+0xc>
 80051d8:	4630      	mov	r0, r6
 80051da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051de:	89ab      	ldrh	r3, [r5, #12]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d907      	bls.n	80051f4 <_fwalk_sglue+0x38>
 80051e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051e8:	3301      	adds	r3, #1
 80051ea:	d003      	beq.n	80051f4 <_fwalk_sglue+0x38>
 80051ec:	4629      	mov	r1, r5
 80051ee:	4638      	mov	r0, r7
 80051f0:	47c0      	blx	r8
 80051f2:	4306      	orrs	r6, r0
 80051f4:	3568      	adds	r5, #104	; 0x68
 80051f6:	e7e9      	b.n	80051cc <_fwalk_sglue+0x10>

080051f8 <iprintf>:
 80051f8:	b40f      	push	{r0, r1, r2, r3}
 80051fa:	b507      	push	{r0, r1, r2, lr}
 80051fc:	4906      	ldr	r1, [pc, #24]	; (8005218 <iprintf+0x20>)
 80051fe:	ab04      	add	r3, sp, #16
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	f853 2b04 	ldr.w	r2, [r3], #4
 8005206:	6881      	ldr	r1, [r0, #8]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	f000 f9e7 	bl	80055dc <_vfiprintf_r>
 800520e:	b003      	add	sp, #12
 8005210:	f85d eb04 	ldr.w	lr, [sp], #4
 8005214:	b004      	add	sp, #16
 8005216:	4770      	bx	lr
 8005218:	20000064 	.word	0x20000064

0800521c <__sread>:
 800521c:	b510      	push	{r4, lr}
 800521e:	460c      	mov	r4, r1
 8005220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005224:	f000 f868 	bl	80052f8 <_read_r>
 8005228:	2800      	cmp	r0, #0
 800522a:	bfab      	itete	ge
 800522c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800522e:	89a3      	ldrhlt	r3, [r4, #12]
 8005230:	181b      	addge	r3, r3, r0
 8005232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005236:	bfac      	ite	ge
 8005238:	6563      	strge	r3, [r4, #84]	; 0x54
 800523a:	81a3      	strhlt	r3, [r4, #12]
 800523c:	bd10      	pop	{r4, pc}

0800523e <__swrite>:
 800523e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005242:	461f      	mov	r7, r3
 8005244:	898b      	ldrh	r3, [r1, #12]
 8005246:	05db      	lsls	r3, r3, #23
 8005248:	4605      	mov	r5, r0
 800524a:	460c      	mov	r4, r1
 800524c:	4616      	mov	r6, r2
 800524e:	d505      	bpl.n	800525c <__swrite+0x1e>
 8005250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005254:	2302      	movs	r3, #2
 8005256:	2200      	movs	r2, #0
 8005258:	f000 f83c 	bl	80052d4 <_lseek_r>
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005266:	81a3      	strh	r3, [r4, #12]
 8005268:	4632      	mov	r2, r6
 800526a:	463b      	mov	r3, r7
 800526c:	4628      	mov	r0, r5
 800526e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005272:	f000 b853 	b.w	800531c <_write_r>

08005276 <__sseek>:
 8005276:	b510      	push	{r4, lr}
 8005278:	460c      	mov	r4, r1
 800527a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527e:	f000 f829 	bl	80052d4 <_lseek_r>
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	bf15      	itete	ne
 8005288:	6560      	strne	r0, [r4, #84]	; 0x54
 800528a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800528e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005292:	81a3      	strheq	r3, [r4, #12]
 8005294:	bf18      	it	ne
 8005296:	81a3      	strhne	r3, [r4, #12]
 8005298:	bd10      	pop	{r4, pc}

0800529a <__sclose>:
 800529a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529e:	f000 b809 	b.w	80052b4 <_close_r>

080052a2 <memset>:
 80052a2:	4402      	add	r2, r0
 80052a4:	4603      	mov	r3, r0
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d100      	bne.n	80052ac <memset+0xa>
 80052aa:	4770      	bx	lr
 80052ac:	f803 1b01 	strb.w	r1, [r3], #1
 80052b0:	e7f9      	b.n	80052a6 <memset+0x4>
	...

080052b4 <_close_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d06      	ldr	r5, [pc, #24]	; (80052d0 <_close_r+0x1c>)
 80052b8:	2300      	movs	r3, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fb fd7b 	bl	8000dba <_close>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_close_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_close_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	200002b8 	.word	0x200002b8

080052d4 <_lseek_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	; (80052f4 <_lseek_r+0x20>)
 80052d8:	4604      	mov	r4, r0
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fb fd90 	bl	8000e08 <_lseek>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_lseek_r+0x1e>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_lseek_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	200002b8 	.word	0x200002b8

080052f8 <_read_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d07      	ldr	r5, [pc, #28]	; (8005318 <_read_r+0x20>)
 80052fc:	4604      	mov	r4, r0
 80052fe:	4608      	mov	r0, r1
 8005300:	4611      	mov	r1, r2
 8005302:	2200      	movs	r2, #0
 8005304:	602a      	str	r2, [r5, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f7fb fd1e 	bl	8000d48 <_read>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_read_r+0x1e>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_read_r+0x1e>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	200002b8 	.word	0x200002b8

0800531c <_write_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d07      	ldr	r5, [pc, #28]	; (800533c <_write_r+0x20>)
 8005320:	4604      	mov	r4, r0
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	2200      	movs	r2, #0
 8005328:	602a      	str	r2, [r5, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f7fb fd29 	bl	8000d82 <_write>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_write_r+0x1e>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_write_r+0x1e>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	200002b8 	.word	0x200002b8

08005340 <__errno>:
 8005340:	4b01      	ldr	r3, [pc, #4]	; (8005348 <__errno+0x8>)
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000064 	.word	0x20000064

0800534c <__libc_init_array>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4d0d      	ldr	r5, [pc, #52]	; (8005384 <__libc_init_array+0x38>)
 8005350:	4c0d      	ldr	r4, [pc, #52]	; (8005388 <__libc_init_array+0x3c>)
 8005352:	1b64      	subs	r4, r4, r5
 8005354:	10a4      	asrs	r4, r4, #2
 8005356:	2600      	movs	r6, #0
 8005358:	42a6      	cmp	r6, r4
 800535a:	d109      	bne.n	8005370 <__libc_init_array+0x24>
 800535c:	4d0b      	ldr	r5, [pc, #44]	; (800538c <__libc_init_array+0x40>)
 800535e:	4c0c      	ldr	r4, [pc, #48]	; (8005390 <__libc_init_array+0x44>)
 8005360:	f000 fdbe 	bl	8005ee0 <_init>
 8005364:	1b64      	subs	r4, r4, r5
 8005366:	10a4      	asrs	r4, r4, #2
 8005368:	2600      	movs	r6, #0
 800536a:	42a6      	cmp	r6, r4
 800536c:	d105      	bne.n	800537a <__libc_init_array+0x2e>
 800536e:	bd70      	pop	{r4, r5, r6, pc}
 8005370:	f855 3b04 	ldr.w	r3, [r5], #4
 8005374:	4798      	blx	r3
 8005376:	3601      	adds	r6, #1
 8005378:	e7ee      	b.n	8005358 <__libc_init_array+0xc>
 800537a:	f855 3b04 	ldr.w	r3, [r5], #4
 800537e:	4798      	blx	r3
 8005380:	3601      	adds	r6, #1
 8005382:	e7f2      	b.n	800536a <__libc_init_array+0x1e>
 8005384:	08006000 	.word	0x08006000
 8005388:	08006000 	.word	0x08006000
 800538c:	08006000 	.word	0x08006000
 8005390:	08006004 	.word	0x08006004

08005394 <__retarget_lock_acquire_recursive>:
 8005394:	4770      	bx	lr

08005396 <__retarget_lock_release_recursive>:
 8005396:	4770      	bx	lr

08005398 <_free_r>:
 8005398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800539a:	2900      	cmp	r1, #0
 800539c:	d044      	beq.n	8005428 <_free_r+0x90>
 800539e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a2:	9001      	str	r0, [sp, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f1a1 0404 	sub.w	r4, r1, #4
 80053aa:	bfb8      	it	lt
 80053ac:	18e4      	addlt	r4, r4, r3
 80053ae:	f000 f8df 	bl	8005570 <__malloc_lock>
 80053b2:	4a1e      	ldr	r2, [pc, #120]	; (800542c <_free_r+0x94>)
 80053b4:	9801      	ldr	r0, [sp, #4]
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	b933      	cbnz	r3, 80053c8 <_free_r+0x30>
 80053ba:	6063      	str	r3, [r4, #4]
 80053bc:	6014      	str	r4, [r2, #0]
 80053be:	b003      	add	sp, #12
 80053c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053c4:	f000 b8da 	b.w	800557c <__malloc_unlock>
 80053c8:	42a3      	cmp	r3, r4
 80053ca:	d908      	bls.n	80053de <_free_r+0x46>
 80053cc:	6825      	ldr	r5, [r4, #0]
 80053ce:	1961      	adds	r1, r4, r5
 80053d0:	428b      	cmp	r3, r1
 80053d2:	bf01      	itttt	eq
 80053d4:	6819      	ldreq	r1, [r3, #0]
 80053d6:	685b      	ldreq	r3, [r3, #4]
 80053d8:	1949      	addeq	r1, r1, r5
 80053da:	6021      	streq	r1, [r4, #0]
 80053dc:	e7ed      	b.n	80053ba <_free_r+0x22>
 80053de:	461a      	mov	r2, r3
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	b10b      	cbz	r3, 80053e8 <_free_r+0x50>
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	d9fa      	bls.n	80053de <_free_r+0x46>
 80053e8:	6811      	ldr	r1, [r2, #0]
 80053ea:	1855      	adds	r5, r2, r1
 80053ec:	42a5      	cmp	r5, r4
 80053ee:	d10b      	bne.n	8005408 <_free_r+0x70>
 80053f0:	6824      	ldr	r4, [r4, #0]
 80053f2:	4421      	add	r1, r4
 80053f4:	1854      	adds	r4, r2, r1
 80053f6:	42a3      	cmp	r3, r4
 80053f8:	6011      	str	r1, [r2, #0]
 80053fa:	d1e0      	bne.n	80053be <_free_r+0x26>
 80053fc:	681c      	ldr	r4, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	6053      	str	r3, [r2, #4]
 8005402:	440c      	add	r4, r1
 8005404:	6014      	str	r4, [r2, #0]
 8005406:	e7da      	b.n	80053be <_free_r+0x26>
 8005408:	d902      	bls.n	8005410 <_free_r+0x78>
 800540a:	230c      	movs	r3, #12
 800540c:	6003      	str	r3, [r0, #0]
 800540e:	e7d6      	b.n	80053be <_free_r+0x26>
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	1961      	adds	r1, r4, r5
 8005414:	428b      	cmp	r3, r1
 8005416:	bf04      	itt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	6063      	str	r3, [r4, #4]
 800541e:	bf04      	itt	eq
 8005420:	1949      	addeq	r1, r1, r5
 8005422:	6021      	streq	r1, [r4, #0]
 8005424:	6054      	str	r4, [r2, #4]
 8005426:	e7ca      	b.n	80053be <_free_r+0x26>
 8005428:	b003      	add	sp, #12
 800542a:	bd30      	pop	{r4, r5, pc}
 800542c:	200002c0 	.word	0x200002c0

08005430 <sbrk_aligned>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	4e0e      	ldr	r6, [pc, #56]	; (800546c <sbrk_aligned+0x3c>)
 8005434:	460c      	mov	r4, r1
 8005436:	6831      	ldr	r1, [r6, #0]
 8005438:	4605      	mov	r5, r0
 800543a:	b911      	cbnz	r1, 8005442 <sbrk_aligned+0x12>
 800543c:	f000 fcbc 	bl	8005db8 <_sbrk_r>
 8005440:	6030      	str	r0, [r6, #0]
 8005442:	4621      	mov	r1, r4
 8005444:	4628      	mov	r0, r5
 8005446:	f000 fcb7 	bl	8005db8 <_sbrk_r>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	d00a      	beq.n	8005464 <sbrk_aligned+0x34>
 800544e:	1cc4      	adds	r4, r0, #3
 8005450:	f024 0403 	bic.w	r4, r4, #3
 8005454:	42a0      	cmp	r0, r4
 8005456:	d007      	beq.n	8005468 <sbrk_aligned+0x38>
 8005458:	1a21      	subs	r1, r4, r0
 800545a:	4628      	mov	r0, r5
 800545c:	f000 fcac 	bl	8005db8 <_sbrk_r>
 8005460:	3001      	adds	r0, #1
 8005462:	d101      	bne.n	8005468 <sbrk_aligned+0x38>
 8005464:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005468:	4620      	mov	r0, r4
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	200002c4 	.word	0x200002c4

08005470 <_malloc_r>:
 8005470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005474:	1ccd      	adds	r5, r1, #3
 8005476:	f025 0503 	bic.w	r5, r5, #3
 800547a:	3508      	adds	r5, #8
 800547c:	2d0c      	cmp	r5, #12
 800547e:	bf38      	it	cc
 8005480:	250c      	movcc	r5, #12
 8005482:	2d00      	cmp	r5, #0
 8005484:	4607      	mov	r7, r0
 8005486:	db01      	blt.n	800548c <_malloc_r+0x1c>
 8005488:	42a9      	cmp	r1, r5
 800548a:	d905      	bls.n	8005498 <_malloc_r+0x28>
 800548c:	230c      	movs	r3, #12
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	2600      	movs	r6, #0
 8005492:	4630      	mov	r0, r6
 8005494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005498:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800556c <_malloc_r+0xfc>
 800549c:	f000 f868 	bl	8005570 <__malloc_lock>
 80054a0:	f8d8 3000 	ldr.w	r3, [r8]
 80054a4:	461c      	mov	r4, r3
 80054a6:	bb5c      	cbnz	r4, 8005500 <_malloc_r+0x90>
 80054a8:	4629      	mov	r1, r5
 80054aa:	4638      	mov	r0, r7
 80054ac:	f7ff ffc0 	bl	8005430 <sbrk_aligned>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	4604      	mov	r4, r0
 80054b4:	d155      	bne.n	8005562 <_malloc_r+0xf2>
 80054b6:	f8d8 4000 	ldr.w	r4, [r8]
 80054ba:	4626      	mov	r6, r4
 80054bc:	2e00      	cmp	r6, #0
 80054be:	d145      	bne.n	800554c <_malloc_r+0xdc>
 80054c0:	2c00      	cmp	r4, #0
 80054c2:	d048      	beq.n	8005556 <_malloc_r+0xe6>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	4631      	mov	r1, r6
 80054c8:	4638      	mov	r0, r7
 80054ca:	eb04 0903 	add.w	r9, r4, r3
 80054ce:	f000 fc73 	bl	8005db8 <_sbrk_r>
 80054d2:	4581      	cmp	r9, r0
 80054d4:	d13f      	bne.n	8005556 <_malloc_r+0xe6>
 80054d6:	6821      	ldr	r1, [r4, #0]
 80054d8:	1a6d      	subs	r5, r5, r1
 80054da:	4629      	mov	r1, r5
 80054dc:	4638      	mov	r0, r7
 80054de:	f7ff ffa7 	bl	8005430 <sbrk_aligned>
 80054e2:	3001      	adds	r0, #1
 80054e4:	d037      	beq.n	8005556 <_malloc_r+0xe6>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	442b      	add	r3, r5
 80054ea:	6023      	str	r3, [r4, #0]
 80054ec:	f8d8 3000 	ldr.w	r3, [r8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d038      	beq.n	8005566 <_malloc_r+0xf6>
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	42a2      	cmp	r2, r4
 80054f8:	d12b      	bne.n	8005552 <_malloc_r+0xe2>
 80054fa:	2200      	movs	r2, #0
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	e00f      	b.n	8005520 <_malloc_r+0xb0>
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	1b52      	subs	r2, r2, r5
 8005504:	d41f      	bmi.n	8005546 <_malloc_r+0xd6>
 8005506:	2a0b      	cmp	r2, #11
 8005508:	d917      	bls.n	800553a <_malloc_r+0xca>
 800550a:	1961      	adds	r1, r4, r5
 800550c:	42a3      	cmp	r3, r4
 800550e:	6025      	str	r5, [r4, #0]
 8005510:	bf18      	it	ne
 8005512:	6059      	strne	r1, [r3, #4]
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	bf08      	it	eq
 8005518:	f8c8 1000 	streq.w	r1, [r8]
 800551c:	5162      	str	r2, [r4, r5]
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	4638      	mov	r0, r7
 8005522:	f104 060b 	add.w	r6, r4, #11
 8005526:	f000 f829 	bl	800557c <__malloc_unlock>
 800552a:	f026 0607 	bic.w	r6, r6, #7
 800552e:	1d23      	adds	r3, r4, #4
 8005530:	1af2      	subs	r2, r6, r3
 8005532:	d0ae      	beq.n	8005492 <_malloc_r+0x22>
 8005534:	1b9b      	subs	r3, r3, r6
 8005536:	50a3      	str	r3, [r4, r2]
 8005538:	e7ab      	b.n	8005492 <_malloc_r+0x22>
 800553a:	42a3      	cmp	r3, r4
 800553c:	6862      	ldr	r2, [r4, #4]
 800553e:	d1dd      	bne.n	80054fc <_malloc_r+0x8c>
 8005540:	f8c8 2000 	str.w	r2, [r8]
 8005544:	e7ec      	b.n	8005520 <_malloc_r+0xb0>
 8005546:	4623      	mov	r3, r4
 8005548:	6864      	ldr	r4, [r4, #4]
 800554a:	e7ac      	b.n	80054a6 <_malloc_r+0x36>
 800554c:	4634      	mov	r4, r6
 800554e:	6876      	ldr	r6, [r6, #4]
 8005550:	e7b4      	b.n	80054bc <_malloc_r+0x4c>
 8005552:	4613      	mov	r3, r2
 8005554:	e7cc      	b.n	80054f0 <_malloc_r+0x80>
 8005556:	230c      	movs	r3, #12
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	4638      	mov	r0, r7
 800555c:	f000 f80e 	bl	800557c <__malloc_unlock>
 8005560:	e797      	b.n	8005492 <_malloc_r+0x22>
 8005562:	6025      	str	r5, [r4, #0]
 8005564:	e7dc      	b.n	8005520 <_malloc_r+0xb0>
 8005566:	605b      	str	r3, [r3, #4]
 8005568:	deff      	udf	#255	; 0xff
 800556a:	bf00      	nop
 800556c:	200002c0 	.word	0x200002c0

08005570 <__malloc_lock>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__malloc_lock+0x8>)
 8005572:	f7ff bf0f 	b.w	8005394 <__retarget_lock_acquire_recursive>
 8005576:	bf00      	nop
 8005578:	200002bc 	.word	0x200002bc

0800557c <__malloc_unlock>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__malloc_unlock+0x8>)
 800557e:	f7ff bf0a 	b.w	8005396 <__retarget_lock_release_recursive>
 8005582:	bf00      	nop
 8005584:	200002bc 	.word	0x200002bc

08005588 <__sfputc_r>:
 8005588:	6893      	ldr	r3, [r2, #8]
 800558a:	3b01      	subs	r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	b410      	push	{r4}
 8005590:	6093      	str	r3, [r2, #8]
 8005592:	da08      	bge.n	80055a6 <__sfputc_r+0x1e>
 8005594:	6994      	ldr	r4, [r2, #24]
 8005596:	42a3      	cmp	r3, r4
 8005598:	db01      	blt.n	800559e <__sfputc_r+0x16>
 800559a:	290a      	cmp	r1, #10
 800559c:	d103      	bne.n	80055a6 <__sfputc_r+0x1e>
 800559e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a2:	f000 bb73 	b.w	8005c8c <__swbuf_r>
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	1c58      	adds	r0, r3, #1
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	7019      	strb	r1, [r3, #0]
 80055ae:	4608      	mov	r0, r1
 80055b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <__sfputs_r>:
 80055b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	18d5      	adds	r5, r2, r3
 80055c0:	42ac      	cmp	r4, r5
 80055c2:	d101      	bne.n	80055c8 <__sfputs_r+0x12>
 80055c4:	2000      	movs	r0, #0
 80055c6:	e007      	b.n	80055d8 <__sfputs_r+0x22>
 80055c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055cc:	463a      	mov	r2, r7
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7ff ffda 	bl	8005588 <__sfputc_r>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d1f3      	bne.n	80055c0 <__sfputs_r+0xa>
 80055d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055dc <_vfiprintf_r>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	460d      	mov	r5, r1
 80055e2:	b09d      	sub	sp, #116	; 0x74
 80055e4:	4614      	mov	r4, r2
 80055e6:	4698      	mov	r8, r3
 80055e8:	4606      	mov	r6, r0
 80055ea:	b118      	cbz	r0, 80055f4 <_vfiprintf_r+0x18>
 80055ec:	6a03      	ldr	r3, [r0, #32]
 80055ee:	b90b      	cbnz	r3, 80055f4 <_vfiprintf_r+0x18>
 80055f0:	f7ff fdcc 	bl	800518c <__sinit>
 80055f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055f6:	07d9      	lsls	r1, r3, #31
 80055f8:	d405      	bmi.n	8005606 <_vfiprintf_r+0x2a>
 80055fa:	89ab      	ldrh	r3, [r5, #12]
 80055fc:	059a      	lsls	r2, r3, #22
 80055fe:	d402      	bmi.n	8005606 <_vfiprintf_r+0x2a>
 8005600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005602:	f7ff fec7 	bl	8005394 <__retarget_lock_acquire_recursive>
 8005606:	89ab      	ldrh	r3, [r5, #12]
 8005608:	071b      	lsls	r3, r3, #28
 800560a:	d501      	bpl.n	8005610 <_vfiprintf_r+0x34>
 800560c:	692b      	ldr	r3, [r5, #16]
 800560e:	b99b      	cbnz	r3, 8005638 <_vfiprintf_r+0x5c>
 8005610:	4629      	mov	r1, r5
 8005612:	4630      	mov	r0, r6
 8005614:	f000 fb78 	bl	8005d08 <__swsetup_r>
 8005618:	b170      	cbz	r0, 8005638 <_vfiprintf_r+0x5c>
 800561a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800561c:	07dc      	lsls	r4, r3, #31
 800561e:	d504      	bpl.n	800562a <_vfiprintf_r+0x4e>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005624:	b01d      	add	sp, #116	; 0x74
 8005626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562a:	89ab      	ldrh	r3, [r5, #12]
 800562c:	0598      	lsls	r0, r3, #22
 800562e:	d4f7      	bmi.n	8005620 <_vfiprintf_r+0x44>
 8005630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005632:	f7ff feb0 	bl	8005396 <__retarget_lock_release_recursive>
 8005636:	e7f3      	b.n	8005620 <_vfiprintf_r+0x44>
 8005638:	2300      	movs	r3, #0
 800563a:	9309      	str	r3, [sp, #36]	; 0x24
 800563c:	2320      	movs	r3, #32
 800563e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005642:	f8cd 800c 	str.w	r8, [sp, #12]
 8005646:	2330      	movs	r3, #48	; 0x30
 8005648:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057fc <_vfiprintf_r+0x220>
 800564c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005650:	f04f 0901 	mov.w	r9, #1
 8005654:	4623      	mov	r3, r4
 8005656:	469a      	mov	sl, r3
 8005658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800565c:	b10a      	cbz	r2, 8005662 <_vfiprintf_r+0x86>
 800565e:	2a25      	cmp	r2, #37	; 0x25
 8005660:	d1f9      	bne.n	8005656 <_vfiprintf_r+0x7a>
 8005662:	ebba 0b04 	subs.w	fp, sl, r4
 8005666:	d00b      	beq.n	8005680 <_vfiprintf_r+0xa4>
 8005668:	465b      	mov	r3, fp
 800566a:	4622      	mov	r2, r4
 800566c:	4629      	mov	r1, r5
 800566e:	4630      	mov	r0, r6
 8005670:	f7ff ffa1 	bl	80055b6 <__sfputs_r>
 8005674:	3001      	adds	r0, #1
 8005676:	f000 80a9 	beq.w	80057cc <_vfiprintf_r+0x1f0>
 800567a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800567c:	445a      	add	r2, fp
 800567e:	9209      	str	r2, [sp, #36]	; 0x24
 8005680:	f89a 3000 	ldrb.w	r3, [sl]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80a1 	beq.w	80057cc <_vfiprintf_r+0x1f0>
 800568a:	2300      	movs	r3, #0
 800568c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005694:	f10a 0a01 	add.w	sl, sl, #1
 8005698:	9304      	str	r3, [sp, #16]
 800569a:	9307      	str	r3, [sp, #28]
 800569c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056a0:	931a      	str	r3, [sp, #104]	; 0x68
 80056a2:	4654      	mov	r4, sl
 80056a4:	2205      	movs	r2, #5
 80056a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056aa:	4854      	ldr	r0, [pc, #336]	; (80057fc <_vfiprintf_r+0x220>)
 80056ac:	f7fa fd98 	bl	80001e0 <memchr>
 80056b0:	9a04      	ldr	r2, [sp, #16]
 80056b2:	b9d8      	cbnz	r0, 80056ec <_vfiprintf_r+0x110>
 80056b4:	06d1      	lsls	r1, r2, #27
 80056b6:	bf44      	itt	mi
 80056b8:	2320      	movmi	r3, #32
 80056ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056be:	0713      	lsls	r3, r2, #28
 80056c0:	bf44      	itt	mi
 80056c2:	232b      	movmi	r3, #43	; 0x2b
 80056c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c8:	f89a 3000 	ldrb.w	r3, [sl]
 80056cc:	2b2a      	cmp	r3, #42	; 0x2a
 80056ce:	d015      	beq.n	80056fc <_vfiprintf_r+0x120>
 80056d0:	9a07      	ldr	r2, [sp, #28]
 80056d2:	4654      	mov	r4, sl
 80056d4:	2000      	movs	r0, #0
 80056d6:	f04f 0c0a 	mov.w	ip, #10
 80056da:	4621      	mov	r1, r4
 80056dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e0:	3b30      	subs	r3, #48	; 0x30
 80056e2:	2b09      	cmp	r3, #9
 80056e4:	d94d      	bls.n	8005782 <_vfiprintf_r+0x1a6>
 80056e6:	b1b0      	cbz	r0, 8005716 <_vfiprintf_r+0x13a>
 80056e8:	9207      	str	r2, [sp, #28]
 80056ea:	e014      	b.n	8005716 <_vfiprintf_r+0x13a>
 80056ec:	eba0 0308 	sub.w	r3, r0, r8
 80056f0:	fa09 f303 	lsl.w	r3, r9, r3
 80056f4:	4313      	orrs	r3, r2
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	46a2      	mov	sl, r4
 80056fa:	e7d2      	b.n	80056a2 <_vfiprintf_r+0xc6>
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	1d19      	adds	r1, r3, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	9103      	str	r1, [sp, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfbb      	ittet	lt
 8005708:	425b      	neglt	r3, r3
 800570a:	f042 0202 	orrlt.w	r2, r2, #2
 800570e:	9307      	strge	r3, [sp, #28]
 8005710:	9307      	strlt	r3, [sp, #28]
 8005712:	bfb8      	it	lt
 8005714:	9204      	strlt	r2, [sp, #16]
 8005716:	7823      	ldrb	r3, [r4, #0]
 8005718:	2b2e      	cmp	r3, #46	; 0x2e
 800571a:	d10c      	bne.n	8005736 <_vfiprintf_r+0x15a>
 800571c:	7863      	ldrb	r3, [r4, #1]
 800571e:	2b2a      	cmp	r3, #42	; 0x2a
 8005720:	d134      	bne.n	800578c <_vfiprintf_r+0x1b0>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	1d1a      	adds	r2, r3, #4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	9203      	str	r2, [sp, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	bfb8      	it	lt
 800572e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005732:	3402      	adds	r4, #2
 8005734:	9305      	str	r3, [sp, #20]
 8005736:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800580c <_vfiprintf_r+0x230>
 800573a:	7821      	ldrb	r1, [r4, #0]
 800573c:	2203      	movs	r2, #3
 800573e:	4650      	mov	r0, sl
 8005740:	f7fa fd4e 	bl	80001e0 <memchr>
 8005744:	b138      	cbz	r0, 8005756 <_vfiprintf_r+0x17a>
 8005746:	9b04      	ldr	r3, [sp, #16]
 8005748:	eba0 000a 	sub.w	r0, r0, sl
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	4082      	lsls	r2, r0
 8005750:	4313      	orrs	r3, r2
 8005752:	3401      	adds	r4, #1
 8005754:	9304      	str	r3, [sp, #16]
 8005756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800575a:	4829      	ldr	r0, [pc, #164]	; (8005800 <_vfiprintf_r+0x224>)
 800575c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005760:	2206      	movs	r2, #6
 8005762:	f7fa fd3d 	bl	80001e0 <memchr>
 8005766:	2800      	cmp	r0, #0
 8005768:	d03f      	beq.n	80057ea <_vfiprintf_r+0x20e>
 800576a:	4b26      	ldr	r3, [pc, #152]	; (8005804 <_vfiprintf_r+0x228>)
 800576c:	bb1b      	cbnz	r3, 80057b6 <_vfiprintf_r+0x1da>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	3307      	adds	r3, #7
 8005772:	f023 0307 	bic.w	r3, r3, #7
 8005776:	3308      	adds	r3, #8
 8005778:	9303      	str	r3, [sp, #12]
 800577a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577c:	443b      	add	r3, r7
 800577e:	9309      	str	r3, [sp, #36]	; 0x24
 8005780:	e768      	b.n	8005654 <_vfiprintf_r+0x78>
 8005782:	fb0c 3202 	mla	r2, ip, r2, r3
 8005786:	460c      	mov	r4, r1
 8005788:	2001      	movs	r0, #1
 800578a:	e7a6      	b.n	80056da <_vfiprintf_r+0xfe>
 800578c:	2300      	movs	r3, #0
 800578e:	3401      	adds	r4, #1
 8005790:	9305      	str	r3, [sp, #20]
 8005792:	4619      	mov	r1, r3
 8005794:	f04f 0c0a 	mov.w	ip, #10
 8005798:	4620      	mov	r0, r4
 800579a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800579e:	3a30      	subs	r2, #48	; 0x30
 80057a0:	2a09      	cmp	r2, #9
 80057a2:	d903      	bls.n	80057ac <_vfiprintf_r+0x1d0>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0c6      	beq.n	8005736 <_vfiprintf_r+0x15a>
 80057a8:	9105      	str	r1, [sp, #20]
 80057aa:	e7c4      	b.n	8005736 <_vfiprintf_r+0x15a>
 80057ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80057b0:	4604      	mov	r4, r0
 80057b2:	2301      	movs	r3, #1
 80057b4:	e7f0      	b.n	8005798 <_vfiprintf_r+0x1bc>
 80057b6:	ab03      	add	r3, sp, #12
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	462a      	mov	r2, r5
 80057bc:	4b12      	ldr	r3, [pc, #72]	; (8005808 <_vfiprintf_r+0x22c>)
 80057be:	a904      	add	r1, sp, #16
 80057c0:	4630      	mov	r0, r6
 80057c2:	f3af 8000 	nop.w
 80057c6:	4607      	mov	r7, r0
 80057c8:	1c78      	adds	r0, r7, #1
 80057ca:	d1d6      	bne.n	800577a <_vfiprintf_r+0x19e>
 80057cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057ce:	07d9      	lsls	r1, r3, #31
 80057d0:	d405      	bmi.n	80057de <_vfiprintf_r+0x202>
 80057d2:	89ab      	ldrh	r3, [r5, #12]
 80057d4:	059a      	lsls	r2, r3, #22
 80057d6:	d402      	bmi.n	80057de <_vfiprintf_r+0x202>
 80057d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057da:	f7ff fddc 	bl	8005396 <__retarget_lock_release_recursive>
 80057de:	89ab      	ldrh	r3, [r5, #12]
 80057e0:	065b      	lsls	r3, r3, #25
 80057e2:	f53f af1d 	bmi.w	8005620 <_vfiprintf_r+0x44>
 80057e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e8:	e71c      	b.n	8005624 <_vfiprintf_r+0x48>
 80057ea:	ab03      	add	r3, sp, #12
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	462a      	mov	r2, r5
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <_vfiprintf_r+0x22c>)
 80057f2:	a904      	add	r1, sp, #16
 80057f4:	4630      	mov	r0, r6
 80057f6:	f000 f879 	bl	80058ec <_printf_i>
 80057fa:	e7e4      	b.n	80057c6 <_vfiprintf_r+0x1ea>
 80057fc:	08005fc4 	.word	0x08005fc4
 8005800:	08005fce 	.word	0x08005fce
 8005804:	00000000 	.word	0x00000000
 8005808:	080055b7 	.word	0x080055b7
 800580c:	08005fca 	.word	0x08005fca

08005810 <_printf_common>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	4616      	mov	r6, r2
 8005816:	4699      	mov	r9, r3
 8005818:	688a      	ldr	r2, [r1, #8]
 800581a:	690b      	ldr	r3, [r1, #16]
 800581c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005820:	4293      	cmp	r3, r2
 8005822:	bfb8      	it	lt
 8005824:	4613      	movlt	r3, r2
 8005826:	6033      	str	r3, [r6, #0]
 8005828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800582c:	4607      	mov	r7, r0
 800582e:	460c      	mov	r4, r1
 8005830:	b10a      	cbz	r2, 8005836 <_printf_common+0x26>
 8005832:	3301      	adds	r3, #1
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	0699      	lsls	r1, r3, #26
 800583a:	bf42      	ittt	mi
 800583c:	6833      	ldrmi	r3, [r6, #0]
 800583e:	3302      	addmi	r3, #2
 8005840:	6033      	strmi	r3, [r6, #0]
 8005842:	6825      	ldr	r5, [r4, #0]
 8005844:	f015 0506 	ands.w	r5, r5, #6
 8005848:	d106      	bne.n	8005858 <_printf_common+0x48>
 800584a:	f104 0a19 	add.w	sl, r4, #25
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	6832      	ldr	r2, [r6, #0]
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	42ab      	cmp	r3, r5
 8005856:	dc26      	bgt.n	80058a6 <_printf_common+0x96>
 8005858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800585c:	1e13      	subs	r3, r2, #0
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	bf18      	it	ne
 8005862:	2301      	movne	r3, #1
 8005864:	0692      	lsls	r2, r2, #26
 8005866:	d42b      	bmi.n	80058c0 <_printf_common+0xb0>
 8005868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800586c:	4649      	mov	r1, r9
 800586e:	4638      	mov	r0, r7
 8005870:	47c0      	blx	r8
 8005872:	3001      	adds	r0, #1
 8005874:	d01e      	beq.n	80058b4 <_printf_common+0xa4>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	6922      	ldr	r2, [r4, #16]
 800587a:	f003 0306 	and.w	r3, r3, #6
 800587e:	2b04      	cmp	r3, #4
 8005880:	bf02      	ittt	eq
 8005882:	68e5      	ldreq	r5, [r4, #12]
 8005884:	6833      	ldreq	r3, [r6, #0]
 8005886:	1aed      	subeq	r5, r5, r3
 8005888:	68a3      	ldr	r3, [r4, #8]
 800588a:	bf0c      	ite	eq
 800588c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005890:	2500      	movne	r5, #0
 8005892:	4293      	cmp	r3, r2
 8005894:	bfc4      	itt	gt
 8005896:	1a9b      	subgt	r3, r3, r2
 8005898:	18ed      	addgt	r5, r5, r3
 800589a:	2600      	movs	r6, #0
 800589c:	341a      	adds	r4, #26
 800589e:	42b5      	cmp	r5, r6
 80058a0:	d11a      	bne.n	80058d8 <_printf_common+0xc8>
 80058a2:	2000      	movs	r0, #0
 80058a4:	e008      	b.n	80058b8 <_printf_common+0xa8>
 80058a6:	2301      	movs	r3, #1
 80058a8:	4652      	mov	r2, sl
 80058aa:	4649      	mov	r1, r9
 80058ac:	4638      	mov	r0, r7
 80058ae:	47c0      	blx	r8
 80058b0:	3001      	adds	r0, #1
 80058b2:	d103      	bne.n	80058bc <_printf_common+0xac>
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058bc:	3501      	adds	r5, #1
 80058be:	e7c6      	b.n	800584e <_printf_common+0x3e>
 80058c0:	18e1      	adds	r1, r4, r3
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	2030      	movs	r0, #48	; 0x30
 80058c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ca:	4422      	add	r2, r4
 80058cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058d4:	3302      	adds	r3, #2
 80058d6:	e7c7      	b.n	8005868 <_printf_common+0x58>
 80058d8:	2301      	movs	r3, #1
 80058da:	4622      	mov	r2, r4
 80058dc:	4649      	mov	r1, r9
 80058de:	4638      	mov	r0, r7
 80058e0:	47c0      	blx	r8
 80058e2:	3001      	adds	r0, #1
 80058e4:	d0e6      	beq.n	80058b4 <_printf_common+0xa4>
 80058e6:	3601      	adds	r6, #1
 80058e8:	e7d9      	b.n	800589e <_printf_common+0x8e>
	...

080058ec <_printf_i>:
 80058ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	7e0f      	ldrb	r7, [r1, #24]
 80058f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058f4:	2f78      	cmp	r7, #120	; 0x78
 80058f6:	4691      	mov	r9, r2
 80058f8:	4680      	mov	r8, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	469a      	mov	sl, r3
 80058fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005902:	d807      	bhi.n	8005914 <_printf_i+0x28>
 8005904:	2f62      	cmp	r7, #98	; 0x62
 8005906:	d80a      	bhi.n	800591e <_printf_i+0x32>
 8005908:	2f00      	cmp	r7, #0
 800590a:	f000 80d4 	beq.w	8005ab6 <_printf_i+0x1ca>
 800590e:	2f58      	cmp	r7, #88	; 0x58
 8005910:	f000 80c0 	beq.w	8005a94 <_printf_i+0x1a8>
 8005914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800591c:	e03a      	b.n	8005994 <_printf_i+0xa8>
 800591e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005922:	2b15      	cmp	r3, #21
 8005924:	d8f6      	bhi.n	8005914 <_printf_i+0x28>
 8005926:	a101      	add	r1, pc, #4	; (adr r1, 800592c <_printf_i+0x40>)
 8005928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800592c:	08005985 	.word	0x08005985
 8005930:	08005999 	.word	0x08005999
 8005934:	08005915 	.word	0x08005915
 8005938:	08005915 	.word	0x08005915
 800593c:	08005915 	.word	0x08005915
 8005940:	08005915 	.word	0x08005915
 8005944:	08005999 	.word	0x08005999
 8005948:	08005915 	.word	0x08005915
 800594c:	08005915 	.word	0x08005915
 8005950:	08005915 	.word	0x08005915
 8005954:	08005915 	.word	0x08005915
 8005958:	08005a9d 	.word	0x08005a9d
 800595c:	080059c5 	.word	0x080059c5
 8005960:	08005a57 	.word	0x08005a57
 8005964:	08005915 	.word	0x08005915
 8005968:	08005915 	.word	0x08005915
 800596c:	08005abf 	.word	0x08005abf
 8005970:	08005915 	.word	0x08005915
 8005974:	080059c5 	.word	0x080059c5
 8005978:	08005915 	.word	0x08005915
 800597c:	08005915 	.word	0x08005915
 8005980:	08005a5f 	.word	0x08005a5f
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	602a      	str	r2, [r5, #0]
 800598c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005994:	2301      	movs	r3, #1
 8005996:	e09f      	b.n	8005ad8 <_printf_i+0x1ec>
 8005998:	6820      	ldr	r0, [r4, #0]
 800599a:	682b      	ldr	r3, [r5, #0]
 800599c:	0607      	lsls	r7, r0, #24
 800599e:	f103 0104 	add.w	r1, r3, #4
 80059a2:	6029      	str	r1, [r5, #0]
 80059a4:	d501      	bpl.n	80059aa <_printf_i+0xbe>
 80059a6:	681e      	ldr	r6, [r3, #0]
 80059a8:	e003      	b.n	80059b2 <_printf_i+0xc6>
 80059aa:	0646      	lsls	r6, r0, #25
 80059ac:	d5fb      	bpl.n	80059a6 <_printf_i+0xba>
 80059ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	da03      	bge.n	80059be <_printf_i+0xd2>
 80059b6:	232d      	movs	r3, #45	; 0x2d
 80059b8:	4276      	negs	r6, r6
 80059ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059be:	485a      	ldr	r0, [pc, #360]	; (8005b28 <_printf_i+0x23c>)
 80059c0:	230a      	movs	r3, #10
 80059c2:	e012      	b.n	80059ea <_printf_i+0xfe>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	6820      	ldr	r0, [r4, #0]
 80059c8:	1d19      	adds	r1, r3, #4
 80059ca:	6029      	str	r1, [r5, #0]
 80059cc:	0605      	lsls	r5, r0, #24
 80059ce:	d501      	bpl.n	80059d4 <_printf_i+0xe8>
 80059d0:	681e      	ldr	r6, [r3, #0]
 80059d2:	e002      	b.n	80059da <_printf_i+0xee>
 80059d4:	0641      	lsls	r1, r0, #25
 80059d6:	d5fb      	bpl.n	80059d0 <_printf_i+0xe4>
 80059d8:	881e      	ldrh	r6, [r3, #0]
 80059da:	4853      	ldr	r0, [pc, #332]	; (8005b28 <_printf_i+0x23c>)
 80059dc:	2f6f      	cmp	r7, #111	; 0x6f
 80059de:	bf0c      	ite	eq
 80059e0:	2308      	moveq	r3, #8
 80059e2:	230a      	movne	r3, #10
 80059e4:	2100      	movs	r1, #0
 80059e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ea:	6865      	ldr	r5, [r4, #4]
 80059ec:	60a5      	str	r5, [r4, #8]
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	bfa2      	ittt	ge
 80059f2:	6821      	ldrge	r1, [r4, #0]
 80059f4:	f021 0104 	bicge.w	r1, r1, #4
 80059f8:	6021      	strge	r1, [r4, #0]
 80059fa:	b90e      	cbnz	r6, 8005a00 <_printf_i+0x114>
 80059fc:	2d00      	cmp	r5, #0
 80059fe:	d04b      	beq.n	8005a98 <_printf_i+0x1ac>
 8005a00:	4615      	mov	r5, r2
 8005a02:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a06:	fb03 6711 	mls	r7, r3, r1, r6
 8005a0a:	5dc7      	ldrb	r7, [r0, r7]
 8005a0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a10:	4637      	mov	r7, r6
 8005a12:	42bb      	cmp	r3, r7
 8005a14:	460e      	mov	r6, r1
 8005a16:	d9f4      	bls.n	8005a02 <_printf_i+0x116>
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d10b      	bne.n	8005a34 <_printf_i+0x148>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	07de      	lsls	r6, r3, #31
 8005a20:	d508      	bpl.n	8005a34 <_printf_i+0x148>
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	6861      	ldr	r1, [r4, #4]
 8005a26:	4299      	cmp	r1, r3
 8005a28:	bfde      	ittt	le
 8005a2a:	2330      	movle	r3, #48	; 0x30
 8005a2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a34:	1b52      	subs	r2, r2, r5
 8005a36:	6122      	str	r2, [r4, #16]
 8005a38:	f8cd a000 	str.w	sl, [sp]
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	aa03      	add	r2, sp, #12
 8005a40:	4621      	mov	r1, r4
 8005a42:	4640      	mov	r0, r8
 8005a44:	f7ff fee4 	bl	8005810 <_printf_common>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d14a      	bne.n	8005ae2 <_printf_i+0x1f6>
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a50:	b004      	add	sp, #16
 8005a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f043 0320 	orr.w	r3, r3, #32
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	4833      	ldr	r0, [pc, #204]	; (8005b2c <_printf_i+0x240>)
 8005a60:	2778      	movs	r7, #120	; 0x78
 8005a62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	6829      	ldr	r1, [r5, #0]
 8005a6a:	061f      	lsls	r7, r3, #24
 8005a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a70:	d402      	bmi.n	8005a78 <_printf_i+0x18c>
 8005a72:	065f      	lsls	r7, r3, #25
 8005a74:	bf48      	it	mi
 8005a76:	b2b6      	uxthmi	r6, r6
 8005a78:	07df      	lsls	r7, r3, #31
 8005a7a:	bf48      	it	mi
 8005a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a80:	6029      	str	r1, [r5, #0]
 8005a82:	bf48      	it	mi
 8005a84:	6023      	strmi	r3, [r4, #0]
 8005a86:	b91e      	cbnz	r6, 8005a90 <_printf_i+0x1a4>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	f023 0320 	bic.w	r3, r3, #32
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	2310      	movs	r3, #16
 8005a92:	e7a7      	b.n	80059e4 <_printf_i+0xf8>
 8005a94:	4824      	ldr	r0, [pc, #144]	; (8005b28 <_printf_i+0x23c>)
 8005a96:	e7e4      	b.n	8005a62 <_printf_i+0x176>
 8005a98:	4615      	mov	r5, r2
 8005a9a:	e7bd      	b.n	8005a18 <_printf_i+0x12c>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	6826      	ldr	r6, [r4, #0]
 8005aa0:	6961      	ldr	r1, [r4, #20]
 8005aa2:	1d18      	adds	r0, r3, #4
 8005aa4:	6028      	str	r0, [r5, #0]
 8005aa6:	0635      	lsls	r5, r6, #24
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	d501      	bpl.n	8005ab0 <_printf_i+0x1c4>
 8005aac:	6019      	str	r1, [r3, #0]
 8005aae:	e002      	b.n	8005ab6 <_printf_i+0x1ca>
 8005ab0:	0670      	lsls	r0, r6, #25
 8005ab2:	d5fb      	bpl.n	8005aac <_printf_i+0x1c0>
 8005ab4:	8019      	strh	r1, [r3, #0]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	4615      	mov	r5, r2
 8005abc:	e7bc      	b.n	8005a38 <_printf_i+0x14c>
 8005abe:	682b      	ldr	r3, [r5, #0]
 8005ac0:	1d1a      	adds	r2, r3, #4
 8005ac2:	602a      	str	r2, [r5, #0]
 8005ac4:	681d      	ldr	r5, [r3, #0]
 8005ac6:	6862      	ldr	r2, [r4, #4]
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4628      	mov	r0, r5
 8005acc:	f7fa fb88 	bl	80001e0 <memchr>
 8005ad0:	b108      	cbz	r0, 8005ad6 <_printf_i+0x1ea>
 8005ad2:	1b40      	subs	r0, r0, r5
 8005ad4:	6060      	str	r0, [r4, #4]
 8005ad6:	6863      	ldr	r3, [r4, #4]
 8005ad8:	6123      	str	r3, [r4, #16]
 8005ada:	2300      	movs	r3, #0
 8005adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae0:	e7aa      	b.n	8005a38 <_printf_i+0x14c>
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	47d0      	blx	sl
 8005aec:	3001      	adds	r0, #1
 8005aee:	d0ad      	beq.n	8005a4c <_printf_i+0x160>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	079b      	lsls	r3, r3, #30
 8005af4:	d413      	bmi.n	8005b1e <_printf_i+0x232>
 8005af6:	68e0      	ldr	r0, [r4, #12]
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	4298      	cmp	r0, r3
 8005afc:	bfb8      	it	lt
 8005afe:	4618      	movlt	r0, r3
 8005b00:	e7a6      	b.n	8005a50 <_printf_i+0x164>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4632      	mov	r2, r6
 8005b06:	4649      	mov	r1, r9
 8005b08:	4640      	mov	r0, r8
 8005b0a:	47d0      	blx	sl
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d09d      	beq.n	8005a4c <_printf_i+0x160>
 8005b10:	3501      	adds	r5, #1
 8005b12:	68e3      	ldr	r3, [r4, #12]
 8005b14:	9903      	ldr	r1, [sp, #12]
 8005b16:	1a5b      	subs	r3, r3, r1
 8005b18:	42ab      	cmp	r3, r5
 8005b1a:	dcf2      	bgt.n	8005b02 <_printf_i+0x216>
 8005b1c:	e7eb      	b.n	8005af6 <_printf_i+0x20a>
 8005b1e:	2500      	movs	r5, #0
 8005b20:	f104 0619 	add.w	r6, r4, #25
 8005b24:	e7f5      	b.n	8005b12 <_printf_i+0x226>
 8005b26:	bf00      	nop
 8005b28:	08005fd5 	.word	0x08005fd5
 8005b2c:	08005fe6 	.word	0x08005fe6

08005b30 <__sflush_r>:
 8005b30:	898a      	ldrh	r2, [r1, #12]
 8005b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b36:	4605      	mov	r5, r0
 8005b38:	0710      	lsls	r0, r2, #28
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	d458      	bmi.n	8005bf0 <__sflush_r+0xc0>
 8005b3e:	684b      	ldr	r3, [r1, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dc05      	bgt.n	8005b50 <__sflush_r+0x20>
 8005b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dc02      	bgt.n	8005b50 <__sflush_r+0x20>
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	d0f9      	beq.n	8005b4a <__sflush_r+0x1a>
 8005b56:	2300      	movs	r3, #0
 8005b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b5c:	682f      	ldr	r7, [r5, #0]
 8005b5e:	6a21      	ldr	r1, [r4, #32]
 8005b60:	602b      	str	r3, [r5, #0]
 8005b62:	d032      	beq.n	8005bca <__sflush_r+0x9a>
 8005b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	075a      	lsls	r2, r3, #29
 8005b6a:	d505      	bpl.n	8005b78 <__sflush_r+0x48>
 8005b6c:	6863      	ldr	r3, [r4, #4]
 8005b6e:	1ac0      	subs	r0, r0, r3
 8005b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b72:	b10b      	cbz	r3, 8005b78 <__sflush_r+0x48>
 8005b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b76:	1ac0      	subs	r0, r0, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b7e:	6a21      	ldr	r1, [r4, #32]
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b0      	blx	r6
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	d106      	bne.n	8005b98 <__sflush_r+0x68>
 8005b8a:	6829      	ldr	r1, [r5, #0]
 8005b8c:	291d      	cmp	r1, #29
 8005b8e:	d82b      	bhi.n	8005be8 <__sflush_r+0xb8>
 8005b90:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <__sflush_r+0x108>)
 8005b92:	410a      	asrs	r2, r1
 8005b94:	07d6      	lsls	r6, r2, #31
 8005b96:	d427      	bmi.n	8005be8 <__sflush_r+0xb8>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	6062      	str	r2, [r4, #4]
 8005b9c:	04d9      	lsls	r1, r3, #19
 8005b9e:	6922      	ldr	r2, [r4, #16]
 8005ba0:	6022      	str	r2, [r4, #0]
 8005ba2:	d504      	bpl.n	8005bae <__sflush_r+0x7e>
 8005ba4:	1c42      	adds	r2, r0, #1
 8005ba6:	d101      	bne.n	8005bac <__sflush_r+0x7c>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b903      	cbnz	r3, 8005bae <__sflush_r+0x7e>
 8005bac:	6560      	str	r0, [r4, #84]	; 0x54
 8005bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bb0:	602f      	str	r7, [r5, #0]
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	d0c9      	beq.n	8005b4a <__sflush_r+0x1a>
 8005bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	d002      	beq.n	8005bc4 <__sflush_r+0x94>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff fbea 	bl	8005398 <_free_r>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	6360      	str	r0, [r4, #52]	; 0x34
 8005bc8:	e7c0      	b.n	8005b4c <__sflush_r+0x1c>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b0      	blx	r6
 8005bd0:	1c41      	adds	r1, r0, #1
 8005bd2:	d1c8      	bne.n	8005b66 <__sflush_r+0x36>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0c5      	beq.n	8005b66 <__sflush_r+0x36>
 8005bda:	2b1d      	cmp	r3, #29
 8005bdc:	d001      	beq.n	8005be2 <__sflush_r+0xb2>
 8005bde:	2b16      	cmp	r3, #22
 8005be0:	d101      	bne.n	8005be6 <__sflush_r+0xb6>
 8005be2:	602f      	str	r7, [r5, #0]
 8005be4:	e7b1      	b.n	8005b4a <__sflush_r+0x1a>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	e7ad      	b.n	8005b4c <__sflush_r+0x1c>
 8005bf0:	690f      	ldr	r7, [r1, #16]
 8005bf2:	2f00      	cmp	r7, #0
 8005bf4:	d0a9      	beq.n	8005b4a <__sflush_r+0x1a>
 8005bf6:	0793      	lsls	r3, r2, #30
 8005bf8:	680e      	ldr	r6, [r1, #0]
 8005bfa:	bf08      	it	eq
 8005bfc:	694b      	ldreq	r3, [r1, #20]
 8005bfe:	600f      	str	r7, [r1, #0]
 8005c00:	bf18      	it	ne
 8005c02:	2300      	movne	r3, #0
 8005c04:	eba6 0807 	sub.w	r8, r6, r7
 8005c08:	608b      	str	r3, [r1, #8]
 8005c0a:	f1b8 0f00 	cmp.w	r8, #0
 8005c0e:	dd9c      	ble.n	8005b4a <__sflush_r+0x1a>
 8005c10:	6a21      	ldr	r1, [r4, #32]
 8005c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c14:	4643      	mov	r3, r8
 8005c16:	463a      	mov	r2, r7
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b0      	blx	r6
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	dc06      	bgt.n	8005c2e <__sflush_r+0xfe>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c2c:	e78e      	b.n	8005b4c <__sflush_r+0x1c>
 8005c2e:	4407      	add	r7, r0
 8005c30:	eba8 0800 	sub.w	r8, r8, r0
 8005c34:	e7e9      	b.n	8005c0a <__sflush_r+0xda>
 8005c36:	bf00      	nop
 8005c38:	dfbffffe 	.word	0xdfbffffe

08005c3c <_fflush_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	4605      	mov	r5, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	b913      	cbnz	r3, 8005c4c <_fflush_r+0x10>
 8005c46:	2500      	movs	r5, #0
 8005c48:	4628      	mov	r0, r5
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	b118      	cbz	r0, 8005c56 <_fflush_r+0x1a>
 8005c4e:	6a03      	ldr	r3, [r0, #32]
 8005c50:	b90b      	cbnz	r3, 8005c56 <_fflush_r+0x1a>
 8005c52:	f7ff fa9b 	bl	800518c <__sinit>
 8005c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f3      	beq.n	8005c46 <_fflush_r+0xa>
 8005c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c60:	07d0      	lsls	r0, r2, #31
 8005c62:	d404      	bmi.n	8005c6e <_fflush_r+0x32>
 8005c64:	0599      	lsls	r1, r3, #22
 8005c66:	d402      	bmi.n	8005c6e <_fflush_r+0x32>
 8005c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6a:	f7ff fb93 	bl	8005394 <__retarget_lock_acquire_recursive>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	4621      	mov	r1, r4
 8005c72:	f7ff ff5d 	bl	8005b30 <__sflush_r>
 8005c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c78:	07da      	lsls	r2, r3, #31
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	d4e4      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	059b      	lsls	r3, r3, #22
 8005c82:	d4e1      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c86:	f7ff fb86 	bl	8005396 <__retarget_lock_release_recursive>
 8005c8a:	e7dd      	b.n	8005c48 <_fflush_r+0xc>

08005c8c <__swbuf_r>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	460e      	mov	r6, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	4605      	mov	r5, r0
 8005c94:	b118      	cbz	r0, 8005c9e <__swbuf_r+0x12>
 8005c96:	6a03      	ldr	r3, [r0, #32]
 8005c98:	b90b      	cbnz	r3, 8005c9e <__swbuf_r+0x12>
 8005c9a:	f7ff fa77 	bl	800518c <__sinit>
 8005c9e:	69a3      	ldr	r3, [r4, #24]
 8005ca0:	60a3      	str	r3, [r4, #8]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	071a      	lsls	r2, r3, #28
 8005ca6:	d525      	bpl.n	8005cf4 <__swbuf_r+0x68>
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	b31b      	cbz	r3, 8005cf4 <__swbuf_r+0x68>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	6922      	ldr	r2, [r4, #16]
 8005cb0:	1a98      	subs	r0, r3, r2
 8005cb2:	6963      	ldr	r3, [r4, #20]
 8005cb4:	b2f6      	uxtb	r6, r6
 8005cb6:	4283      	cmp	r3, r0
 8005cb8:	4637      	mov	r7, r6
 8005cba:	dc04      	bgt.n	8005cc6 <__swbuf_r+0x3a>
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7ff ffbc 	bl	8005c3c <_fflush_r>
 8005cc4:	b9e0      	cbnz	r0, 8005d00 <__swbuf_r+0x74>
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	60a3      	str	r3, [r4, #8]
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	701e      	strb	r6, [r3, #0]
 8005cd4:	6962      	ldr	r2, [r4, #20]
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d004      	beq.n	8005ce6 <__swbuf_r+0x5a>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	07db      	lsls	r3, r3, #31
 8005ce0:	d506      	bpl.n	8005cf0 <__swbuf_r+0x64>
 8005ce2:	2e0a      	cmp	r6, #10
 8005ce4:	d104      	bne.n	8005cf0 <__swbuf_r+0x64>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7ff ffa7 	bl	8005c3c <_fflush_r>
 8005cee:	b938      	cbnz	r0, 8005d00 <__swbuf_r+0x74>
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 f806 	bl	8005d08 <__swsetup_r>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d0d5      	beq.n	8005cac <__swbuf_r+0x20>
 8005d00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005d04:	e7f4      	b.n	8005cf0 <__swbuf_r+0x64>
	...

08005d08 <__swsetup_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <__swsetup_r+0xac>)
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	460c      	mov	r4, r1
 8005d12:	b118      	cbz	r0, 8005d1c <__swsetup_r+0x14>
 8005d14:	6a03      	ldr	r3, [r0, #32]
 8005d16:	b90b      	cbnz	r3, 8005d1c <__swsetup_r+0x14>
 8005d18:	f7ff fa38 	bl	800518c <__sinit>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d22:	0718      	lsls	r0, r3, #28
 8005d24:	d422      	bmi.n	8005d6c <__swsetup_r+0x64>
 8005d26:	06d9      	lsls	r1, r3, #27
 8005d28:	d407      	bmi.n	8005d3a <__swsetup_r+0x32>
 8005d2a:	2309      	movs	r3, #9
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d32:	81a3      	strh	r3, [r4, #12]
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d38:	e034      	b.n	8005da4 <__swsetup_r+0x9c>
 8005d3a:	0758      	lsls	r0, r3, #29
 8005d3c:	d512      	bpl.n	8005d64 <__swsetup_r+0x5c>
 8005d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d40:	b141      	cbz	r1, 8005d54 <__swsetup_r+0x4c>
 8005d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d46:	4299      	cmp	r1, r3
 8005d48:	d002      	beq.n	8005d50 <__swsetup_r+0x48>
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f7ff fb24 	bl	8005398 <_free_r>
 8005d50:	2300      	movs	r3, #0
 8005d52:	6363      	str	r3, [r4, #52]	; 0x34
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f043 0308 	orr.w	r3, r3, #8
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	b94b      	cbnz	r3, 8005d84 <__swsetup_r+0x7c>
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7a:	d003      	beq.n	8005d84 <__swsetup_r+0x7c>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f850 	bl	8005e24 <__smakebuf_r>
 8005d84:	89a0      	ldrh	r0, [r4, #12]
 8005d86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d8a:	f010 0301 	ands.w	r3, r0, #1
 8005d8e:	d00a      	beq.n	8005da6 <__swsetup_r+0x9e>
 8005d90:	2300      	movs	r3, #0
 8005d92:	60a3      	str	r3, [r4, #8]
 8005d94:	6963      	ldr	r3, [r4, #20]
 8005d96:	425b      	negs	r3, r3
 8005d98:	61a3      	str	r3, [r4, #24]
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	b943      	cbnz	r3, 8005db0 <__swsetup_r+0xa8>
 8005d9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005da2:	d1c4      	bne.n	8005d2e <__swsetup_r+0x26>
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	0781      	lsls	r1, r0, #30
 8005da8:	bf58      	it	pl
 8005daa:	6963      	ldrpl	r3, [r4, #20]
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	e7f4      	b.n	8005d9a <__swsetup_r+0x92>
 8005db0:	2000      	movs	r0, #0
 8005db2:	e7f7      	b.n	8005da4 <__swsetup_r+0x9c>
 8005db4:	20000064 	.word	0x20000064

08005db8 <_sbrk_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d06      	ldr	r5, [pc, #24]	; (8005dd4 <_sbrk_r+0x1c>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fb f82e 	bl	8000e24 <_sbrk>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_sbrk_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_sbrk_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	200002b8 	.word	0x200002b8

08005dd8 <__swhatbuf_r>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	460c      	mov	r4, r1
 8005ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de0:	2900      	cmp	r1, #0
 8005de2:	b096      	sub	sp, #88	; 0x58
 8005de4:	4615      	mov	r5, r2
 8005de6:	461e      	mov	r6, r3
 8005de8:	da0d      	bge.n	8005e06 <__swhatbuf_r+0x2e>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	bf0c      	ite	eq
 8005df6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005dfa:	2340      	movne	r3, #64	; 0x40
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	6031      	str	r1, [r6, #0]
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	b016      	add	sp, #88	; 0x58
 8005e04:	bd70      	pop	{r4, r5, r6, pc}
 8005e06:	466a      	mov	r2, sp
 8005e08:	f000 f848 	bl	8005e9c <_fstat_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	dbec      	blt.n	8005dea <__swhatbuf_r+0x12>
 8005e10:	9901      	ldr	r1, [sp, #4]
 8005e12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e1a:	4259      	negs	r1, r3
 8005e1c:	4159      	adcs	r1, r3
 8005e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e22:	e7eb      	b.n	8005dfc <__swhatbuf_r+0x24>

08005e24 <__smakebuf_r>:
 8005e24:	898b      	ldrh	r3, [r1, #12]
 8005e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e28:	079d      	lsls	r5, r3, #30
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	d507      	bpl.n	8005e40 <__smakebuf_r+0x1c>
 8005e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	6163      	str	r3, [r4, #20]
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	ab01      	add	r3, sp, #4
 8005e42:	466a      	mov	r2, sp
 8005e44:	f7ff ffc8 	bl	8005dd8 <__swhatbuf_r>
 8005e48:	9900      	ldr	r1, [sp, #0]
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7ff fb0f 	bl	8005470 <_malloc_r>
 8005e52:	b948      	cbnz	r0, 8005e68 <__smakebuf_r+0x44>
 8005e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d4ef      	bmi.n	8005e3c <__smakebuf_r+0x18>
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	f043 0302 	orr.w	r3, r3, #2
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	e7e3      	b.n	8005e30 <__smakebuf_r+0xc>
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	6020      	str	r0, [r4, #0]
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	9b00      	ldr	r3, [sp, #0]
 8005e74:	6163      	str	r3, [r4, #20]
 8005e76:	9b01      	ldr	r3, [sp, #4]
 8005e78:	6120      	str	r0, [r4, #16]
 8005e7a:	b15b      	cbz	r3, 8005e94 <__smakebuf_r+0x70>
 8005e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e80:	4630      	mov	r0, r6
 8005e82:	f000 f81d 	bl	8005ec0 <_isatty_r>
 8005e86:	b128      	cbz	r0, 8005e94 <__smakebuf_r+0x70>
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	81a3      	strh	r3, [r4, #12]
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	431d      	orrs	r5, r3
 8005e98:	81a5      	strh	r5, [r4, #12]
 8005e9a:	e7cf      	b.n	8005e3c <__smakebuf_r+0x18>

08005e9c <_fstat_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	; (8005ebc <_fstat_r+0x20>)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	f7fa ff92 	bl	8000dd2 <_fstat>
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	d102      	bne.n	8005eb8 <_fstat_r+0x1c>
 8005eb2:	682b      	ldr	r3, [r5, #0]
 8005eb4:	b103      	cbz	r3, 8005eb8 <_fstat_r+0x1c>
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	bd38      	pop	{r3, r4, r5, pc}
 8005eba:	bf00      	nop
 8005ebc:	200002b8 	.word	0x200002b8

08005ec0 <_isatty_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4d06      	ldr	r5, [pc, #24]	; (8005edc <_isatty_r+0x1c>)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	f7fa ff91 	bl	8000df2 <_isatty>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_isatty_r+0x1a>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_isatty_r+0x1a>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	200002b8 	.word	0x200002b8

08005ee0 <_init>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr

08005eec <_fini>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr
