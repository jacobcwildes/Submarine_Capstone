
controller_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000594c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b88  08005b88  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08005bec  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005bec  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9e1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e2  00000000  00000000  0002eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  00030b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000936  00000000  00000000  000317a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023849  00000000  00000000  000320d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc4b  00000000  00000000  0005591f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de50e  00000000  00000000  0006356a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000369c  00000000  00000000  00141a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00145114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ad4 	.word	0x08005ad4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005ad4 	.word	0x08005ad4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b091      	sub	sp, #68	; 0x44
 8000580:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc8e 	bl	8000ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f8c5 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f9f9 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 800058e:	f000 f9d9 	bl	8000944 <MX_DMA_Init>
  MX_ADC1_Init();
 8000592:	f000 f911 	bl	80007b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f9a5 	bl	80008e4 <MX_USART2_UART_Init>
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_2);
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_3);
  //HAL_ADC_ConfigChannel(&hadc1, ADC_CHANNEL_4);

  //Turn on Power LED
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4851      	ldr	r0, [pc, #324]	; (80006e4 <main+0x168>)
 800059e:	f002 fb19 	bl	8002bd4 <HAL_GPIO_TogglePin>

  //Buffer to be transmitted
  //25 indices for 4 three digit numbers, 6 commas, a carriage return and newline
  //and 3 single digits. Added two extra indices as a buffer so that sprintf doesn't error
  char buffer[25];
  for(int i = 0; i < 35; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
 80005a6:	e007      	b.n	80005b8 <main+0x3c>
  {
	  buffer[i] = 0;
 80005a8:	463a      	mov	r2, r7
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	4413      	add	r3, r2
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 80005b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b4:	3301      	adds	r3, #1
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
 80005b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ba:	2b22      	cmp	r3, #34	; 0x22
 80005bc:	ddf4      	ble.n	80005a8 <main+0x2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Poll data from GPIO pins and ADC channels 1-4
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) subUp = 1;
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f002 fad5 	bl	8002b74 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d102      	bne.n	80005d6 <main+0x5a>
 80005d0:	4b45      	ldr	r3, [pc, #276]	; (80006e8 <main+0x16c>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET) subDown = 1;
 80005d6:	2120      	movs	r1, #32
 80005d8:	4842      	ldr	r0, [pc, #264]	; (80006e4 <main+0x168>)
 80005da:	f002 facb 	bl	8002b74 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d102      	bne.n	80005ea <main+0x6e>
 80005e4:	4b41      	ldr	r3, [pc, #260]	; (80006ec <main+0x170>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET) screenshot = 1;
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	483d      	ldr	r0, [pc, #244]	; (80006e4 <main+0x168>)
 80005ee:	f002 fac1 	bl	8002b74 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d102      	bne.n	80005fe <main+0x82>
 80005f8:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <main+0x174>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
		//Start ADC in DMA mode
		HAL_ADC_Start_DMA(&hadc1, toggleData, 4);
 80005fe:	2204      	movs	r2, #4
 8000600:	493c      	ldr	r1, [pc, #240]	; (80006f4 <main+0x178>)
 8000602:	483d      	ldr	r0, [pc, #244]	; (80006f8 <main+0x17c>)
 8000604:	f001 f806 	bl	8001614 <HAL_ADC_Start_DMA>
		leftToggleUD = toggleData[0];
 8000608:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <main+0x178>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <main+0x180>)
 8000610:	701a      	strb	r2, [r3, #0]
		leftToggleLR = toggleData[1];
 8000612:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <main+0x178>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <main+0x184>)
 800061a:	701a      	strb	r2, [r3, #0]
		rightToggleUD = toggleData[2];
 800061c:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <main+0x178>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <main+0x188>)
 8000624:	701a      	strb	r2, [r3, #0]
		rightToggleLR = toggleData[3];
 8000626:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <main+0x178>)
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <main+0x18c>)
 800062e:	701a      	strb	r2, [r3, #0]

		//Local debug
		localbuff[0] = leftToggleUD;
 8000630:	4b32      	ldr	r3, [pc, #200]	; (80006fc <main+0x180>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	773b      	strb	r3, [r7, #28]
		localbuff[1] = leftToggleLR;
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <main+0x184>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	777b      	strb	r3, [r7, #29]
		localbuff[2] = rightToggleUD;
 800063c:	4b31      	ldr	r3, [pc, #196]	; (8000704 <main+0x188>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	77bb      	strb	r3, [r7, #30]
		localbuff[3] = rightToggleLR;
 8000642:	4b31      	ldr	r3, [pc, #196]	; (8000708 <main+0x18c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	77fb      	strb	r3, [r7, #31]
		localbuff[4] = subUp;
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <main+0x16c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f887 3020 	strb.w	r3, [r7, #32]
		localbuff[5] = subDown;
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <main+0x170>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		localbuff[6] = screenshot;
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <main+0x174>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		sprintf(buffer, "%u,%u,%u,%u,%u,%u,%u\n\r", leftToggleUD, leftToggleLR,
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <main+0x180>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461e      	mov	r6, r3
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <main+0x184>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	469c      	mov	ip, r3
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <main+0x188>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <main+0x18c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <main+0x16c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461c      	mov	r4, r3
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <main+0x170>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461d      	mov	r5, r3
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <main+0x174>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4638      	mov	r0, r7
 800068a:	9304      	str	r3, [sp, #16]
 800068c:	9503      	str	r5, [sp, #12]
 800068e:	9402      	str	r4, [sp, #8]
 8000690:	9101      	str	r1, [sp, #4]
 8000692:	9200      	str	r2, [sp, #0]
 8000694:	4663      	mov	r3, ip
 8000696:	4632      	mov	r2, r6
 8000698:	491c      	ldr	r1, [pc, #112]	; (800070c <main+0x190>)
 800069a:	f004 fd77 	bl	800518c <siprintf>
						rightToggleUD, rightToggleLR, subUp, subDown, screenshot);

		//Transmit Data
		if(HAL_UART_Transmit(&huart2, (uint8_t *)buffer, sizeof(buffer), HAL_MAX_DELAY) == HAL_OK)
 800069e:	4639      	mov	r1, r7
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	2219      	movs	r2, #25
 80006a6:	481a      	ldr	r0, [pc, #104]	; (8000710 <main+0x194>)
 80006a8:	f003 fcf6 	bl	8004098 <HAL_UART_Transmit>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d185      	bne.n	80005be <main+0x42>
		{
			//Delay because we don't need to transmit that fast - this is a controller operated by humans
			HAL_Delay(250);
 80006b2:	20fa      	movs	r0, #250	; 0xfa
 80006b4:	f000 fc6a 	bl	8000f8c <HAL_Delay>
			//Reset everything to 0 once data is transmitted
			subUp = 0;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <main+0x16c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
			subDown = 0;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <main+0x170>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
			screenshot = 0;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <main+0x174>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
			leftToggleLR = 0;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <main+0x184>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
			leftToggleUD = 0;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <main+0x180>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
			rightToggleLR = 0;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <main+0x18c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
			rightToggleUD = 0;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0x188>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET) subUp = 1;
 80006e2:	e76c      	b.n	80005be <main+0x42>
 80006e4:	48000400 	.word	0x48000400
 80006e8:	200001b5 	.word	0x200001b5
 80006ec:	200001b4 	.word	0x200001b4
 80006f0:	200001b6 	.word	0x200001b6
 80006f4:	200001b8 	.word	0x200001b8
 80006f8:	20000078 	.word	0x20000078
 80006fc:	200001b0 	.word	0x200001b0
 8000700:	200001b1 	.word	0x200001b1
 8000704:	200001b2 	.word	0x200001b2
 8000708:	200001b3 	.word	0x200001b3
 800070c:	08005aec 	.word	0x08005aec
 8000710:	20000128 	.word	0x20000128

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	; 0x58
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2244      	movs	r2, #68	; 0x44
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fd52 	bl	80051cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000736:	f44f 7000 	mov.w	r0, #512	; 0x200
 800073a:	f002 fa73 	bl	8002c24 <HAL_PWREx_ControlVoltageScaling>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000744:	f000 f9da 	bl	8000afc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075a:	2302      	movs	r3, #2
 800075c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000762:	230a      	movs	r3, #10
 8000764:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000766:	2307      	movs	r3, #7
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4618      	mov	r0, r3
 8000778:	f002 faaa 	bl	8002cd0 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000782:	f000 f9bb 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2303      	movs	r3, #3
 800078c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	2104      	movs	r1, #4
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 feaa 	bl	80034f8 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007aa:	f000 f9a7 	bl	8000afc <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3758      	adds	r7, #88	; 0x58
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ce:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <MX_ADC1_Init+0x114>)
 80007d0:	4a3f      	ldr	r2, [pc, #252]	; (80008d0 <MX_ADC1_Init+0x118>)
 80007d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d4:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <MX_ADC1_Init+0x114>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <MX_ADC1_Init+0x114>)
 80007dc:	2210      	movs	r2, #16
 80007de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e0:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <MX_ADC1_Init+0x114>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007e6:	4b39      	ldr	r3, [pc, #228]	; (80008cc <MX_ADC1_Init+0x114>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b37      	ldr	r3, [pc, #220]	; (80008cc <MX_ADC1_Init+0x114>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f2:	4b36      	ldr	r3, [pc, #216]	; (80008cc <MX_ADC1_Init+0x114>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <MX_ADC1_Init+0x114>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80007fe:	4b33      	ldr	r3, [pc, #204]	; (80008cc <MX_ADC1_Init+0x114>)
 8000800:	2204      	movs	r2, #4
 8000802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_ADC1_Init+0x114>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_ADC1_Init+0x114>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_ADC1_Init+0x114>)
 8000814:	2200      	movs	r2, #0
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_ADC1_Init+0x114>)
 800081a:	2201      	movs	r2, #1
 800081c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_ADC1_Init+0x114>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_ADC1_Init+0x114>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4827      	ldr	r0, [pc, #156]	; (80008cc <MX_ADC1_Init+0x114>)
 8000830:	f000 fdaa 	bl	8001388 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800083a:	f000 f95f 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <MX_ADC1_Init+0x11c>)
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000842:	2306      	movs	r3, #6
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084a:	237f      	movs	r3, #127	; 0x7f
 800084c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800084e:	2304      	movs	r3, #4
 8000850:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	481c      	ldr	r0, [pc, #112]	; (80008cc <MX_ADC1_Init+0x114>)
 800085c:	f000 ff72 	bl	8001744 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000866:	f000 f949 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_ADC1_Init+0x120>)
 800086c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800086e:	230c      	movs	r3, #12
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_ADC1_Init+0x114>)
 800087c:	f000 ff62 	bl	8001744 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000886:	f000 f939 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_ADC1_Init+0x124>)
 800088c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800088e:	2312      	movs	r3, #18
 8000890:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_ADC1_Init+0x114>)
 8000898:	f000 ff54 	bl	8001744 <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80008a2:	f000 f92b 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_ADC1_Init+0x128>)
 80008a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008aa:	2318      	movs	r3, #24
 80008ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_ADC1_Init+0x114>)
 80008b4:	f000 ff46 	bl	8001744 <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80008be:	f000 f91d 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000078 	.word	0x20000078
 80008d0:	50040000 	.word	0x50040000
 80008d4:	04300002 	.word	0x04300002
 80008d8:	08600004 	.word	0x08600004
 80008dc:	0c900008 	.word	0x0c900008
 80008e0:	10c00010 	.word	0x10c00010

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_USART2_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x58>)
 8000928:	f003 fb68 	bl	8003ffc <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f8e3 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000128 	.word	0x20000128
 8000940:	40004400 	.word	0x40004400

08000944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_DMA_Init+0x38>)
 800094c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <MX_DMA_Init+0x38>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6493      	str	r3, [r2, #72]	; 0x48
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_DMA_Init+0x38>)
 8000958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	200b      	movs	r0, #11
 8000968:	f001 fcdd 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800096c:	200b      	movs	r0, #11
 800096e:	f001 fcf6 	bl	800235e <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b49      	ldr	r3, [pc, #292]	; (8000abc <MX_GPIO_Init+0x13c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a48      	ldr	r2, [pc, #288]	; (8000abc <MX_GPIO_Init+0x13c>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b46      	ldr	r3, [pc, #280]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b43      	ldr	r3, [pc, #268]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a42      	ldr	r2, [pc, #264]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b40      	ldr	r3, [pc, #256]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a3c      	ldr	r2, [pc, #240]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a36      	ldr	r2, [pc, #216]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b34      	ldr	r3, [pc, #208]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	21b0      	movs	r1, #176	; 0xb0
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f002 f8d1 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|Power_LED_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000a08:	482d      	ldr	r0, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0x140>)
 8000a0a:	f002 f8cb 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0x144>)
 8000a26:	f001 ff2b 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a2a:	23b0      	movs	r3, #176	; 0xb0
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f001 ff1c 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f001 ff0f 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin Power_LED_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|Power_LED_Pin;
 8000a62:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_GPIO_Init+0x140>)
 8000a7c:	f001 ff00 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sub_Up_Pin */
  GPIO_InitStruct.Pin = Sub_Up_Pin;
 8000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Sub_Up_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f001 fef2 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sub_Down_Pin Screenshot_Pin */
  GPIO_InitStruct.Pin = Sub_Down_Pin|Screenshot_Pin;
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_GPIO_Init+0x140>)
 8000ab0:	f001 fee6 	bl	8002880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	48000800 	.word	0x48000800

08000ac8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	leftToggleUD = toggleData[0];
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000ad8:	701a      	strb	r2, [r3, #0]
	leftToggleLR = toggleData[1];
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000ae2:	701a      	strb	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	200001b8 	.word	0x200001b8
 8000af4:	200001b0 	.word	0x200001b0
 8000af8:	200001b1 	.word	0x200001b1

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0a4      	sub	sp, #144	; 0x90
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2268      	movs	r2, #104	; 0x68
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fb2b 	bl	80051cc <memset>
  if(hadc->Instance==ADC1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a3b      	ldr	r2, [pc, #236]	; (8000c68 <HAL_ADC_MspInit+0x118>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d16f      	bne.n	8000c60 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b84:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b8a:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b94:	2308      	movs	r3, #8
 8000b96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fec6 	bl	8003940 <HAL_RCCEx_PeriphCLKConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000bba:	f7ff ff9f 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_ADC_MspInit+0x11c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a2a      	ldr	r2, [pc, #168]	; (8000c6c <HAL_ADC_MspInit+0x11c>)
 8000bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <HAL_ADC_MspInit+0x11c>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_ADC_MspInit+0x11c>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <HAL_ADC_MspInit+0x11c>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <HAL_ADC_MspInit+0x11c>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Left_Toggle_UD_Pin|Left_Toggle_LR_Pin|Right_Toggle_UD_Pin|Right_Toggle_LR_Pin;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c02:	4619      	mov	r1, r3
 8000c04:	481a      	ldr	r0, [pc, #104]	; (8000c70 <HAL_ADC_MspInit+0x120>)
 8000c06:	f001 fe3b 	bl	8002880 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <HAL_ADC_MspInit+0x128>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c46:	f001 fba5 	bl	8002394 <HAL_DMA_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000c50:	f7ff ff54 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c58:	651a      	str	r2, [r3, #80]	; 0x50
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_ADC_MspInit+0x124>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3790      	adds	r7, #144	; 0x90
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	50040000 	.word	0x50040000
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000800 	.word	0x48000800
 8000c74:	200000e0 	.word	0x200000e0
 8000c78:	40020008 	.word	0x40020008

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0a4      	sub	sp, #144	; 0x90
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2268      	movs	r2, #104	; 0x68
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 fa95 	bl	80051cc <memset>
  if(huart->Instance==USART2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <HAL_UART_MspInit+0xc0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d142      	bne.n	8000d32 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fe41 	bl	8003940 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc4:	f7ff ff1a 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f001 fdaf 	bl	8002880 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f001 fafd 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2c:	2026      	movs	r0, #38	; 0x26
 8000d2e:	f001 fb16 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3790      	adds	r7, #144	; 0x90
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40021000 	.word	0x40021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f8dc 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA1_Channel1_IRQHandler+0x10>)
 8000d9e:	f001 fc90 	bl	80026c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000e0 	.word	0x200000e0

08000dac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <USART2_IRQHandler+0x10>)
 8000db2:	f003 f9fb 	bl	80041ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000128 	.word	0x20000128

08000dc0 <_sbrk>:
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
 8000df0:	f004 f9f4 	bl	80051dc <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20028000 	.word	0x20028000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	200001c8 	.word	0x200001c8
 8000e28:	20000318 	.word	0x20000318

08000e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopForever+0x2>
 8000e54:	f7ff ffea 	bl	8000e2c <SystemInit>
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <LoopForever+0x6>)
 8000e5a:	490d      	ldr	r1, [pc, #52]	; (8000e90 <LoopForever+0xa>)
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <LoopForever+0xe>)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:
 8000e62:	58d4      	ldr	r4, [r2, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:
 8000e68:	18c4      	adds	r4, r0, r3
 8000e6a:	428c      	cmp	r4, r1
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <LoopForever+0x12>)
 8000e70:	4c0a      	ldr	r4, [pc, #40]	; (8000e9c <LoopForever+0x16>)
 8000e72:	2300      	movs	r3, #0
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:
 8000e7a:	42a2      	cmp	r2, r4
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>
 8000e7e:	f004 f9b3 	bl	80051e8 <__libc_init_array>
 8000e82:	f7ff fb7b 	bl	800057c <main>

08000e86 <LoopForever>:
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
 8000e88:	20028000 	.word	0x20028000
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	2000005c 	.word	0x2000005c
 8000e94:	08005b90 	.word	0x08005b90
 8000e98:	2000005c 	.word	0x2000005c
 8000e9c:	20000318 	.word	0x20000318

08000ea0 <ADC1_IRQHandler>:
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_IRQHandler>

08000ea2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f001 fa2f 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f80e 	bl	8000ed4 <HAL_InitTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e001      	b.n	8000ec8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec4:	f7ff fe20 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <HAL_InitTick+0x6c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d023      	beq.n	8000f30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_InitTick+0x70>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_InitTick+0x6c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fa3b 	bl	800237a <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10f      	bne.n	8000f2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d809      	bhi.n	8000f24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f18:	f001 fa05 	bl	8002326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_InitTick+0x74>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e007      	b.n	8000f34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e004      	b.n	8000f34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e001      	b.n	8000f34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200001cc 	.word	0x200001cc

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001cc 	.word	0x200001cc

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3360      	adds	r3, #96	; 0x60
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <LL_ADC_SetOffset+0x44>)
 800105e:	4013      	ands	r3, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	4313      	orrs	r3, r2
 800106c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	03fff000 	.word	0x03fff000

08001084 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3360      	adds	r3, #96	; 0x60
 8001092:	461a      	mov	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3360      	adds	r3, #96	; 0x60
 80010c0:	461a      	mov	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	615a      	str	r2, [r3, #20]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001132:	b480      	push	{r7}
 8001134:	b087      	sub	sp, #28
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3330      	adds	r3, #48	; 0x30
 8001142:	461a      	mov	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	4413      	add	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	211f      	movs	r1, #31
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	401a      	ands	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0e9b      	lsrs	r3, r3, #26
 800116a:	f003 011f 	and.w	r1, r3, #31
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	431a      	orrs	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800118a:	b480      	push	{r7}
 800118c:	b087      	sub	sp, #28
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3314      	adds	r3, #20
 800119a:	461a      	mov	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	0e5b      	lsrs	r3, r3, #25
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	4413      	add	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	0d1b      	lsrs	r3, r3, #20
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	2107      	movs	r1, #7
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	401a      	ands	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	0d1b      	lsrs	r3, r3, #20
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	431a      	orrs	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f8:	43db      	mvns	r3, r3
 80011fa:	401a      	ands	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0318 	and.w	r3, r3, #24
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001204:	40d9      	lsrs	r1, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	400b      	ands	r3, r1
 800120a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120e:	431a      	orrs	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	0007ffff 	.word	0x0007ffff

08001228 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6093      	str	r3, [r2, #8]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800125c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001260:	d101      	bne.n	8001266 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001288:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012b0:	d101      	bne.n	80012b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d8:	f043 0201 	orr.w	r2, r3, #1
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <LL_ADC_IsEnabled+0x18>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <LL_ADC_IsEnabled+0x1a>
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001322:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001326:	f043 0204 	orr.w	r2, r3, #4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b04      	cmp	r3, #4
 800134c:	d101      	bne.n	8001352 <LL_ADC_REG_IsConversionOngoing+0x18>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b08      	cmp	r3, #8
 8001372:	d101      	bne.n	8001378 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e129      	b.n	80015f6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fbcd 	bl	8000b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff3f 	bl	800124c <LL_ADC_IsDeepPowerDownEnabled>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff25 	bl	8001228 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff5a 	bl	800129c <LL_ADC_IsInternalRegulatorEnabled>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d115      	bne.n	800141a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff3e 	bl	8001274 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013f8:	4b81      	ldr	r3, [pc, #516]	; (8001600 <HAL_ADC_Init+0x278>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	4a81      	ldr	r2, [pc, #516]	; (8001604 <HAL_ADC_Init+0x27c>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	3301      	adds	r3, #1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800140c:	e002      	b.n	8001414 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3b01      	subs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f9      	bne.n	800140e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff3c 	bl	800129c <LL_ADC_IsInternalRegulatorEnabled>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f043 0210 	orr.w	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff75 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 8001450:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 80c2 	bne.w	80015e4 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80be 	bne.w	80015e4 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001470:	f043 0202 	orr.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff35 	bl	80012ec <LL_ADC_IsEnabled>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10b      	bne.n	80014a0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001488:	485f      	ldr	r0, [pc, #380]	; (8001608 <HAL_ADC_Init+0x280>)
 800148a:	f7ff ff2f 	bl	80012ec <LL_ADC_IsEnabled>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4619      	mov	r1, r3
 800149a:	485c      	ldr	r0, [pc, #368]	; (800160c <HAL_ADC_Init+0x284>)
 800149c:	f7ff fd9a 	bl	8000fd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7e5b      	ldrb	r3, [r3, #25]
 80014a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d106      	bne.n	80014dc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	3b01      	subs	r3, #1
 80014d4:	045b      	lsls	r3, r3, #17
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d009      	beq.n	80014f8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_ADC_Init+0x288>)
 8001500:	4013      	ands	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	430b      	orrs	r3, r1
 800150a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff25 	bl	8001360 <LL_ADC_INJ_IsConversionOngoing>
 8001516:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d140      	bne.n	80015a0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d13d      	bne.n	80015a0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7e1b      	ldrb	r3, [r3, #24]
 800152c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800152e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001536:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001546:	f023 0306 	bic.w	r3, r3, #6
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	430b      	orrs	r3, r1
 8001552:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800155a:	2b01      	cmp	r3, #1
 800155c:	d118      	bne.n	8001590 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001574:	4311      	orrs	r1, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800157a:	4311      	orrs	r1, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001580:	430a      	orrs	r2, r1
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	e007      	b.n	80015a0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10c      	bne.n	80015c2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f023 010f 	bic.w	r1, r3, #15
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	1e5a      	subs	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
 80015c0:	e007      	b.n	80015d2 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 020f 	bic.w	r2, r2, #15
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	f023 0303 	bic.w	r3, r3, #3
 80015da:	f043 0201 	orr.w	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	659a      	str	r2, [r3, #88]	; 0x58
 80015e2:	e007      	b.n	80015f4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f043 0210 	orr.w	r2, r3, #16
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000000 	.word	0x20000000
 8001604:	053e2d63 	.word	0x053e2d63
 8001608:	50040000 	.word	0x50040000
 800160c:	50040300 	.word	0x50040300
 8001610:	fff0c007 	.word	0xfff0c007

08001614 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe88 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d167      	bne.n	8001700 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_ADC_Start_DMA+0x2a>
 800163a:	2302      	movs	r3, #2
 800163c:	e063      	b.n	8001706 <HAL_ADC_Start_DMA+0xf2>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 fc78 	bl	8001f3c <ADC_Enable>
 800164c:	4603      	mov	r3, r0
 800164e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d14f      	bne.n	80016f6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	f023 0206 	bic.w	r2, r3, #6
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	65da      	str	r2, [r3, #92]	; 0x5c
 8001682:	e002      	b.n	800168a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168e:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_ADC_Start_DMA+0xfc>)
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_ADC_Start_DMA+0x100>)
 8001698:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800169e:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <HAL_ADC_Start_DMA+0x104>)
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	221c      	movs	r2, #28
 80016a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0210 	orr.w	r2, r2, #16
 80016c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3340      	adds	r3, #64	; 0x40
 80016dc:	4619      	mov	r1, r3
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f000 ff0f 	bl	8002504 <HAL_DMA_Start_IT>
 80016e6:	4603      	mov	r3, r0
 80016e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe0f 	bl	8001312 <LL_ADC_REG_StartConversion>
 80016f4:	e006      	b.n	8001704 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80016fe:	e001      	b.n	8001704 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001700:	2302      	movs	r3, #2
 8001702:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001704:	7dfb      	ldrb	r3, [r7, #23]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	08002049 	.word	0x08002049
 8001714:	08002121 	.word	0x08002121
 8001718:	0800213d 	.word	0x0800213d

0800171c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0b6      	sub	sp, #216	; 0xd8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x22>
 8001762:	2302      	movs	r3, #2
 8001764:	e3d5      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x7ce>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fde1 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 83ba 	bne.w	8001ef4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b05      	cmp	r3, #5
 800178e:	d824      	bhi.n	80017da <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	3b02      	subs	r3, #2
 8001796:	2b03      	cmp	r3, #3
 8001798:	d81b      	bhi.n	80017d2 <HAL_ADC_ConfigChannel+0x8e>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_ADC_ConfigChannel+0x5c>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017b9 	.word	0x080017b9
 80017a8:	080017c1 	.word	0x080017c1
 80017ac:	080017c9 	.word	0x080017c9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80017b0:	230c      	movs	r3, #12
 80017b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017b6:	e010      	b.n	80017da <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017b8:	2312      	movs	r3, #18
 80017ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017be:	e00c      	b.n	80017da <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017c0:	2318      	movs	r3, #24
 80017c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017c6:	e008      	b.n	80017da <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80017c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017d0:	e003      	b.n	80017da <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80017d2:	2306      	movs	r3, #6
 80017d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017d8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80017e8:	f7ff fca3 	bl	8001132 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fda2 	bl	800133a <LL_ADC_REG_IsConversionOngoing>
 80017f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fdae 	bl	8001360 <LL_ADC_INJ_IsConversionOngoing>
 8001804:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001808:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800180c:	2b00      	cmp	r3, #0
 800180e:	f040 81bf 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 81ba 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001824:	d10f      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff fcaa 	bl	800118a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fc51 	bl	80010e6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001844:	e00e      	b.n	8001864 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	461a      	mov	r2, r3
 8001854:	f7ff fc99 	bl	800118a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fc41 	bl	80010e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d00a      	beq.n	800189c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6919      	ldr	r1, [r3, #16]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001896:	f7ff fbd1 	bl	800103c <LL_ADC_SetOffset>
 800189a:	e179      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fbee 	bl	8001084 <LL_ADC_GetOffsetChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10a      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x184>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fbe3 	bl	8001084 <LL_ADC_GetOffsetChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	0e9b      	lsrs	r3, r3, #26
 80018c2:	f003 021f 	and.w	r2, r3, #31
 80018c6:	e01e      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1c2>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fbd8 	bl	8001084 <LL_ADC_GetOffsetChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80018f6:	2320      	movs	r3, #32
 80018f8:	e004      	b.n	8001904 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80018fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <HAL_ADC_ConfigChannel+0x1da>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0e9b      	lsrs	r3, r3, #26
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	e018      	b.n	8001950 <HAL_ADC_ConfigChannel+0x20c>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800193a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001942:	2320      	movs	r3, #32
 8001944:	e004      	b.n	8001950 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001950:	429a      	cmp	r2, r3
 8001952:	d106      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fba7 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2101      	movs	r1, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fb8b 	bl	8001084 <LL_ADC_GetOffsetChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <HAL_ADC_ConfigChannel+0x24a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fb80 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	e01e      	b.n	80019cc <HAL_ADC_ConfigChannel+0x288>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2101      	movs	r1, #1
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fb75 	bl	8001084 <LL_ADC_GetOffsetChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80019ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80019b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80019bc:	2320      	movs	r3, #32
 80019be:	e004      	b.n	80019ca <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80019c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x2a0>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	e018      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x2d2>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80019f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e004      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d106      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2101      	movs	r1, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fb44 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fb28 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x310>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2102      	movs	r1, #2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fb1d 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	0e9b      	lsrs	r3, r3, #26
 8001a4e:	f003 021f 	and.w	r2, r3, #31
 8001a52:	e01e      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x34e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fb12 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e004      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a8a:	fab3 f383 	clz	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x366>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	0e9b      	lsrs	r3, r3, #26
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	e014      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x390>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	e004      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001aca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d106      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fae5 	bl	80010b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2103      	movs	r1, #3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fac9 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x3ce>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2103      	movs	r1, #3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fabe 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	0e9b      	lsrs	r3, r3, #26
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	e017      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x3fe>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2103      	movs	r1, #3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fab3 	bl	8001084 <LL_ADC_GetOffsetChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b2c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001b34:	2320      	movs	r3, #32
 8001b36:	e003      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x416>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0e9b      	lsrs	r3, r3, #26
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	e011      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x43a>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b6a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e003      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d106      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	2103      	movs	r1, #3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fa90 	bl	80010b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fba9 	bl	80012ec <LL_ADC_IsEnabled>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 813f 	bne.w	8001e20 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f7ff fb16 	bl	80011e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a8e      	ldr	r2, [pc, #568]	; (8001df4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	f040 8130 	bne.w	8001e20 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10b      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x4a4>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e019      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x4d8>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	e003      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2b09      	cmp	r3, #9
 8001c14:	bf94      	ite	ls
 8001c16:	2301      	movls	r3, #1
 8001c18:	2300      	movhi	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d079      	beq.n	8001d14 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d107      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x4f8>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0e9b      	lsrs	r3, r3, #26
 8001c32:	3301      	adds	r3, #1
 8001c34:	069b      	lsls	r3, r3, #26
 8001c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3a:	e015      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x524>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001c54:	2320      	movs	r3, #32
 8001c56:	e003      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	069b      	lsls	r3, r3, #26
 8001c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x544>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	e017      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x574>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c98:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	e003      	b.n	8001cac <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	ea42 0103 	orr.w	r1, r2, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x59a>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0e9b      	lsrs	r3, r3, #26
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	051b      	lsls	r3, r3, #20
 8001cdc:	e018      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x5cc>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	e003      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d10:	430b      	orrs	r3, r1
 8001d12:	e080      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x5ec>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	3301      	adds	r3, #1
 8001d28:	069b      	lsls	r3, r3, #26
 8001d2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d2e:	e015      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x618>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e003      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	069b      	lsls	r3, r3, #26
 8001d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x638>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	e017      	b.n	8001dac <HAL_ADC_ConfigChannel+0x668>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	61bb      	str	r3, [r7, #24]
  return result;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001d94:	2320      	movs	r3, #32
 8001d96:	e003      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2101      	movs	r1, #1
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	ea42 0103 	orr.w	r1, r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x694>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	051b      	lsls	r3, r3, #20
 8001dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	e01d      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x6d0>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	60fb      	str	r3, [r7, #12]
  return result;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d103      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e005      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x6bc>
 8001df4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	f003 021f 	and.w	r2, r3, #31
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b1e      	subs	r3, #30
 8001e0e:	051b      	lsls	r3, r3, #20
 8001e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7ff f9b5 	bl	800118a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_ADC_ConfigChannel+0x7d8>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d06c      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e2c:	483c      	ldr	r0, [pc, #240]	; (8001f20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e2e:	f7ff f8f7 	bl	8001020 <LL_ADC_GetCommonPathInternalCh>
 8001e32:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3a      	ldr	r2, [pc, #232]	; (8001f24 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d127      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d121      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a35      	ldr	r2, [pc, #212]	; (8001f28 <HAL_ADC_ConfigChannel+0x7e4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d157      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e5e:	4619      	mov	r1, r3
 8001e60:	482f      	ldr	r0, [pc, #188]	; (8001f20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e62:	f7ff f8ca 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_ADC_ConfigChannel+0x7e8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e8e:	e03a      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <HAL_ADC_ConfigChannel+0x7f0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d113      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <HAL_ADC_ConfigChannel+0x7e4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d12a      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4819      	ldr	r0, [pc, #100]	; (8001f20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ebc:	f7ff f89d 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ec0:	e021      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d11c      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d116      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d111      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ee6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001eee:	f7ff f884 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
 8001ef2:	e008      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	37d8      	adds	r7, #216	; 0xd8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	80080000 	.word	0x80080000
 8001f20:	50040300 	.word	0x50040300
 8001f24:	c7520000 	.word	0xc7520000
 8001f28:	50040000 	.word	0x50040000
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	053e2d63 	.word	0x053e2d63
 8001f34:	cb840000 	.word	0xcb840000
 8001f38:	80000001 	.word	0x80000001

08001f3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f9cd 	bl	80012ec <LL_ADC_IsEnabled>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d169      	bne.n	800202c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	4b36      	ldr	r3, [pc, #216]	; (8002038 <ADC_Enable+0xfc>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00d      	beq.n	8001f82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	f043 0210 	orr.w	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e055      	b.n	800202e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f99c 	bl	80012c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f8c:	482b      	ldr	r0, [pc, #172]	; (800203c <ADC_Enable+0x100>)
 8001f8e:	f7ff f847 	bl	8001020 <LL_ADC_GetCommonPathInternalCh>
 8001f92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <ADC_Enable+0x104>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	4a28      	ldr	r2, [pc, #160]	; (8002044 <ADC_Enable+0x108>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fb6:	e002      	b.n	8001fbe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fc4:	f7fe ffd6 	bl	8000f74 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fca:	e028      	b.n	800201e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f98b 	bl	80012ec <LL_ADC_IsEnabled>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f96f 	bl	80012c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fe6:	f7fe ffc5 	bl	8000f74 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d914      	bls.n	800201e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d00d      	beq.n	800201e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e007      	b.n	800202e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d1cf      	bne.n	8001fcc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	8000003f 	.word	0x8000003f
 800203c:	50040300 	.word	0x50040300
 8002040:	20000000 	.word	0x20000000
 8002044:	053e2d63 	.word	0x053e2d63

08002048 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800205e:	2b00      	cmp	r3, #0
 8002060:	d14b      	bne.n	80020fa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d021      	beq.n	80020c0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f843 	bl	800110c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d032      	beq.n	80020f2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d12b      	bne.n	80020f2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11f      	bne.n	80020f2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58
 80020be:	e018      	b.n	80020f2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d111      	bne.n	80020f2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff fb12 	bl	800171c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020f8:	e00e      	b.n	8002118 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff fb12 	bl	8001730 <HAL_ADC_ErrorCallback>
}
 800210c:	e004      	b.n	8002118 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7fe fcca 	bl	8000ac8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	f043 0204 	orr.w	r2, r3, #4
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7ff fae4 	bl	8001730 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff29 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff3e 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff8e 	bl	8002264 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff31 	bl	80021d4 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ffa2 	bl	80022cc <SysTick_Config>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e098      	b.n	80024d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_DMA_Init+0x150>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d80f      	bhi.n	80023d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_DMA_Init+0x154>)
 80023ba:	4413      	add	r3, r2
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_DMA_Init+0x158>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	009a      	lsls	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a48      	ldr	r2, [pc, #288]	; (80024f0 <HAL_DMA_Init+0x15c>)
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
 80023d0:	e00e      	b.n	80023f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_DMA_Init+0x160>)
 80023da:	4413      	add	r3, r2
 80023dc:	4a43      	ldr	r2, [pc, #268]	; (80024ec <HAL_DMA_Init+0x158>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	009a      	lsls	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a42      	ldr	r2, [pc, #264]	; (80024f8 <HAL_DMA_Init+0x164>)
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800244a:	d039      	beq.n	80024c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_DMA_Init+0x15c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d11a      	bne.n	800248c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_DMA_Init+0x168>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f003 031c 	and.w	r3, r3, #28
 8002462:	210f      	movs	r1, #15
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	4924      	ldr	r1, [pc, #144]	; (80024fc <HAL_DMA_Init+0x168>)
 800246c:	4013      	ands	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_DMA_Init+0x168>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f003 031c 	and.w	r3, r3, #28
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	491d      	ldr	r1, [pc, #116]	; (80024fc <HAL_DMA_Init+0x168>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
 800248a:	e019      	b.n	80024c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_DMA_Init+0x16c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	f003 031c 	and.w	r3, r3, #28
 8002498:	210f      	movs	r1, #15
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	4917      	ldr	r1, [pc, #92]	; (8002500 <HAL_DMA_Init+0x16c>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_DMA_Init+0x16c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f003 031c 	and.w	r3, r3, #28
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	4911      	ldr	r1, [pc, #68]	; (8002500 <HAL_DMA_Init+0x16c>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40020407 	.word	0x40020407
 80024e8:	bffdfff8 	.word	0xbffdfff8
 80024ec:	cccccccd 	.word	0xcccccccd
 80024f0:	40020000 	.word	0x40020000
 80024f4:	bffdfbf8 	.word	0xbffdfbf8
 80024f8:	40020400 	.word	0x40020400
 80024fc:	400200a8 	.word	0x400200a8
 8002500:	400204a8 	.word	0x400204a8

08002504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Start_IT+0x20>
 8002520:	2302      	movs	r3, #2
 8002522:	e04b      	b.n	80025bc <HAL_DMA_Start_IT+0xb8>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d13a      	bne.n	80025ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f95f 	bl	8002820 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 020e 	orr.w	r2, r2, #14
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e00f      	b.n	800259c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 020a 	orr.w	r2, r2, #10
 800259a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e005      	b.n	80025ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2204      	movs	r2, #4
 80025e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e022      	b.n	8002634 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f003 021c 	and.w	r2, r3, #28
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d005      	beq.n	8002664 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2204      	movs	r2, #4
 800265c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e029      	b.n	80026b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 020e 	bic.w	r2, r2, #14
 8002672:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f003 021c 	and.w	r2, r3, #28
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
    }
  }
  return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f003 031c 	and.w	r3, r3, #28
 80026e2:	2204      	movs	r2, #4
 80026e4:	409a      	lsls	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d026      	beq.n	800273c <HAL_DMA_IRQHandler+0x7a>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d021      	beq.n	800273c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d107      	bne.n	8002716 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0204 	bic.w	r2, r2, #4
 8002714:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f003 021c 	and.w	r2, r3, #28
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2104      	movs	r1, #4
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	2b00      	cmp	r3, #0
 8002730:	d071      	beq.n	8002816 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800273a:	e06c      	b.n	8002816 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f003 031c 	and.w	r3, r3, #28
 8002744:	2202      	movs	r2, #2
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d02e      	beq.n	80027ae <HAL_DMA_IRQHandler+0xec>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d029      	beq.n	80027ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 020a 	bic.w	r2, r2, #10
 8002776:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f003 021c 	and.w	r2, r3, #28
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2102      	movs	r1, #2
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d038      	beq.n	8002816 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80027ac:	e033      	b.n	8002816 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f003 031c 	and.w	r3, r3, #28
 80027b6:	2208      	movs	r2, #8
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02a      	beq.n	8002818 <HAL_DMA_IRQHandler+0x156>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d025      	beq.n	8002818 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 020e 	bic.w	r2, r2, #14
 80027da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	f003 021c 	and.w	r2, r3, #28
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002816:	bf00      	nop
 8002818:	bf00      	nop
}
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f003 021c 	and.w	r2, r3, #28
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b10      	cmp	r3, #16
 8002850:	d108      	bne.n	8002864 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002862:	e007      	b.n	8002874 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	60da      	str	r2, [r3, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	e154      	b.n	8002b3a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8146 	beq.w	8002b34 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d005      	beq.n	80028c0 <HAL_GPIO_Init+0x40>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d130      	bne.n	8002922 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f6:	2201      	movs	r2, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0201 	and.w	r2, r3, #1
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b03      	cmp	r3, #3
 800292c:	d017      	beq.n	800295e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d123      	bne.n	80029b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	6939      	ldr	r1, [r7, #16]
 80029ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0203 	and.w	r2, r3, #3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80a0 	beq.w	8002b34 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f4:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <HAL_GPIO_Init+0x2d8>)
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	4a57      	ldr	r2, [pc, #348]	; (8002b58 <HAL_GPIO_Init+0x2d8>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <HAL_GPIO_Init+0x2d8>)
 8002a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a0c:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3302      	adds	r3, #2
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a36:	d019      	beq.n	8002a6c <HAL_GPIO_Init+0x1ec>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a49      	ldr	r2, [pc, #292]	; (8002b60 <HAL_GPIO_Init+0x2e0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_GPIO_Init+0x1e8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_GPIO_Init+0x2e4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00d      	beq.n	8002a64 <HAL_GPIO_Init+0x1e4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_GPIO_Init+0x2e8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <HAL_GPIO_Init+0x1e0>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_GPIO_Init+0x2ec>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_GPIO_Init+0x1dc>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e008      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a5c:	2307      	movs	r3, #7
 8002a5e:	e006      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a60:	2303      	movs	r3, #3
 8002a62:	e004      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e002      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_GPIO_Init+0x1ee>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	f002 0203 	and.w	r2, r2, #3
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	4093      	lsls	r3, r2
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a7e:	4937      	ldr	r1, [pc, #220]	; (8002b5c <HAL_GPIO_Init+0x2dc>)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ab0:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ada:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b04:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_GPIO_Init+0x2f0>)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3301      	adds	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f aea3 	bne.w	8002890 <HAL_GPIO_Init+0x10>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	48000400 	.word	0x48000400
 8002b64:	48000800 	.word	0x48000800
 8002b68:	48000c00 	.word	0x48000c00
 8002b6c:	48001000 	.word	0x48001000
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	e001      	b.n	8002b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4013      	ands	r3, r2
 8002bec:	041a      	lsls	r2, r3, #16
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	43d9      	mvns	r1, r3
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c32:	d130      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d038      	beq.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2232      	movs	r2, #50	; 0x32
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9b      	lsrs	r3, r3, #18
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c68:	e002      	b.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d102      	bne.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f2      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c90:	d110      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e00f      	b.n	8002cb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d007      	beq.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cac:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	431bde83 	.word	0x431bde83

08002cd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f000 bc02 	b.w	80034e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce4:	4b96      	ldr	r3, [pc, #600]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cee:	4b94      	ldr	r3, [pc, #592]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80e4 	beq.w	8002ece <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4c>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	f040 808b 	bne.w	8002e2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	f040 8087 	bne.w	8002e2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d1c:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_OscConfig+0x64>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e3d9      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	4b81      	ldr	r3, [pc, #516]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_RCC_OscConfig+0x7e>
 8002d44:	4b7e      	ldr	r3, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d4c:	e005      	b.n	8002d5a <HAL_RCC_OscConfig+0x8a>
 8002d4e:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d223      	bcs.n	8002da6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fd8c 	bl	8003880 <RCC_SetFlashLatencyFromMSIRange>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e3ba      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d72:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a72      	ldr	r2, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b70      	ldr	r3, [pc, #448]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	496d      	ldr	r1, [pc, #436]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	4968      	ldr	r1, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	e025      	b.n	8002df2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da6:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4960      	ldr	r1, [pc, #384]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc4:	4b5e      	ldr	r3, [pc, #376]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	495b      	ldr	r1, [pc, #364]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fd4c 	bl	8003880 <RCC_SetFlashLatencyFromMSIRange>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e37a      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df2:	f000 fc81 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4950      	ldr	r1, [pc, #320]	; (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0e:	4a4e      	ldr	r2, [pc, #312]	; (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e12:	4b4e      	ldr	r3, [pc, #312]	; (8002f4c <HAL_RCC_OscConfig+0x27c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f85c 	bl	8000ed4 <HAL_InitTick>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d052      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	e35e      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d032      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a42      	ldr	r2, [pc, #264]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f899 	bl	8000f74 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e46:	f7fe f895 	bl	8000f74 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e347      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4930      	ldr	r1, [pc, #192]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	492b      	ldr	r1, [pc, #172]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
 8002e96:	e01a      	b.n	8002ece <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f866 	bl	8000f74 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eac:	f7fe f862 	bl	8000f74 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e314      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1dc>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d073      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x21c>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d10e      	bne.n	8002f04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d063      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x2f0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d15f      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e2f1      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x24c>
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e025      	b.n	8002f68 <HAL_RCC_OscConfig+0x298>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d114      	bne.n	8002f50 <HAL_RCC_OscConfig+0x280>
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a02      	ldr	r2, [pc, #8]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e013      	b.n	8002f68 <HAL_RCC_OscConfig+0x298>
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08005b04 	.word	0x08005b04
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	4ba0      	ldr	r3, [pc, #640]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a9f      	ldr	r2, [pc, #636]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b9d      	ldr	r3, [pc, #628]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a9c      	ldr	r2, [pc, #624]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe f800 	bl	8000f74 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fd fffc 	bl	8000f74 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e2ae      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	4b92      	ldr	r3, [pc, #584]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2a8>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd ffec 	bl	8000f74 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fd ffe8 	bl	8000f74 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e29a      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb2:	4b88      	ldr	r3, [pc, #544]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2d0>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d060      	beq.n	8003090 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x310>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d119      	bne.n	800300e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d116      	bne.n	800300e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x328>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e277      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	4973      	ldr	r1, [pc, #460]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300c:	e040      	b.n	8003090 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d023      	beq.n	800305e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003016:	4b6f      	ldr	r3, [pc, #444]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6e      	ldr	r2, [pc, #440]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fd ffa7 	bl	8000f74 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7fd ffa3 	bl	8000f74 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e255      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	495f      	ldr	r1, [pc, #380]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
 800305c:	e018      	b.n	8003090 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fd ff83 	bl	8000f74 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003072:	f7fd ff7f 	bl	8000f74 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e231      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d03c      	beq.n	8003116 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01c      	beq.n	80030de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a4:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030aa:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fd ff5e 	bl	8000f74 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fd ff5a 	bl	8000f74 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e20c      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ef      	beq.n	80030bc <HAL_RCC_OscConfig+0x3ec>
 80030dc:	e01b      	b.n	8003116 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	4a3b      	ldr	r2, [pc, #236]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fd ff41 	bl	8000f74 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fd ff3d 	bl	8000f74 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1ef      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003108:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ef      	bne.n	80030f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80a6 	beq.w	8003270 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	6593      	str	r3, [r2, #88]	; 0x58
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314c:	2301      	movs	r3, #1
 800314e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d118      	bne.n	800318e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_RCC_OscConfig+0x508>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003168:	f7fd ff04 	bl	8000f74 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fd ff00 	bl	8000f74 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1b2      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d108      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4d8>
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a6:	e029      	b.n	80031fc <HAL_RCC_OscConfig+0x52c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d115      	bne.n	80031dc <HAL_RCC_OscConfig+0x50c>
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a03      	ldr	r2, [pc, #12]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d0:	e014      	b.n	80031fc <HAL_RCC_OscConfig+0x52c>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
 80031dc:	4b9a      	ldr	r3, [pc, #616]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a99      	ldr	r2, [pc, #612]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ec:	4b96      	ldr	r3, [pc, #600]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	4a95      	ldr	r2, [pc, #596]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d016      	beq.n	8003232 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd feb6 	bl	8000f74 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fd feb2 	bl	8000f74 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e162      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003222:	4b89      	ldr	r3, [pc, #548]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ed      	beq.n	800320c <HAL_RCC_OscConfig+0x53c>
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fd fe9f 	bl	8000f74 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fd fe9b 	bl	8000f74 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e14b      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003250:	4b7d      	ldr	r3, [pc, #500]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ed      	bne.n	800323a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b78      	ldr	r3, [pc, #480]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	4a77      	ldr	r2, [pc, #476]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d03c      	beq.n	80032f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01c      	beq.n	80032be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003284:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328a:	4a6f      	ldr	r2, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fd fe6e 	bl	8000f74 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800329c:	f7fd fe6a 	bl	8000f74 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e11c      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ae:	4b66      	ldr	r3, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80032b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ef      	beq.n	800329c <HAL_RCC_OscConfig+0x5cc>
 80032bc:	e01b      	b.n	80032f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032be:	4b62      	ldr	r3, [pc, #392]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80032c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c4:	4a60      	ldr	r2, [pc, #384]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fd fe51 	bl	8000f74 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d6:	f7fd fe4d 	bl	8000f74 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0ff      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e8:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80032ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ef      	bne.n	80032d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80f3 	beq.w	80034e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	2b02      	cmp	r3, #2
 8003306:	f040 80c9 	bne.w	800349c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800330a:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0203 	and.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	429a      	cmp	r2, r3
 800331c:	d12c      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	3b01      	subs	r3, #1
 800332a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d123      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d11b      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d113      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d109      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	3b01      	subs	r3, #1
 8003372:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d06b      	beq.n	8003450 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d062      	beq.n	8003444 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0ac      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800338e:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003398:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800339a:	f7fd fdeb 	bl	8000f74 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fd fde7 	bl	8000f74 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e099      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b4:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_RCC_OscConfig+0x77c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033da:	0212      	lsls	r2, r2, #8
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033e2:	0852      	lsrs	r2, r2, #1
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0552      	lsls	r2, r2, #21
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ee:	0852      	lsrs	r2, r2, #1
 80033f0:	3a01      	subs	r2, #1
 80033f2:	0652      	lsls	r2, r2, #25
 80033f4:	4311      	orrs	r1, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033fa:	06d2      	lsls	r2, r2, #27
 80033fc:	430a      	orrs	r2, r1
 80033fe:	4912      	ldr	r1, [pc, #72]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003400:	4313      	orrs	r3, r2
 8003402:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003404:	4b10      	ldr	r3, [pc, #64]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800341c:	f7fd fdaa 	bl	8000f74 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7fd fda6 	bl	8000f74 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e058      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003442:	e050      	b.n	80034e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e04f      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
 8003448:	40021000 	.word	0x40021000
 800344c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d144      	bne.n	80034e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003466:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003472:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003474:	f7fd fd7e 	bl	8000f74 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd fd7a 	bl	8000f74 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e02c      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x7ac>
 800349a:	e024      	b.n	80034e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d01f      	beq.n	80034e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd fd61 	bl	8000f74 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fd fd5d 	bl	8000f74 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	4905      	ldr	r1, [pc, #20]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_OscConfig+0x824>)
 80034dc:	4013      	ands	r3, r2
 80034de:	60cb      	str	r3, [r1, #12]
 80034e0:	e001      	b.n	80034e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	feeefffc 	.word	0xfeeefffc

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0e7      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b75      	ldr	r3, [pc, #468]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d910      	bls.n	800353c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b72      	ldr	r3, [pc, #456]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 0207 	bic.w	r2, r3, #7
 8003522:	4970      	ldr	r1, [pc, #448]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b6e      	ldr	r3, [pc, #440]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0cf      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003554:	429a      	cmp	r2, r3
 8003556:	d908      	bls.n	800356a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4960      	ldr	r1, [pc, #384]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d04c      	beq.n	8003610 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	4b5a      	ldr	r3, [pc, #360]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d121      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e0a6      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d115      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e09a      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e08e      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035be:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e086      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b46      	ldr	r3, [pc, #280]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4943      	ldr	r1, [pc, #268]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fd fcc8 	bl	8000f74 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fd fcc4 	bl	8000f74 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e06e      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003628:	429a      	cmp	r2, r3
 800362a:	d208      	bcs.n	800363e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	492b      	ldr	r1, [pc, #172]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d210      	bcs.n	800366e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 0207 	bic.w	r2, r3, #7
 8003654:	4923      	ldr	r1, [pc, #140]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365c:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e036      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4918      	ldr	r1, [pc, #96]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4910      	ldr	r1, [pc, #64]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ac:	f000 f824 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	490b      	ldr	r1, [pc, #44]	; (80036ec <HAL_RCC_ClockConfig+0x1f4>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80036ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1fc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd fbff 	bl	8000ed4 <HAL_InitTick>
 80036d6:	4603      	mov	r3, r0
 80036d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036da:	7afb      	ldrb	r3, [r7, #11]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08005b04 	.word	0x08005b04
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003706:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x34>
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d121      	bne.n	800376a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d11e      	bne.n	800376a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800372c:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e005      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003748:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003754:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10d      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003768:	e00a      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d102      	bne.n	8003776 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <HAL_RCC_GetSysClockFreq+0x110>)
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e004      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d101      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800377c:	4b23      	ldr	r3, [pc, #140]	; (800380c <HAL_RCC_GetSysClockFreq+0x114>)
 800377e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b0c      	cmp	r3, #12
 8003784:	d134      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003786:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d003      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0xa6>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d003      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0xac>
 800379c:	e005      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <HAL_RCC_GetSysClockFreq+0x110>)
 80037a0:	617b      	str	r3, [r7, #20]
      break;
 80037a2:	e005      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_GetSysClockFreq+0x114>)
 80037a6:	617b      	str	r3, [r7, #20]
      break;
 80037a8:	e002      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	617b      	str	r3, [r7, #20]
      break;
 80037ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	3301      	adds	r3, #1
 80037bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	fb03 f202 	mul.w	r2, r3, r2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	0e5b      	lsrs	r3, r3, #25
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	3301      	adds	r3, #1
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037f0:	69bb      	ldr	r3, [r7, #24]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3724      	adds	r7, #36	; 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	08005b1c 	.word	0x08005b1c
 8003808:	00f42400 	.word	0x00f42400
 800380c:	007a1200 	.word	0x007a1200

08003810 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000000 	.word	0x20000000

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	08005b14 	.word	0x08005b14

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003858:	f7ff ffda 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0adb      	lsrs	r3, r3, #11
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4904      	ldr	r1, [pc, #16]	; (800387c <HAL_RCC_GetPCLK2Freq+0x28>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	08005b14 	.word	0x08005b14

08003880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003898:	f7ff f9b6 	bl	8002c08 <HAL_PWREx_GetVoltageRange>
 800389c:	6178      	str	r0, [r7, #20]
 800389e:	e014      	b.n	80038ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6593      	str	r3, [r2, #88]	; 0x58
 80038ac:	4b22      	ldr	r3, [pc, #136]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038b8:	f7ff f9a6 	bl	8002c08 <HAL_PWREx_GetVoltageRange>
 80038bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038be:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d0:	d10b      	bne.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d919      	bls.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2ba0      	cmp	r3, #160	; 0xa0
 80038dc:	d902      	bls.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038de:	2302      	movs	r3, #2
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e013      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038e4:	2301      	movs	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e010      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d902      	bls.n	80038f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038f0:	2303      	movs	r3, #3
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	e00a      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b80      	cmp	r3, #128	; 0x80
 80038fa:	d102      	bne.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038fc:	2302      	movs	r3, #2
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e004      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b70      	cmp	r3, #112	; 0x70
 8003906:	d101      	bne.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003908:	2301      	movs	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 0207 	bic.w	r2, r3, #7
 8003914:	4909      	ldr	r1, [pc, #36]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	40022000 	.word	0x40022000

08003940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003948:	2300      	movs	r3, #0
 800394a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800394c:	2300      	movs	r3, #0
 800394e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003958:	2b00      	cmp	r3, #0
 800395a:	d031      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003960:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003964:	d01a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003966:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800396a:	d814      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003974:	d10f      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003976:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a5c      	ldr	r2, [pc, #368]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003982:	e00c      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa44 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003994:	e003      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	74fb      	strb	r3, [r7, #19]
      break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800399c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a4:	4b51      	ldr	r3, [pc, #324]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	494e      	ldr	r1, [pc, #312]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ba:	e001      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 809e 	beq.w	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039d2:	4b46      	ldr	r3, [pc, #280]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b40      	ldr	r3, [pc, #256]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6593      	str	r3, [r2, #88]	; 0x58
 80039f4:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a04:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a39      	ldr	r2, [pc, #228]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a10:	f7fd fab0 	bl	8000f74 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a16:	e009      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a18:	f7fd faac 	bl	8000f74 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d902      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	74fb      	strb	r3, [r7, #19]
        break;
 8003a2a:	e005      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a2c:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ef      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a38:	7cfb      	ldrb	r3, [r7, #19]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d15a      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a3e:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01e      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d019      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a86:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd fa6c 	bl	8000f74 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fa68 	bl	8000f74 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d902      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	74fb      	strb	r3, [r7, #19]
            break;
 8003ab6:	e006      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ec      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ada:	4904      	ldr	r1, [pc, #16]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ae2:	e009      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	74bb      	strb	r3, [r7, #18]
 8003ae8:	e006      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af8:	7c7b      	ldrb	r3, [r7, #17]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afe:	4b9e      	ldr	r3, [pc, #632]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	4a9d      	ldr	r2, [pc, #628]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b16:	4b98      	ldr	r3, [pc, #608]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f023 0203 	bic.w	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4994      	ldr	r1, [pc, #592]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b38:	4b8f      	ldr	r3, [pc, #572]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f023 020c 	bic.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	498c      	ldr	r1, [pc, #560]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b5a:	4b87      	ldr	r3, [pc, #540]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	4983      	ldr	r1, [pc, #524]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b7c:	4b7e      	ldr	r3, [pc, #504]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	497b      	ldr	r1, [pc, #492]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4972      	ldr	r1, [pc, #456]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc0:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	496a      	ldr	r1, [pc, #424]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	4961      	ldr	r1, [pc, #388]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c04:	4b5c      	ldr	r3, [pc, #368]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	4959      	ldr	r1, [pc, #356]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c26:	4b54      	ldr	r3, [pc, #336]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	4950      	ldr	r1, [pc, #320]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c48:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	4948      	ldr	r1, [pc, #288]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c6a:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c70:	f023 0203 	bic.w	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	493f      	ldr	r1, [pc, #252]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d028      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c8c:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	4937      	ldr	r1, [pc, #220]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003caa:	d106      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cac:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a31      	ldr	r2, [pc, #196]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb6:	60d3      	str	r3, [r2, #12]
 8003cb8:	e011      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f8a4 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003cda:	7cfb      	ldrb	r3, [r7, #19]
 8003cdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d028      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cea:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	491f      	ldr	r1, [pc, #124]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d14:	60d3      	str	r3, [r2, #12]
 8003d16:	e011      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f875 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d02b      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	4908      	ldr	r1, [pc, #32]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d66:	d109      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a02      	ldr	r2, [pc, #8]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d72:	60d3      	str	r3, [r2, #12]
 8003d74:	e014      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f843 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01c      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	4916      	ldr	r1, [pc, #88]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f820 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e00:	4904      	ldr	r1, [pc, #16]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e08:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000

08003e18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e26:	4b74      	ldr	r3, [pc, #464]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e32:	4b71      	ldr	r3, [pc, #452]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0203 	and.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d10d      	bne.n	8003e5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
       ||
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e4a:	4b6b      	ldr	r3, [pc, #428]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
       ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d047      	beq.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	e044      	b.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d018      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0x86>
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d825      	bhi.n	8003ebc <RCCEx_PLLSAI1_Config+0xa4>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d002      	beq.n	8003e7a <RCCEx_PLLSAI1_Config+0x62>
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d009      	beq.n	8003e8c <RCCEx_PLLSAI1_Config+0x74>
 8003e78:	e020      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11d      	bne.n	8003ec2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8a:	e01a      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d116      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e013      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e9e:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eaa:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eba:	e006      	b.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e004      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e002      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ed2:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	4943      	ldr	r1, [pc, #268]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d17c      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3f      	ldr	r2, [pc, #252]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd f838 	bl	8000f74 <HAL_GetTick>
 8003f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f06:	e009      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f08:	f7fd f834 	bl	8000f74 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d902      	bls.n	8003f1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	73fb      	strb	r3, [r7, #15]
        break;
 8003f1a:	e005      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ef      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d15f      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f34:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	0211      	lsls	r1, r2, #8
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68d2      	ldr	r2, [r2, #12]
 8003f4a:	06d2      	lsls	r2, r2, #27
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	492a      	ldr	r1, [pc, #168]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	610b      	str	r3, [r1, #16]
 8003f54:	e027      	b.n	8003fa6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d112      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f5c:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6892      	ldr	r2, [r2, #8]
 8003f6c:	0211      	lsls	r1, r2, #8
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6912      	ldr	r2, [r2, #16]
 8003f72:	0852      	lsrs	r2, r2, #1
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0552      	lsls	r2, r2, #21
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	491f      	ldr	r1, [pc, #124]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	610b      	str	r3, [r1, #16]
 8003f80:	e011      	b.n	8003fa6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f82:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6892      	ldr	r2, [r2, #8]
 8003f92:	0211      	lsls	r1, r2, #8
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6952      	ldr	r2, [r2, #20]
 8003f98:	0852      	lsrs	r2, r2, #1
 8003f9a:	3a01      	subs	r2, #1
 8003f9c:	0652      	lsls	r2, r2, #25
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	4915      	ldr	r1, [pc, #84]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb2:	f7fc ffdf 	bl	8000f74 <HAL_GetTick>
 8003fb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fb8:	e009      	b.n	8003fce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fba:	f7fc ffdb 	bl	8000f74 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d902      	bls.n	8003fce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	73fb      	strb	r3, [r7, #15]
          break;
 8003fcc:	e005      	b.n	8003fda <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ef      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4903      	ldr	r1, [pc, #12]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e040      	b.n	8004090 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc fe2c 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	; 0x24
 8004028:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fe42 	bl	8004ccc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fbb9 	bl	80047c0 <UART_SetConfig>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e01b      	b.n	8004090 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fec1 	bl	8004e10 <UART_CheckIdleState>
 800408e:	4603      	mov	r3, r0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d178      	bne.n	80041a2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_UART_Transmit+0x24>
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e071      	b.n	80041a4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2221      	movs	r2, #33	; 0x21
 80040cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ce:	f7fc ff51 	bl	8000f74 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d108      	bne.n	8004100 <HAL_UART_Transmit+0x68>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	e003      	b.n	8004108 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004108:	e030      	b.n	800416c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	2180      	movs	r1, #128	; 0x80
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 ff23 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e03c      	b.n	80041a4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	881a      	ldrh	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	b292      	uxth	r2, r2
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	3302      	adds	r3, #2
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e008      	b.n	800415a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	b292      	uxth	r2, r2
 8004152:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3301      	adds	r3, #1
 8004158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1c8      	bne.n	800410a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 feec 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e005      	b.n	80041a4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b0ba      	sub	sp, #232	; 0xe8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80041da:	4013      	ands	r3, r2
 80041dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d115      	bne.n	8004214 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00f      	beq.n	8004214 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 82ae 	beq.w	8004766 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
      }
      return;
 8004212:	e2a8      	b.n	8004766 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8117 	beq.w	800444c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800421e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800422a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800422e:	4b85      	ldr	r3, [pc, #532]	; (8004444 <HAL_UART_IRQHandler+0x298>)
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 810a 	beq.w	800444c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d011      	beq.n	8004268 <HAL_UART_IRQHandler+0xbc>
 8004244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2201      	movs	r2, #1
 8004256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	f043 0201 	orr.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d011      	beq.n	8004298 <HAL_UART_IRQHandler+0xec>
 8004274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2202      	movs	r2, #2
 8004286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428e:	f043 0204 	orr.w	r2, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <HAL_UART_IRQHandler+0x11c>
 80042a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2204      	movs	r2, #4
 80042b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042be:	f043 0202 	orr.w	r2, r3, #2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d017      	beq.n	8004304 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00b      	beq.n	8004304 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2208      	movs	r2, #8
 80042f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fa:	f043 0208 	orr.w	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_UART_IRQHandler+0x18a>
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00c      	beq.n	8004336 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8214 	beq.w	800476a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00d      	beq.n	800436a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800434e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004370:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d005      	beq.n	800438e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004386:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04f      	beq.n	800442e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fe4d 	bl	800502e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d141      	bne.n	8004426 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1d9      	bne.n	80043a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d013      	beq.n	800441e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <HAL_UART_IRQHandler+0x29c>)
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe f91c 	bl	8002640 <HAL_DMA_Abort_IT>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d017      	beq.n	800443e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004418:	4610      	mov	r0, r2
 800441a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	e00f      	b.n	800443e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9b8 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	e00b      	b.n	800443e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f9b4 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	e007      	b.n	800443e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f9b0 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800443c:	e195      	b.n	800476a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443e:	bf00      	nop
    return;
 8004440:	e193      	b.n	800476a <HAL_UART_IRQHandler+0x5be>
 8004442:	bf00      	nop
 8004444:	04000120 	.word	0x04000120
 8004448:	080050f7 	.word	0x080050f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 814e 	bne.w	80046f2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8147 	beq.w	80046f2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8140 	beq.w	80046f2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2210      	movs	r2, #16
 8004478:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	f040 80b8 	bne.w	80045fa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004496:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8167 	beq.w	800476e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044aa:	429a      	cmp	r2, r3
 80044ac:	f080 815f 	bcs.w	800476e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 8086 	bne.w	80045d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800450e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1da      	bne.n	80044cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3308      	adds	r3, #8
 800451c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3308      	adds	r3, #8
 8004536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800453a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800453e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800454c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e1      	bne.n	8004516 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3308      	adds	r3, #8
 8004558:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800457c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e3      	bne.n	8004552 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80045bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e4      	bne.n	8004598 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd fff6 	bl	80025c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4619      	mov	r1, r3
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8d8 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045f8:	e0b9      	b.n	800476e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004606:	b29b      	uxth	r3, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80ab 	beq.w	8004772 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800461c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a6 	beq.w	8004772 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800463a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
 800464a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800464e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e4      	bne.n	8004626 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3308      	adds	r3, #8
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	623b      	str	r3, [r7, #32]
   return(result);
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004680:	633a      	str	r2, [r7, #48]	; 0x30
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e3      	bne.n	800465c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f023 0310 	bic.w	r3, r3, #16
 80046bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	69b9      	ldr	r1, [r7, #24]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	617b      	str	r3, [r7, #20]
   return(result);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e4      	bne.n	80046a8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f85c 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046f0:	e03f      	b.n	8004772 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00e      	beq.n	800471c <HAL_UART_IRQHandler+0x570>
 80046fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004712:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fd2e 	bl	8005176 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800471a:	e02d      	b.n	8004778 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
    }
    return;
 8004744:	e017      	b.n	8004776 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d012      	beq.n	8004778 <HAL_UART_IRQHandler+0x5cc>
 8004752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fcdf 	bl	8005122 <UART_EndTransmit_IT>
    return;
 8004764:	e008      	b.n	8004778 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004766:	bf00      	nop
 8004768:	e006      	b.n	8004778 <HAL_UART_IRQHandler+0x5cc>
    return;
 800476a:	bf00      	nop
 800476c:	e004      	b.n	8004778 <HAL_UART_IRQHandler+0x5cc>
      return;
 800476e:	bf00      	nop
 8004770:	e002      	b.n	8004778 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004776:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004778:	37e8      	adds	r7, #232	; 0xe8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop

08004780 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c4:	b08a      	sub	sp, #40	; 0x28
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	431a      	orrs	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4ba5      	ldr	r3, [pc, #660]	; (8004a84 <UART_SetConfig+0x2c4>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a9a      	ldr	r2, [pc, #616]	; (8004a88 <UART_SetConfig+0x2c8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	4313      	orrs	r3, r2
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483c:	430a      	orrs	r2, r1
 800483e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a91      	ldr	r2, [pc, #580]	; (8004a8c <UART_SetConfig+0x2cc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d126      	bne.n	8004898 <UART_SetConfig+0xd8>
 800484a:	4b91      	ldr	r3, [pc, #580]	; (8004a90 <UART_SetConfig+0x2d0>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b03      	cmp	r3, #3
 8004856:	d81b      	bhi.n	8004890 <UART_SetConfig+0xd0>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0xa0>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004871 	.word	0x08004871
 8004864:	08004881 	.word	0x08004881
 8004868:	08004879 	.word	0x08004879
 800486c:	08004889 	.word	0x08004889
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004876:	e0d6      	b.n	8004a26 <UART_SetConfig+0x266>
 8004878:	2302      	movs	r3, #2
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487e:	e0d2      	b.n	8004a26 <UART_SetConfig+0x266>
 8004880:	2304      	movs	r3, #4
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004886:	e0ce      	b.n	8004a26 <UART_SetConfig+0x266>
 8004888:	2308      	movs	r3, #8
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e0ca      	b.n	8004a26 <UART_SetConfig+0x266>
 8004890:	2310      	movs	r3, #16
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e0c6      	b.n	8004a26 <UART_SetConfig+0x266>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a7d      	ldr	r2, [pc, #500]	; (8004a94 <UART_SetConfig+0x2d4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d138      	bne.n	8004914 <UART_SetConfig+0x154>
 80048a2:	4b7b      	ldr	r3, [pc, #492]	; (8004a90 <UART_SetConfig+0x2d0>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d82d      	bhi.n	800490c <UART_SetConfig+0x14c>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0xf8>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	0800490d 	.word	0x0800490d
 80048c0:	0800490d 	.word	0x0800490d
 80048c4:	0800490d 	.word	0x0800490d
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	0800490d 	.word	0x0800490d
 80048d0:	0800490d 	.word	0x0800490d
 80048d4:	0800490d 	.word	0x0800490d
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	0800490d 	.word	0x0800490d
 80048e0:	0800490d 	.word	0x0800490d
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004905 	.word	0x08004905
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f2:	e098      	b.n	8004a26 <UART_SetConfig+0x266>
 80048f4:	2302      	movs	r3, #2
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fa:	e094      	b.n	8004a26 <UART_SetConfig+0x266>
 80048fc:	2304      	movs	r3, #4
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004902:	e090      	b.n	8004a26 <UART_SetConfig+0x266>
 8004904:	2308      	movs	r3, #8
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490a:	e08c      	b.n	8004a26 <UART_SetConfig+0x266>
 800490c:	2310      	movs	r3, #16
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004912:	e088      	b.n	8004a26 <UART_SetConfig+0x266>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a5f      	ldr	r2, [pc, #380]	; (8004a98 <UART_SetConfig+0x2d8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d125      	bne.n	800496a <UART_SetConfig+0x1aa>
 800491e:	4b5c      	ldr	r3, [pc, #368]	; (8004a90 <UART_SetConfig+0x2d0>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004928:	2b30      	cmp	r3, #48	; 0x30
 800492a:	d016      	beq.n	800495a <UART_SetConfig+0x19a>
 800492c:	2b30      	cmp	r3, #48	; 0x30
 800492e:	d818      	bhi.n	8004962 <UART_SetConfig+0x1a2>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d00a      	beq.n	800494a <UART_SetConfig+0x18a>
 8004934:	2b20      	cmp	r3, #32
 8004936:	d814      	bhi.n	8004962 <UART_SetConfig+0x1a2>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <UART_SetConfig+0x182>
 800493c:	2b10      	cmp	r3, #16
 800493e:	d008      	beq.n	8004952 <UART_SetConfig+0x192>
 8004940:	e00f      	b.n	8004962 <UART_SetConfig+0x1a2>
 8004942:	2300      	movs	r3, #0
 8004944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004948:	e06d      	b.n	8004a26 <UART_SetConfig+0x266>
 800494a:	2302      	movs	r3, #2
 800494c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004950:	e069      	b.n	8004a26 <UART_SetConfig+0x266>
 8004952:	2304      	movs	r3, #4
 8004954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004958:	e065      	b.n	8004a26 <UART_SetConfig+0x266>
 800495a:	2308      	movs	r3, #8
 800495c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004960:	e061      	b.n	8004a26 <UART_SetConfig+0x266>
 8004962:	2310      	movs	r3, #16
 8004964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004968:	e05d      	b.n	8004a26 <UART_SetConfig+0x266>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a4b      	ldr	r2, [pc, #300]	; (8004a9c <UART_SetConfig+0x2dc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d125      	bne.n	80049c0 <UART_SetConfig+0x200>
 8004974:	4b46      	ldr	r3, [pc, #280]	; (8004a90 <UART_SetConfig+0x2d0>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800497e:	2bc0      	cmp	r3, #192	; 0xc0
 8004980:	d016      	beq.n	80049b0 <UART_SetConfig+0x1f0>
 8004982:	2bc0      	cmp	r3, #192	; 0xc0
 8004984:	d818      	bhi.n	80049b8 <UART_SetConfig+0x1f8>
 8004986:	2b80      	cmp	r3, #128	; 0x80
 8004988:	d00a      	beq.n	80049a0 <UART_SetConfig+0x1e0>
 800498a:	2b80      	cmp	r3, #128	; 0x80
 800498c:	d814      	bhi.n	80049b8 <UART_SetConfig+0x1f8>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <UART_SetConfig+0x1d8>
 8004992:	2b40      	cmp	r3, #64	; 0x40
 8004994:	d008      	beq.n	80049a8 <UART_SetConfig+0x1e8>
 8004996:	e00f      	b.n	80049b8 <UART_SetConfig+0x1f8>
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499e:	e042      	b.n	8004a26 <UART_SetConfig+0x266>
 80049a0:	2302      	movs	r3, #2
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a6:	e03e      	b.n	8004a26 <UART_SetConfig+0x266>
 80049a8:	2304      	movs	r3, #4
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ae:	e03a      	b.n	8004a26 <UART_SetConfig+0x266>
 80049b0:	2308      	movs	r3, #8
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b6:	e036      	b.n	8004a26 <UART_SetConfig+0x266>
 80049b8:	2310      	movs	r3, #16
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049be:	e032      	b.n	8004a26 <UART_SetConfig+0x266>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a30      	ldr	r2, [pc, #192]	; (8004a88 <UART_SetConfig+0x2c8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d12a      	bne.n	8004a20 <UART_SetConfig+0x260>
 80049ca:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <UART_SetConfig+0x2d0>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d8:	d01a      	beq.n	8004a10 <UART_SetConfig+0x250>
 80049da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049de:	d81b      	bhi.n	8004a18 <UART_SetConfig+0x258>
 80049e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e4:	d00c      	beq.n	8004a00 <UART_SetConfig+0x240>
 80049e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ea:	d815      	bhi.n	8004a18 <UART_SetConfig+0x258>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <UART_SetConfig+0x238>
 80049f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f4:	d008      	beq.n	8004a08 <UART_SetConfig+0x248>
 80049f6:	e00f      	b.n	8004a18 <UART_SetConfig+0x258>
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fe:	e012      	b.n	8004a26 <UART_SetConfig+0x266>
 8004a00:	2302      	movs	r3, #2
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a06:	e00e      	b.n	8004a26 <UART_SetConfig+0x266>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0e:	e00a      	b.n	8004a26 <UART_SetConfig+0x266>
 8004a10:	2308      	movs	r3, #8
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a16:	e006      	b.n	8004a26 <UART_SetConfig+0x266>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1e:	e002      	b.n	8004a26 <UART_SetConfig+0x266>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <UART_SetConfig+0x2c8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	f040 808b 	bne.w	8004b48 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d834      	bhi.n	8004aa4 <UART_SetConfig+0x2e4>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x280>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004aa5 	.word	0x08004aa5
 8004a48:	08004a6d 	.word	0x08004a6d
 8004a4c:	08004aa5 	.word	0x08004aa5
 8004a50:	08004a73 	.word	0x08004a73
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	08004aa5 	.word	0x08004aa5
 8004a5c:	08004aa5 	.word	0x08004aa5
 8004a60:	08004a7b 	.word	0x08004a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fe fee0 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
        break;
 8004a6a:	e021      	b.n	8004ab0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <UART_SetConfig+0x2e0>)
 8004a6e:	61fb      	str	r3, [r7, #28]
        break;
 8004a70:	e01e      	b.n	8004ab0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a72:	f7fe fe41 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8004a76:	61f8      	str	r0, [r7, #28]
        break;
 8004a78:	e01a      	b.n	8004ab0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7e:	61fb      	str	r3, [r7, #28]
        break;
 8004a80:	e016      	b.n	8004ab0 <UART_SetConfig+0x2f0>
 8004a82:	bf00      	nop
 8004a84:	efff69f3 	.word	0xefff69f3
 8004a88:	40008000 	.word	0x40008000
 8004a8c:	40013800 	.word	0x40013800
 8004a90:	40021000 	.word	0x40021000
 8004a94:	40004400 	.word	0x40004400
 8004a98:	40004800 	.word	0x40004800
 8004a9c:	40004c00 	.word	0x40004c00
 8004aa0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004aae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80fa 	beq.w	8004cac <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d305      	bcc.n	8004ad4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d903      	bls.n	8004adc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ada:	e0e7      	b.n	8004cac <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	461c      	mov	r4, r3
 8004ae2:	4615      	mov	r5, r2
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	022b      	lsls	r3, r5, #8
 8004aee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004af2:	0222      	lsls	r2, r4, #8
 8004af4:	68f9      	ldr	r1, [r7, #12]
 8004af6:	6849      	ldr	r1, [r1, #4]
 8004af8:	0849      	lsrs	r1, r1, #1
 8004afa:	2000      	movs	r0, #0
 8004afc:	4688      	mov	r8, r1
 8004afe:	4681      	mov	r9, r0
 8004b00:	eb12 0a08 	adds.w	sl, r2, r8
 8004b04:	eb43 0b09 	adc.w	fp, r3, r9
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b16:	4650      	mov	r0, sl
 8004b18:	4659      	mov	r1, fp
 8004b1a:	f7fb fbb1 	bl	8000280 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4613      	mov	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2c:	d308      	bcc.n	8004b40 <UART_SetConfig+0x380>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b34:	d204      	bcs.n	8004b40 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e0b5      	b.n	8004cac <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b46:	e0b1      	b.n	8004cac <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b50:	d15d      	bne.n	8004c0e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004b52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d827      	bhi.n	8004baa <UART_SetConfig+0x3ea>
 8004b5a:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0x3a0>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b95 	.word	0x08004b95
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004bab 	.word	0x08004bab
 8004b7c:	08004bab 	.word	0x08004bab
 8004b80:	08004ba3 	.word	0x08004ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b84:	f7fe fe50 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004b88:	61f8      	str	r0, [r7, #28]
        break;
 8004b8a:	e014      	b.n	8004bb6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fe fe62 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8004b90:	61f8      	str	r0, [r7, #28]
        break;
 8004b92:	e010      	b.n	8004bb6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b94:	4b4c      	ldr	r3, [pc, #304]	; (8004cc8 <UART_SetConfig+0x508>)
 8004b96:	61fb      	str	r3, [r7, #28]
        break;
 8004b98:	e00d      	b.n	8004bb6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9a:	f7fe fdad 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8004b9e:	61f8      	str	r0, [r7, #28]
        break;
 8004ba0:	e009      	b.n	8004bb6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba6:	61fb      	str	r3, [r7, #28]
        break;
 8004ba8:	e005      	b.n	8004bb6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d077      	beq.n	8004cac <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	005a      	lsls	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b0f      	cmp	r3, #15
 8004bd6:	d916      	bls.n	8004c06 <UART_SetConfig+0x446>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bde:	d212      	bcs.n	8004c06 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f023 030f 	bic.w	r3, r3, #15
 8004be8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	8afb      	ldrh	r3, [r7, #22]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	8afa      	ldrh	r2, [r7, #22]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	e052      	b.n	8004cac <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c0c:	e04e      	b.n	8004cac <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d827      	bhi.n	8004c66 <UART_SetConfig+0x4a6>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <UART_SetConfig+0x45c>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c49 	.word	0x08004c49
 8004c24:	08004c51 	.word	0x08004c51
 8004c28:	08004c67 	.word	0x08004c67
 8004c2c:	08004c57 	.word	0x08004c57
 8004c30:	08004c67 	.word	0x08004c67
 8004c34:	08004c67 	.word	0x08004c67
 8004c38:	08004c67 	.word	0x08004c67
 8004c3c:	08004c5f 	.word	0x08004c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fe fdf2 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004c44:	61f8      	str	r0, [r7, #28]
        break;
 8004c46:	e014      	b.n	8004c72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c48:	f7fe fe04 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8004c4c:	61f8      	str	r0, [r7, #28]
        break;
 8004c4e:	e010      	b.n	8004c72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <UART_SetConfig+0x508>)
 8004c52:	61fb      	str	r3, [r7, #28]
        break;
 8004c54:	e00d      	b.n	8004c72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c56:	f7fe fd4f 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8004c5a:	61f8      	str	r0, [r7, #28]
        break;
 8004c5c:	e009      	b.n	8004c72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c62:	61fb      	str	r3, [r7, #28]
        break;
 8004c64:	e005      	b.n	8004c72 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c70:	bf00      	nop
    }

    if (pclk != 0U)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d019      	beq.n	8004cac <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	085a      	lsrs	r2, r3, #1
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	441a      	add	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	d909      	bls.n	8004ca6 <UART_SetConfig+0x4e6>
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d205      	bcs.n	8004ca6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	e002      	b.n	8004cac <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004cb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3728      	adds	r7, #40	; 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc6:	bf00      	nop
 8004cc8:	00f42400 	.word	0x00f42400

08004ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01a      	beq.n	8004de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dca:	d10a      	bne.n	8004de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  }
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b098      	sub	sp, #96	; 0x60
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e20:	f7fc f8a8 	bl	8000f74 <HAL_GetTick>
 8004e24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d12e      	bne.n	8004e92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f88c 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d021      	beq.n	8004e92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e62:	653b      	str	r3, [r7, #80]	; 0x50
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e6      	bne.n	8004e4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e062      	b.n	8004f58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d149      	bne.n	8004f34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f856 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d03c      	beq.n	8004f34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e6      	bne.n	8004eba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0c:	61fa      	str	r2, [r7, #28]
 8004f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	69b9      	ldr	r1, [r7, #24]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e011      	b.n	8004f58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3758      	adds	r7, #88	; 0x58
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f70:	e049      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f78:	d045      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7a:	f7fb fffb 	bl	8000f74 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e048      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d031      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d110      	bne.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f838 	bl	800502e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e029      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe0:	d111      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f81e 	bl	800502e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e00f      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	429a      	cmp	r2, r3
 8005022:	d0a6      	beq.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800502e:	b480      	push	{r7}
 8005030:	b095      	sub	sp, #84	; 0x54
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800504a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	643b      	str	r3, [r7, #64]	; 0x40
 8005056:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800505a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e6      	bne.n	8005036 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	61fb      	str	r3, [r7, #28]
   return(result);
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3308      	adds	r3, #8
 8005086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e5      	bne.n	8005068 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d118      	bne.n	80050d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f023 0310 	bic.w	r3, r3, #16
 80050b8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6979      	ldr	r1, [r7, #20]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	613b      	str	r3, [r7, #16]
   return(result);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e6      	bne.n	80050a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050ea:	bf00      	nop
 80050ec:	3754      	adds	r7, #84	; 0x54
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff fb3d 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b088      	sub	sp, #32
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	60bb      	str	r3, [r7, #8]
   return(result);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6979      	ldr	r1, [r7, #20]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	613b      	str	r3, [r7, #16]
   return(result);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e6      	bne.n	800512a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fb09 	bl	8004780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800516e:	bf00      	nop
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <siprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b500      	push	{lr}
 8005190:	b09c      	sub	sp, #112	; 0x70
 8005192:	ab1d      	add	r3, sp, #116	; 0x74
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	9006      	str	r0, [sp, #24]
 8005198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800519c:	4809      	ldr	r0, [pc, #36]	; (80051c4 <siprintf+0x38>)
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	9104      	str	r1, [sp, #16]
 80051a2:	4909      	ldr	r1, [pc, #36]	; (80051c8 <siprintf+0x3c>)
 80051a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a8:	9105      	str	r1, [sp, #20]
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	a902      	add	r1, sp, #8
 80051b0:	f000 f992 	bl	80054d8 <_svfiprintf_r>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	b01c      	add	sp, #112	; 0x70
 80051bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c0:	b003      	add	sp, #12
 80051c2:	4770      	bx	lr
 80051c4:	20000058 	.word	0x20000058
 80051c8:	ffff0208 	.word	0xffff0208

080051cc <memset>:
 80051cc:	4402      	add	r2, r0
 80051ce:	4603      	mov	r3, r0
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d100      	bne.n	80051d6 <memset+0xa>
 80051d4:	4770      	bx	lr
 80051d6:	f803 1b01 	strb.w	r1, [r3], #1
 80051da:	e7f9      	b.n	80051d0 <memset+0x4>

080051dc <__errno>:
 80051dc:	4b01      	ldr	r3, [pc, #4]	; (80051e4 <__errno+0x8>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000058 	.word	0x20000058

080051e8 <__libc_init_array>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	4d0d      	ldr	r5, [pc, #52]	; (8005220 <__libc_init_array+0x38>)
 80051ec:	4c0d      	ldr	r4, [pc, #52]	; (8005224 <__libc_init_array+0x3c>)
 80051ee:	1b64      	subs	r4, r4, r5
 80051f0:	10a4      	asrs	r4, r4, #2
 80051f2:	2600      	movs	r6, #0
 80051f4:	42a6      	cmp	r6, r4
 80051f6:	d109      	bne.n	800520c <__libc_init_array+0x24>
 80051f8:	4d0b      	ldr	r5, [pc, #44]	; (8005228 <__libc_init_array+0x40>)
 80051fa:	4c0c      	ldr	r4, [pc, #48]	; (800522c <__libc_init_array+0x44>)
 80051fc:	f000 fc6a 	bl	8005ad4 <_init>
 8005200:	1b64      	subs	r4, r4, r5
 8005202:	10a4      	asrs	r4, r4, #2
 8005204:	2600      	movs	r6, #0
 8005206:	42a6      	cmp	r6, r4
 8005208:	d105      	bne.n	8005216 <__libc_init_array+0x2e>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005210:	4798      	blx	r3
 8005212:	3601      	adds	r6, #1
 8005214:	e7ee      	b.n	80051f4 <__libc_init_array+0xc>
 8005216:	f855 3b04 	ldr.w	r3, [r5], #4
 800521a:	4798      	blx	r3
 800521c:	3601      	adds	r6, #1
 800521e:	e7f2      	b.n	8005206 <__libc_init_array+0x1e>
 8005220:	08005b88 	.word	0x08005b88
 8005224:	08005b88 	.word	0x08005b88
 8005228:	08005b88 	.word	0x08005b88
 800522c:	08005b8c 	.word	0x08005b8c

08005230 <__retarget_lock_acquire_recursive>:
 8005230:	4770      	bx	lr

08005232 <__retarget_lock_release_recursive>:
 8005232:	4770      	bx	lr

08005234 <_free_r>:
 8005234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005236:	2900      	cmp	r1, #0
 8005238:	d044      	beq.n	80052c4 <_free_r+0x90>
 800523a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523e:	9001      	str	r0, [sp, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f1a1 0404 	sub.w	r4, r1, #4
 8005246:	bfb8      	it	lt
 8005248:	18e4      	addlt	r4, r4, r3
 800524a:	f000 f8df 	bl	800540c <__malloc_lock>
 800524e:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <_free_r+0x94>)
 8005250:	9801      	ldr	r0, [sp, #4]
 8005252:	6813      	ldr	r3, [r2, #0]
 8005254:	b933      	cbnz	r3, 8005264 <_free_r+0x30>
 8005256:	6063      	str	r3, [r4, #4]
 8005258:	6014      	str	r4, [r2, #0]
 800525a:	b003      	add	sp, #12
 800525c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005260:	f000 b8da 	b.w	8005418 <__malloc_unlock>
 8005264:	42a3      	cmp	r3, r4
 8005266:	d908      	bls.n	800527a <_free_r+0x46>
 8005268:	6825      	ldr	r5, [r4, #0]
 800526a:	1961      	adds	r1, r4, r5
 800526c:	428b      	cmp	r3, r1
 800526e:	bf01      	itttt	eq
 8005270:	6819      	ldreq	r1, [r3, #0]
 8005272:	685b      	ldreq	r3, [r3, #4]
 8005274:	1949      	addeq	r1, r1, r5
 8005276:	6021      	streq	r1, [r4, #0]
 8005278:	e7ed      	b.n	8005256 <_free_r+0x22>
 800527a:	461a      	mov	r2, r3
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	b10b      	cbz	r3, 8005284 <_free_r+0x50>
 8005280:	42a3      	cmp	r3, r4
 8005282:	d9fa      	bls.n	800527a <_free_r+0x46>
 8005284:	6811      	ldr	r1, [r2, #0]
 8005286:	1855      	adds	r5, r2, r1
 8005288:	42a5      	cmp	r5, r4
 800528a:	d10b      	bne.n	80052a4 <_free_r+0x70>
 800528c:	6824      	ldr	r4, [r4, #0]
 800528e:	4421      	add	r1, r4
 8005290:	1854      	adds	r4, r2, r1
 8005292:	42a3      	cmp	r3, r4
 8005294:	6011      	str	r1, [r2, #0]
 8005296:	d1e0      	bne.n	800525a <_free_r+0x26>
 8005298:	681c      	ldr	r4, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	6053      	str	r3, [r2, #4]
 800529e:	440c      	add	r4, r1
 80052a0:	6014      	str	r4, [r2, #0]
 80052a2:	e7da      	b.n	800525a <_free_r+0x26>
 80052a4:	d902      	bls.n	80052ac <_free_r+0x78>
 80052a6:	230c      	movs	r3, #12
 80052a8:	6003      	str	r3, [r0, #0]
 80052aa:	e7d6      	b.n	800525a <_free_r+0x26>
 80052ac:	6825      	ldr	r5, [r4, #0]
 80052ae:	1961      	adds	r1, r4, r5
 80052b0:	428b      	cmp	r3, r1
 80052b2:	bf04      	itt	eq
 80052b4:	6819      	ldreq	r1, [r3, #0]
 80052b6:	685b      	ldreq	r3, [r3, #4]
 80052b8:	6063      	str	r3, [r4, #4]
 80052ba:	bf04      	itt	eq
 80052bc:	1949      	addeq	r1, r1, r5
 80052be:	6021      	streq	r1, [r4, #0]
 80052c0:	6054      	str	r4, [r2, #4]
 80052c2:	e7ca      	b.n	800525a <_free_r+0x26>
 80052c4:	b003      	add	sp, #12
 80052c6:	bd30      	pop	{r4, r5, pc}
 80052c8:	20000310 	.word	0x20000310

080052cc <sbrk_aligned>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	4e0e      	ldr	r6, [pc, #56]	; (8005308 <sbrk_aligned+0x3c>)
 80052d0:	460c      	mov	r4, r1
 80052d2:	6831      	ldr	r1, [r6, #0]
 80052d4:	4605      	mov	r5, r0
 80052d6:	b911      	cbnz	r1, 80052de <sbrk_aligned+0x12>
 80052d8:	f000 fba6 	bl	8005a28 <_sbrk_r>
 80052dc:	6030      	str	r0, [r6, #0]
 80052de:	4621      	mov	r1, r4
 80052e0:	4628      	mov	r0, r5
 80052e2:	f000 fba1 	bl	8005a28 <_sbrk_r>
 80052e6:	1c43      	adds	r3, r0, #1
 80052e8:	d00a      	beq.n	8005300 <sbrk_aligned+0x34>
 80052ea:	1cc4      	adds	r4, r0, #3
 80052ec:	f024 0403 	bic.w	r4, r4, #3
 80052f0:	42a0      	cmp	r0, r4
 80052f2:	d007      	beq.n	8005304 <sbrk_aligned+0x38>
 80052f4:	1a21      	subs	r1, r4, r0
 80052f6:	4628      	mov	r0, r5
 80052f8:	f000 fb96 	bl	8005a28 <_sbrk_r>
 80052fc:	3001      	adds	r0, #1
 80052fe:	d101      	bne.n	8005304 <sbrk_aligned+0x38>
 8005300:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005304:	4620      	mov	r0, r4
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	20000314 	.word	0x20000314

0800530c <_malloc_r>:
 800530c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005310:	1ccd      	adds	r5, r1, #3
 8005312:	f025 0503 	bic.w	r5, r5, #3
 8005316:	3508      	adds	r5, #8
 8005318:	2d0c      	cmp	r5, #12
 800531a:	bf38      	it	cc
 800531c:	250c      	movcc	r5, #12
 800531e:	2d00      	cmp	r5, #0
 8005320:	4607      	mov	r7, r0
 8005322:	db01      	blt.n	8005328 <_malloc_r+0x1c>
 8005324:	42a9      	cmp	r1, r5
 8005326:	d905      	bls.n	8005334 <_malloc_r+0x28>
 8005328:	230c      	movs	r3, #12
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	2600      	movs	r6, #0
 800532e:	4630      	mov	r0, r6
 8005330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005408 <_malloc_r+0xfc>
 8005338:	f000 f868 	bl	800540c <__malloc_lock>
 800533c:	f8d8 3000 	ldr.w	r3, [r8]
 8005340:	461c      	mov	r4, r3
 8005342:	bb5c      	cbnz	r4, 800539c <_malloc_r+0x90>
 8005344:	4629      	mov	r1, r5
 8005346:	4638      	mov	r0, r7
 8005348:	f7ff ffc0 	bl	80052cc <sbrk_aligned>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	4604      	mov	r4, r0
 8005350:	d155      	bne.n	80053fe <_malloc_r+0xf2>
 8005352:	f8d8 4000 	ldr.w	r4, [r8]
 8005356:	4626      	mov	r6, r4
 8005358:	2e00      	cmp	r6, #0
 800535a:	d145      	bne.n	80053e8 <_malloc_r+0xdc>
 800535c:	2c00      	cmp	r4, #0
 800535e:	d048      	beq.n	80053f2 <_malloc_r+0xe6>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	4631      	mov	r1, r6
 8005364:	4638      	mov	r0, r7
 8005366:	eb04 0903 	add.w	r9, r4, r3
 800536a:	f000 fb5d 	bl	8005a28 <_sbrk_r>
 800536e:	4581      	cmp	r9, r0
 8005370:	d13f      	bne.n	80053f2 <_malloc_r+0xe6>
 8005372:	6821      	ldr	r1, [r4, #0]
 8005374:	1a6d      	subs	r5, r5, r1
 8005376:	4629      	mov	r1, r5
 8005378:	4638      	mov	r0, r7
 800537a:	f7ff ffa7 	bl	80052cc <sbrk_aligned>
 800537e:	3001      	adds	r0, #1
 8005380:	d037      	beq.n	80053f2 <_malloc_r+0xe6>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	442b      	add	r3, r5
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	f8d8 3000 	ldr.w	r3, [r8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d038      	beq.n	8005402 <_malloc_r+0xf6>
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	42a2      	cmp	r2, r4
 8005394:	d12b      	bne.n	80053ee <_malloc_r+0xe2>
 8005396:	2200      	movs	r2, #0
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	e00f      	b.n	80053bc <_malloc_r+0xb0>
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	1b52      	subs	r2, r2, r5
 80053a0:	d41f      	bmi.n	80053e2 <_malloc_r+0xd6>
 80053a2:	2a0b      	cmp	r2, #11
 80053a4:	d917      	bls.n	80053d6 <_malloc_r+0xca>
 80053a6:	1961      	adds	r1, r4, r5
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	6025      	str	r5, [r4, #0]
 80053ac:	bf18      	it	ne
 80053ae:	6059      	strne	r1, [r3, #4]
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	bf08      	it	eq
 80053b4:	f8c8 1000 	streq.w	r1, [r8]
 80053b8:	5162      	str	r2, [r4, r5]
 80053ba:	604b      	str	r3, [r1, #4]
 80053bc:	4638      	mov	r0, r7
 80053be:	f104 060b 	add.w	r6, r4, #11
 80053c2:	f000 f829 	bl	8005418 <__malloc_unlock>
 80053c6:	f026 0607 	bic.w	r6, r6, #7
 80053ca:	1d23      	adds	r3, r4, #4
 80053cc:	1af2      	subs	r2, r6, r3
 80053ce:	d0ae      	beq.n	800532e <_malloc_r+0x22>
 80053d0:	1b9b      	subs	r3, r3, r6
 80053d2:	50a3      	str	r3, [r4, r2]
 80053d4:	e7ab      	b.n	800532e <_malloc_r+0x22>
 80053d6:	42a3      	cmp	r3, r4
 80053d8:	6862      	ldr	r2, [r4, #4]
 80053da:	d1dd      	bne.n	8005398 <_malloc_r+0x8c>
 80053dc:	f8c8 2000 	str.w	r2, [r8]
 80053e0:	e7ec      	b.n	80053bc <_malloc_r+0xb0>
 80053e2:	4623      	mov	r3, r4
 80053e4:	6864      	ldr	r4, [r4, #4]
 80053e6:	e7ac      	b.n	8005342 <_malloc_r+0x36>
 80053e8:	4634      	mov	r4, r6
 80053ea:	6876      	ldr	r6, [r6, #4]
 80053ec:	e7b4      	b.n	8005358 <_malloc_r+0x4c>
 80053ee:	4613      	mov	r3, r2
 80053f0:	e7cc      	b.n	800538c <_malloc_r+0x80>
 80053f2:	230c      	movs	r3, #12
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	4638      	mov	r0, r7
 80053f8:	f000 f80e 	bl	8005418 <__malloc_unlock>
 80053fc:	e797      	b.n	800532e <_malloc_r+0x22>
 80053fe:	6025      	str	r5, [r4, #0]
 8005400:	e7dc      	b.n	80053bc <_malloc_r+0xb0>
 8005402:	605b      	str	r3, [r3, #4]
 8005404:	deff      	udf	#255	; 0xff
 8005406:	bf00      	nop
 8005408:	20000310 	.word	0x20000310

0800540c <__malloc_lock>:
 800540c:	4801      	ldr	r0, [pc, #4]	; (8005414 <__malloc_lock+0x8>)
 800540e:	f7ff bf0f 	b.w	8005230 <__retarget_lock_acquire_recursive>
 8005412:	bf00      	nop
 8005414:	2000030c 	.word	0x2000030c

08005418 <__malloc_unlock>:
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <__malloc_unlock+0x8>)
 800541a:	f7ff bf0a 	b.w	8005232 <__retarget_lock_release_recursive>
 800541e:	bf00      	nop
 8005420:	2000030c 	.word	0x2000030c

08005424 <__ssputs_r>:
 8005424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	688e      	ldr	r6, [r1, #8]
 800542a:	461f      	mov	r7, r3
 800542c:	42be      	cmp	r6, r7
 800542e:	680b      	ldr	r3, [r1, #0]
 8005430:	4682      	mov	sl, r0
 8005432:	460c      	mov	r4, r1
 8005434:	4690      	mov	r8, r2
 8005436:	d82c      	bhi.n	8005492 <__ssputs_r+0x6e>
 8005438:	898a      	ldrh	r2, [r1, #12]
 800543a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800543e:	d026      	beq.n	800548e <__ssputs_r+0x6a>
 8005440:	6965      	ldr	r5, [r4, #20]
 8005442:	6909      	ldr	r1, [r1, #16]
 8005444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005448:	eba3 0901 	sub.w	r9, r3, r1
 800544c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005450:	1c7b      	adds	r3, r7, #1
 8005452:	444b      	add	r3, r9
 8005454:	106d      	asrs	r5, r5, #1
 8005456:	429d      	cmp	r5, r3
 8005458:	bf38      	it	cc
 800545a:	461d      	movcc	r5, r3
 800545c:	0553      	lsls	r3, r2, #21
 800545e:	d527      	bpl.n	80054b0 <__ssputs_r+0x8c>
 8005460:	4629      	mov	r1, r5
 8005462:	f7ff ff53 	bl	800530c <_malloc_r>
 8005466:	4606      	mov	r6, r0
 8005468:	b360      	cbz	r0, 80054c4 <__ssputs_r+0xa0>
 800546a:	6921      	ldr	r1, [r4, #16]
 800546c:	464a      	mov	r2, r9
 800546e:	f000 faeb 	bl	8005a48 <memcpy>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	6126      	str	r6, [r4, #16]
 8005480:	6165      	str	r5, [r4, #20]
 8005482:	444e      	add	r6, r9
 8005484:	eba5 0509 	sub.w	r5, r5, r9
 8005488:	6026      	str	r6, [r4, #0]
 800548a:	60a5      	str	r5, [r4, #8]
 800548c:	463e      	mov	r6, r7
 800548e:	42be      	cmp	r6, r7
 8005490:	d900      	bls.n	8005494 <__ssputs_r+0x70>
 8005492:	463e      	mov	r6, r7
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	4632      	mov	r2, r6
 8005498:	4641      	mov	r1, r8
 800549a:	f000 faab 	bl	80059f4 <memmove>
 800549e:	68a3      	ldr	r3, [r4, #8]
 80054a0:	1b9b      	subs	r3, r3, r6
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	4433      	add	r3, r6
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	2000      	movs	r0, #0
 80054ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b0:	462a      	mov	r2, r5
 80054b2:	f000 fad7 	bl	8005a64 <_realloc_r>
 80054b6:	4606      	mov	r6, r0
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d1e0      	bne.n	800547e <__ssputs_r+0x5a>
 80054bc:	6921      	ldr	r1, [r4, #16]
 80054be:	4650      	mov	r0, sl
 80054c0:	f7ff feb8 	bl	8005234 <_free_r>
 80054c4:	230c      	movs	r3, #12
 80054c6:	f8ca 3000 	str.w	r3, [sl]
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d0:	81a3      	strh	r3, [r4, #12]
 80054d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054d6:	e7e9      	b.n	80054ac <__ssputs_r+0x88>

080054d8 <_svfiprintf_r>:
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	4698      	mov	r8, r3
 80054de:	898b      	ldrh	r3, [r1, #12]
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	b09d      	sub	sp, #116	; 0x74
 80054e4:	4607      	mov	r7, r0
 80054e6:	460d      	mov	r5, r1
 80054e8:	4614      	mov	r4, r2
 80054ea:	d50e      	bpl.n	800550a <_svfiprintf_r+0x32>
 80054ec:	690b      	ldr	r3, [r1, #16]
 80054ee:	b963      	cbnz	r3, 800550a <_svfiprintf_r+0x32>
 80054f0:	2140      	movs	r1, #64	; 0x40
 80054f2:	f7ff ff0b 	bl	800530c <_malloc_r>
 80054f6:	6028      	str	r0, [r5, #0]
 80054f8:	6128      	str	r0, [r5, #16]
 80054fa:	b920      	cbnz	r0, 8005506 <_svfiprintf_r+0x2e>
 80054fc:	230c      	movs	r3, #12
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005504:	e0d0      	b.n	80056a8 <_svfiprintf_r+0x1d0>
 8005506:	2340      	movs	r3, #64	; 0x40
 8005508:	616b      	str	r3, [r5, #20]
 800550a:	2300      	movs	r3, #0
 800550c:	9309      	str	r3, [sp, #36]	; 0x24
 800550e:	2320      	movs	r3, #32
 8005510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005514:	f8cd 800c 	str.w	r8, [sp, #12]
 8005518:	2330      	movs	r3, #48	; 0x30
 800551a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056c0 <_svfiprintf_r+0x1e8>
 800551e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005522:	f04f 0901 	mov.w	r9, #1
 8005526:	4623      	mov	r3, r4
 8005528:	469a      	mov	sl, r3
 800552a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800552e:	b10a      	cbz	r2, 8005534 <_svfiprintf_r+0x5c>
 8005530:	2a25      	cmp	r2, #37	; 0x25
 8005532:	d1f9      	bne.n	8005528 <_svfiprintf_r+0x50>
 8005534:	ebba 0b04 	subs.w	fp, sl, r4
 8005538:	d00b      	beq.n	8005552 <_svfiprintf_r+0x7a>
 800553a:	465b      	mov	r3, fp
 800553c:	4622      	mov	r2, r4
 800553e:	4629      	mov	r1, r5
 8005540:	4638      	mov	r0, r7
 8005542:	f7ff ff6f 	bl	8005424 <__ssputs_r>
 8005546:	3001      	adds	r0, #1
 8005548:	f000 80a9 	beq.w	800569e <_svfiprintf_r+0x1c6>
 800554c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800554e:	445a      	add	r2, fp
 8005550:	9209      	str	r2, [sp, #36]	; 0x24
 8005552:	f89a 3000 	ldrb.w	r3, [sl]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80a1 	beq.w	800569e <_svfiprintf_r+0x1c6>
 800555c:	2300      	movs	r3, #0
 800555e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005566:	f10a 0a01 	add.w	sl, sl, #1
 800556a:	9304      	str	r3, [sp, #16]
 800556c:	9307      	str	r3, [sp, #28]
 800556e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005572:	931a      	str	r3, [sp, #104]	; 0x68
 8005574:	4654      	mov	r4, sl
 8005576:	2205      	movs	r2, #5
 8005578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557c:	4850      	ldr	r0, [pc, #320]	; (80056c0 <_svfiprintf_r+0x1e8>)
 800557e:	f7fa fe2f 	bl	80001e0 <memchr>
 8005582:	9a04      	ldr	r2, [sp, #16]
 8005584:	b9d8      	cbnz	r0, 80055be <_svfiprintf_r+0xe6>
 8005586:	06d0      	lsls	r0, r2, #27
 8005588:	bf44      	itt	mi
 800558a:	2320      	movmi	r3, #32
 800558c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005590:	0711      	lsls	r1, r2, #28
 8005592:	bf44      	itt	mi
 8005594:	232b      	movmi	r3, #43	; 0x2b
 8005596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800559a:	f89a 3000 	ldrb.w	r3, [sl]
 800559e:	2b2a      	cmp	r3, #42	; 0x2a
 80055a0:	d015      	beq.n	80055ce <_svfiprintf_r+0xf6>
 80055a2:	9a07      	ldr	r2, [sp, #28]
 80055a4:	4654      	mov	r4, sl
 80055a6:	2000      	movs	r0, #0
 80055a8:	f04f 0c0a 	mov.w	ip, #10
 80055ac:	4621      	mov	r1, r4
 80055ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055b2:	3b30      	subs	r3, #48	; 0x30
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	d94d      	bls.n	8005654 <_svfiprintf_r+0x17c>
 80055b8:	b1b0      	cbz	r0, 80055e8 <_svfiprintf_r+0x110>
 80055ba:	9207      	str	r2, [sp, #28]
 80055bc:	e014      	b.n	80055e8 <_svfiprintf_r+0x110>
 80055be:	eba0 0308 	sub.w	r3, r0, r8
 80055c2:	fa09 f303 	lsl.w	r3, r9, r3
 80055c6:	4313      	orrs	r3, r2
 80055c8:	9304      	str	r3, [sp, #16]
 80055ca:	46a2      	mov	sl, r4
 80055cc:	e7d2      	b.n	8005574 <_svfiprintf_r+0x9c>
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	1d19      	adds	r1, r3, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	9103      	str	r1, [sp, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfbb      	ittet	lt
 80055da:	425b      	neglt	r3, r3
 80055dc:	f042 0202 	orrlt.w	r2, r2, #2
 80055e0:	9307      	strge	r3, [sp, #28]
 80055e2:	9307      	strlt	r3, [sp, #28]
 80055e4:	bfb8      	it	lt
 80055e6:	9204      	strlt	r2, [sp, #16]
 80055e8:	7823      	ldrb	r3, [r4, #0]
 80055ea:	2b2e      	cmp	r3, #46	; 0x2e
 80055ec:	d10c      	bne.n	8005608 <_svfiprintf_r+0x130>
 80055ee:	7863      	ldrb	r3, [r4, #1]
 80055f0:	2b2a      	cmp	r3, #42	; 0x2a
 80055f2:	d134      	bne.n	800565e <_svfiprintf_r+0x186>
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	1d1a      	adds	r2, r3, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	9203      	str	r2, [sp, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bfb8      	it	lt
 8005600:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005604:	3402      	adds	r4, #2
 8005606:	9305      	str	r3, [sp, #20]
 8005608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056d0 <_svfiprintf_r+0x1f8>
 800560c:	7821      	ldrb	r1, [r4, #0]
 800560e:	2203      	movs	r2, #3
 8005610:	4650      	mov	r0, sl
 8005612:	f7fa fde5 	bl	80001e0 <memchr>
 8005616:	b138      	cbz	r0, 8005628 <_svfiprintf_r+0x150>
 8005618:	9b04      	ldr	r3, [sp, #16]
 800561a:	eba0 000a 	sub.w	r0, r0, sl
 800561e:	2240      	movs	r2, #64	; 0x40
 8005620:	4082      	lsls	r2, r0
 8005622:	4313      	orrs	r3, r2
 8005624:	3401      	adds	r4, #1
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562c:	4825      	ldr	r0, [pc, #148]	; (80056c4 <_svfiprintf_r+0x1ec>)
 800562e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005632:	2206      	movs	r2, #6
 8005634:	f7fa fdd4 	bl	80001e0 <memchr>
 8005638:	2800      	cmp	r0, #0
 800563a:	d038      	beq.n	80056ae <_svfiprintf_r+0x1d6>
 800563c:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <_svfiprintf_r+0x1f0>)
 800563e:	bb1b      	cbnz	r3, 8005688 <_svfiprintf_r+0x1b0>
 8005640:	9b03      	ldr	r3, [sp, #12]
 8005642:	3307      	adds	r3, #7
 8005644:	f023 0307 	bic.w	r3, r3, #7
 8005648:	3308      	adds	r3, #8
 800564a:	9303      	str	r3, [sp, #12]
 800564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564e:	4433      	add	r3, r6
 8005650:	9309      	str	r3, [sp, #36]	; 0x24
 8005652:	e768      	b.n	8005526 <_svfiprintf_r+0x4e>
 8005654:	fb0c 3202 	mla	r2, ip, r2, r3
 8005658:	460c      	mov	r4, r1
 800565a:	2001      	movs	r0, #1
 800565c:	e7a6      	b.n	80055ac <_svfiprintf_r+0xd4>
 800565e:	2300      	movs	r3, #0
 8005660:	3401      	adds	r4, #1
 8005662:	9305      	str	r3, [sp, #20]
 8005664:	4619      	mov	r1, r3
 8005666:	f04f 0c0a 	mov.w	ip, #10
 800566a:	4620      	mov	r0, r4
 800566c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005670:	3a30      	subs	r2, #48	; 0x30
 8005672:	2a09      	cmp	r2, #9
 8005674:	d903      	bls.n	800567e <_svfiprintf_r+0x1a6>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0c6      	beq.n	8005608 <_svfiprintf_r+0x130>
 800567a:	9105      	str	r1, [sp, #20]
 800567c:	e7c4      	b.n	8005608 <_svfiprintf_r+0x130>
 800567e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005682:	4604      	mov	r4, r0
 8005684:	2301      	movs	r3, #1
 8005686:	e7f0      	b.n	800566a <_svfiprintf_r+0x192>
 8005688:	ab03      	add	r3, sp, #12
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	462a      	mov	r2, r5
 800568e:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <_svfiprintf_r+0x1f4>)
 8005690:	a904      	add	r1, sp, #16
 8005692:	4638      	mov	r0, r7
 8005694:	f3af 8000 	nop.w
 8005698:	1c42      	adds	r2, r0, #1
 800569a:	4606      	mov	r6, r0
 800569c:	d1d6      	bne.n	800564c <_svfiprintf_r+0x174>
 800569e:	89ab      	ldrh	r3, [r5, #12]
 80056a0:	065b      	lsls	r3, r3, #25
 80056a2:	f53f af2d 	bmi.w	8005500 <_svfiprintf_r+0x28>
 80056a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056a8:	b01d      	add	sp, #116	; 0x74
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	ab03      	add	r3, sp, #12
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	462a      	mov	r2, r5
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <_svfiprintf_r+0x1f4>)
 80056b6:	a904      	add	r1, sp, #16
 80056b8:	4638      	mov	r0, r7
 80056ba:	f000 f879 	bl	80057b0 <_printf_i>
 80056be:	e7eb      	b.n	8005698 <_svfiprintf_r+0x1c0>
 80056c0:	08005b4c 	.word	0x08005b4c
 80056c4:	08005b56 	.word	0x08005b56
 80056c8:	00000000 	.word	0x00000000
 80056cc:	08005425 	.word	0x08005425
 80056d0:	08005b52 	.word	0x08005b52

080056d4 <_printf_common>:
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4616      	mov	r6, r2
 80056da:	4699      	mov	r9, r3
 80056dc:	688a      	ldr	r2, [r1, #8]
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bfb8      	it	lt
 80056e8:	4613      	movlt	r3, r2
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056f0:	4607      	mov	r7, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	b10a      	cbz	r2, 80056fa <_printf_common+0x26>
 80056f6:	3301      	adds	r3, #1
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	0699      	lsls	r1, r3, #26
 80056fe:	bf42      	ittt	mi
 8005700:	6833      	ldrmi	r3, [r6, #0]
 8005702:	3302      	addmi	r3, #2
 8005704:	6033      	strmi	r3, [r6, #0]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d106      	bne.n	800571c <_printf_common+0x48>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	6832      	ldr	r2, [r6, #0]
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	42ab      	cmp	r3, r5
 800571a:	dc26      	bgt.n	800576a <_printf_common+0x96>
 800571c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005720:	1e13      	subs	r3, r2, #0
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	bf18      	it	ne
 8005726:	2301      	movne	r3, #1
 8005728:	0692      	lsls	r2, r2, #26
 800572a:	d42b      	bmi.n	8005784 <_printf_common+0xb0>
 800572c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005730:	4649      	mov	r1, r9
 8005732:	4638      	mov	r0, r7
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d01e      	beq.n	8005778 <_printf_common+0xa4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	6922      	ldr	r2, [r4, #16]
 800573e:	f003 0306 	and.w	r3, r3, #6
 8005742:	2b04      	cmp	r3, #4
 8005744:	bf02      	ittt	eq
 8005746:	68e5      	ldreq	r5, [r4, #12]
 8005748:	6833      	ldreq	r3, [r6, #0]
 800574a:	1aed      	subeq	r5, r5, r3
 800574c:	68a3      	ldr	r3, [r4, #8]
 800574e:	bf0c      	ite	eq
 8005750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005754:	2500      	movne	r5, #0
 8005756:	4293      	cmp	r3, r2
 8005758:	bfc4      	itt	gt
 800575a:	1a9b      	subgt	r3, r3, r2
 800575c:	18ed      	addgt	r5, r5, r3
 800575e:	2600      	movs	r6, #0
 8005760:	341a      	adds	r4, #26
 8005762:	42b5      	cmp	r5, r6
 8005764:	d11a      	bne.n	800579c <_printf_common+0xc8>
 8005766:	2000      	movs	r0, #0
 8005768:	e008      	b.n	800577c <_printf_common+0xa8>
 800576a:	2301      	movs	r3, #1
 800576c:	4652      	mov	r2, sl
 800576e:	4649      	mov	r1, r9
 8005770:	4638      	mov	r0, r7
 8005772:	47c0      	blx	r8
 8005774:	3001      	adds	r0, #1
 8005776:	d103      	bne.n	8005780 <_printf_common+0xac>
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	3501      	adds	r5, #1
 8005782:	e7c6      	b.n	8005712 <_printf_common+0x3e>
 8005784:	18e1      	adds	r1, r4, r3
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	2030      	movs	r0, #48	; 0x30
 800578a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800578e:	4422      	add	r2, r4
 8005790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005798:	3302      	adds	r3, #2
 800579a:	e7c7      	b.n	800572c <_printf_common+0x58>
 800579c:	2301      	movs	r3, #1
 800579e:	4622      	mov	r2, r4
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0e6      	beq.n	8005778 <_printf_common+0xa4>
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7d9      	b.n	8005762 <_printf_common+0x8e>
	...

080057b0 <_printf_i>:
 80057b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	7e0f      	ldrb	r7, [r1, #24]
 80057b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b8:	2f78      	cmp	r7, #120	; 0x78
 80057ba:	4691      	mov	r9, r2
 80057bc:	4680      	mov	r8, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	469a      	mov	sl, r3
 80057c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057c6:	d807      	bhi.n	80057d8 <_printf_i+0x28>
 80057c8:	2f62      	cmp	r7, #98	; 0x62
 80057ca:	d80a      	bhi.n	80057e2 <_printf_i+0x32>
 80057cc:	2f00      	cmp	r7, #0
 80057ce:	f000 80d4 	beq.w	800597a <_printf_i+0x1ca>
 80057d2:	2f58      	cmp	r7, #88	; 0x58
 80057d4:	f000 80c0 	beq.w	8005958 <_printf_i+0x1a8>
 80057d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057e0:	e03a      	b.n	8005858 <_printf_i+0xa8>
 80057e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057e6:	2b15      	cmp	r3, #21
 80057e8:	d8f6      	bhi.n	80057d8 <_printf_i+0x28>
 80057ea:	a101      	add	r1, pc, #4	; (adr r1, 80057f0 <_printf_i+0x40>)
 80057ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057f0:	08005849 	.word	0x08005849
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	080057d9 	.word	0x080057d9
 80057fc:	080057d9 	.word	0x080057d9
 8005800:	080057d9 	.word	0x080057d9
 8005804:	080057d9 	.word	0x080057d9
 8005808:	0800585d 	.word	0x0800585d
 800580c:	080057d9 	.word	0x080057d9
 8005810:	080057d9 	.word	0x080057d9
 8005814:	080057d9 	.word	0x080057d9
 8005818:	080057d9 	.word	0x080057d9
 800581c:	08005961 	.word	0x08005961
 8005820:	08005889 	.word	0x08005889
 8005824:	0800591b 	.word	0x0800591b
 8005828:	080057d9 	.word	0x080057d9
 800582c:	080057d9 	.word	0x080057d9
 8005830:	08005983 	.word	0x08005983
 8005834:	080057d9 	.word	0x080057d9
 8005838:	08005889 	.word	0x08005889
 800583c:	080057d9 	.word	0x080057d9
 8005840:	080057d9 	.word	0x080057d9
 8005844:	08005923 	.word	0x08005923
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	602a      	str	r2, [r5, #0]
 8005850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005858:	2301      	movs	r3, #1
 800585a:	e09f      	b.n	800599c <_printf_i+0x1ec>
 800585c:	6820      	ldr	r0, [r4, #0]
 800585e:	682b      	ldr	r3, [r5, #0]
 8005860:	0607      	lsls	r7, r0, #24
 8005862:	f103 0104 	add.w	r1, r3, #4
 8005866:	6029      	str	r1, [r5, #0]
 8005868:	d501      	bpl.n	800586e <_printf_i+0xbe>
 800586a:	681e      	ldr	r6, [r3, #0]
 800586c:	e003      	b.n	8005876 <_printf_i+0xc6>
 800586e:	0646      	lsls	r6, r0, #25
 8005870:	d5fb      	bpl.n	800586a <_printf_i+0xba>
 8005872:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005876:	2e00      	cmp	r6, #0
 8005878:	da03      	bge.n	8005882 <_printf_i+0xd2>
 800587a:	232d      	movs	r3, #45	; 0x2d
 800587c:	4276      	negs	r6, r6
 800587e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005882:	485a      	ldr	r0, [pc, #360]	; (80059ec <_printf_i+0x23c>)
 8005884:	230a      	movs	r3, #10
 8005886:	e012      	b.n	80058ae <_printf_i+0xfe>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	6820      	ldr	r0, [r4, #0]
 800588c:	1d19      	adds	r1, r3, #4
 800588e:	6029      	str	r1, [r5, #0]
 8005890:	0605      	lsls	r5, r0, #24
 8005892:	d501      	bpl.n	8005898 <_printf_i+0xe8>
 8005894:	681e      	ldr	r6, [r3, #0]
 8005896:	e002      	b.n	800589e <_printf_i+0xee>
 8005898:	0641      	lsls	r1, r0, #25
 800589a:	d5fb      	bpl.n	8005894 <_printf_i+0xe4>
 800589c:	881e      	ldrh	r6, [r3, #0]
 800589e:	4853      	ldr	r0, [pc, #332]	; (80059ec <_printf_i+0x23c>)
 80058a0:	2f6f      	cmp	r7, #111	; 0x6f
 80058a2:	bf0c      	ite	eq
 80058a4:	2308      	moveq	r3, #8
 80058a6:	230a      	movne	r3, #10
 80058a8:	2100      	movs	r1, #0
 80058aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ae:	6865      	ldr	r5, [r4, #4]
 80058b0:	60a5      	str	r5, [r4, #8]
 80058b2:	2d00      	cmp	r5, #0
 80058b4:	bfa2      	ittt	ge
 80058b6:	6821      	ldrge	r1, [r4, #0]
 80058b8:	f021 0104 	bicge.w	r1, r1, #4
 80058bc:	6021      	strge	r1, [r4, #0]
 80058be:	b90e      	cbnz	r6, 80058c4 <_printf_i+0x114>
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	d04b      	beq.n	800595c <_printf_i+0x1ac>
 80058c4:	4615      	mov	r5, r2
 80058c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ca:	fb03 6711 	mls	r7, r3, r1, r6
 80058ce:	5dc7      	ldrb	r7, [r0, r7]
 80058d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058d4:	4637      	mov	r7, r6
 80058d6:	42bb      	cmp	r3, r7
 80058d8:	460e      	mov	r6, r1
 80058da:	d9f4      	bls.n	80058c6 <_printf_i+0x116>
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d10b      	bne.n	80058f8 <_printf_i+0x148>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	07de      	lsls	r6, r3, #31
 80058e4:	d508      	bpl.n	80058f8 <_printf_i+0x148>
 80058e6:	6923      	ldr	r3, [r4, #16]
 80058e8:	6861      	ldr	r1, [r4, #4]
 80058ea:	4299      	cmp	r1, r3
 80058ec:	bfde      	ittt	le
 80058ee:	2330      	movle	r3, #48	; 0x30
 80058f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058f8:	1b52      	subs	r2, r2, r5
 80058fa:	6122      	str	r2, [r4, #16]
 80058fc:	f8cd a000 	str.w	sl, [sp]
 8005900:	464b      	mov	r3, r9
 8005902:	aa03      	add	r2, sp, #12
 8005904:	4621      	mov	r1, r4
 8005906:	4640      	mov	r0, r8
 8005908:	f7ff fee4 	bl	80056d4 <_printf_common>
 800590c:	3001      	adds	r0, #1
 800590e:	d14a      	bne.n	80059a6 <_printf_i+0x1f6>
 8005910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005914:	b004      	add	sp, #16
 8005916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	f043 0320 	orr.w	r3, r3, #32
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	4833      	ldr	r0, [pc, #204]	; (80059f0 <_printf_i+0x240>)
 8005924:	2778      	movs	r7, #120	; 0x78
 8005926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	6829      	ldr	r1, [r5, #0]
 800592e:	061f      	lsls	r7, r3, #24
 8005930:	f851 6b04 	ldr.w	r6, [r1], #4
 8005934:	d402      	bmi.n	800593c <_printf_i+0x18c>
 8005936:	065f      	lsls	r7, r3, #25
 8005938:	bf48      	it	mi
 800593a:	b2b6      	uxthmi	r6, r6
 800593c:	07df      	lsls	r7, r3, #31
 800593e:	bf48      	it	mi
 8005940:	f043 0320 	orrmi.w	r3, r3, #32
 8005944:	6029      	str	r1, [r5, #0]
 8005946:	bf48      	it	mi
 8005948:	6023      	strmi	r3, [r4, #0]
 800594a:	b91e      	cbnz	r6, 8005954 <_printf_i+0x1a4>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	f023 0320 	bic.w	r3, r3, #32
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	2310      	movs	r3, #16
 8005956:	e7a7      	b.n	80058a8 <_printf_i+0xf8>
 8005958:	4824      	ldr	r0, [pc, #144]	; (80059ec <_printf_i+0x23c>)
 800595a:	e7e4      	b.n	8005926 <_printf_i+0x176>
 800595c:	4615      	mov	r5, r2
 800595e:	e7bd      	b.n	80058dc <_printf_i+0x12c>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	6826      	ldr	r6, [r4, #0]
 8005964:	6961      	ldr	r1, [r4, #20]
 8005966:	1d18      	adds	r0, r3, #4
 8005968:	6028      	str	r0, [r5, #0]
 800596a:	0635      	lsls	r5, r6, #24
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	d501      	bpl.n	8005974 <_printf_i+0x1c4>
 8005970:	6019      	str	r1, [r3, #0]
 8005972:	e002      	b.n	800597a <_printf_i+0x1ca>
 8005974:	0670      	lsls	r0, r6, #25
 8005976:	d5fb      	bpl.n	8005970 <_printf_i+0x1c0>
 8005978:	8019      	strh	r1, [r3, #0]
 800597a:	2300      	movs	r3, #0
 800597c:	6123      	str	r3, [r4, #16]
 800597e:	4615      	mov	r5, r2
 8005980:	e7bc      	b.n	80058fc <_printf_i+0x14c>
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	1d1a      	adds	r2, r3, #4
 8005986:	602a      	str	r2, [r5, #0]
 8005988:	681d      	ldr	r5, [r3, #0]
 800598a:	6862      	ldr	r2, [r4, #4]
 800598c:	2100      	movs	r1, #0
 800598e:	4628      	mov	r0, r5
 8005990:	f7fa fc26 	bl	80001e0 <memchr>
 8005994:	b108      	cbz	r0, 800599a <_printf_i+0x1ea>
 8005996:	1b40      	subs	r0, r0, r5
 8005998:	6060      	str	r0, [r4, #4]
 800599a:	6863      	ldr	r3, [r4, #4]
 800599c:	6123      	str	r3, [r4, #16]
 800599e:	2300      	movs	r3, #0
 80059a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a4:	e7aa      	b.n	80058fc <_printf_i+0x14c>
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	462a      	mov	r2, r5
 80059aa:	4649      	mov	r1, r9
 80059ac:	4640      	mov	r0, r8
 80059ae:	47d0      	blx	sl
 80059b0:	3001      	adds	r0, #1
 80059b2:	d0ad      	beq.n	8005910 <_printf_i+0x160>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	079b      	lsls	r3, r3, #30
 80059b8:	d413      	bmi.n	80059e2 <_printf_i+0x232>
 80059ba:	68e0      	ldr	r0, [r4, #12]
 80059bc:	9b03      	ldr	r3, [sp, #12]
 80059be:	4298      	cmp	r0, r3
 80059c0:	bfb8      	it	lt
 80059c2:	4618      	movlt	r0, r3
 80059c4:	e7a6      	b.n	8005914 <_printf_i+0x164>
 80059c6:	2301      	movs	r3, #1
 80059c8:	4632      	mov	r2, r6
 80059ca:	4649      	mov	r1, r9
 80059cc:	4640      	mov	r0, r8
 80059ce:	47d0      	blx	sl
 80059d0:	3001      	adds	r0, #1
 80059d2:	d09d      	beq.n	8005910 <_printf_i+0x160>
 80059d4:	3501      	adds	r5, #1
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	9903      	ldr	r1, [sp, #12]
 80059da:	1a5b      	subs	r3, r3, r1
 80059dc:	42ab      	cmp	r3, r5
 80059de:	dcf2      	bgt.n	80059c6 <_printf_i+0x216>
 80059e0:	e7eb      	b.n	80059ba <_printf_i+0x20a>
 80059e2:	2500      	movs	r5, #0
 80059e4:	f104 0619 	add.w	r6, r4, #25
 80059e8:	e7f5      	b.n	80059d6 <_printf_i+0x226>
 80059ea:	bf00      	nop
 80059ec:	08005b5d 	.word	0x08005b5d
 80059f0:	08005b6e 	.word	0x08005b6e

080059f4 <memmove>:
 80059f4:	4288      	cmp	r0, r1
 80059f6:	b510      	push	{r4, lr}
 80059f8:	eb01 0402 	add.w	r4, r1, r2
 80059fc:	d902      	bls.n	8005a04 <memmove+0x10>
 80059fe:	4284      	cmp	r4, r0
 8005a00:	4623      	mov	r3, r4
 8005a02:	d807      	bhi.n	8005a14 <memmove+0x20>
 8005a04:	1e43      	subs	r3, r0, #1
 8005a06:	42a1      	cmp	r1, r4
 8005a08:	d008      	beq.n	8005a1c <memmove+0x28>
 8005a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a12:	e7f8      	b.n	8005a06 <memmove+0x12>
 8005a14:	4402      	add	r2, r0
 8005a16:	4601      	mov	r1, r0
 8005a18:	428a      	cmp	r2, r1
 8005a1a:	d100      	bne.n	8005a1e <memmove+0x2a>
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a26:	e7f7      	b.n	8005a18 <memmove+0x24>

08005a28 <_sbrk_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4d06      	ldr	r5, [pc, #24]	; (8005a44 <_sbrk_r+0x1c>)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4604      	mov	r4, r0
 8005a30:	4608      	mov	r0, r1
 8005a32:	602b      	str	r3, [r5, #0]
 8005a34:	f7fb f9c4 	bl	8000dc0 <_sbrk>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_sbrk_r+0x1a>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_sbrk_r+0x1a>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20000308 	.word	0x20000308

08005a48 <memcpy>:
 8005a48:	440a      	add	r2, r1
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a50:	d100      	bne.n	8005a54 <memcpy+0xc>
 8005a52:	4770      	bx	lr
 8005a54:	b510      	push	{r4, lr}
 8005a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a5e:	4291      	cmp	r1, r2
 8005a60:	d1f9      	bne.n	8005a56 <memcpy+0xe>
 8005a62:	bd10      	pop	{r4, pc}

08005a64 <_realloc_r>:
 8005a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4614      	mov	r4, r2
 8005a6c:	460e      	mov	r6, r1
 8005a6e:	b921      	cbnz	r1, 8005a7a <_realloc_r+0x16>
 8005a70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a74:	4611      	mov	r1, r2
 8005a76:	f7ff bc49 	b.w	800530c <_malloc_r>
 8005a7a:	b92a      	cbnz	r2, 8005a88 <_realloc_r+0x24>
 8005a7c:	f7ff fbda 	bl	8005234 <_free_r>
 8005a80:	4625      	mov	r5, r4
 8005a82:	4628      	mov	r0, r5
 8005a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a88:	f000 f81b 	bl	8005ac2 <_malloc_usable_size_r>
 8005a8c:	4284      	cmp	r4, r0
 8005a8e:	4607      	mov	r7, r0
 8005a90:	d802      	bhi.n	8005a98 <_realloc_r+0x34>
 8005a92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a96:	d812      	bhi.n	8005abe <_realloc_r+0x5a>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	f7ff fc36 	bl	800530c <_malloc_r>
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d0ed      	beq.n	8005a82 <_realloc_r+0x1e>
 8005aa6:	42bc      	cmp	r4, r7
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	4631      	mov	r1, r6
 8005aac:	bf28      	it	cs
 8005aae:	463a      	movcs	r2, r7
 8005ab0:	f7ff ffca 	bl	8005a48 <memcpy>
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	f7ff fbbc 	bl	8005234 <_free_r>
 8005abc:	e7e1      	b.n	8005a82 <_realloc_r+0x1e>
 8005abe:	4635      	mov	r5, r6
 8005ac0:	e7df      	b.n	8005a82 <_realloc_r+0x1e>

08005ac2 <_malloc_usable_size_r>:
 8005ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac6:	1f18      	subs	r0, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfbc      	itt	lt
 8005acc:	580b      	ldrlt	r3, [r1, r0]
 8005ace:	18c0      	addlt	r0, r0, r3
 8005ad0:	4770      	bx	lr
	...

08005ad4 <_init>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	bf00      	nop
 8005ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ada:	bc08      	pop	{r3}
 8005adc:	469e      	mov	lr, r3
 8005ade:	4770      	bx	lr

08005ae0 <_fini>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	bf00      	nop
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr
